%import common.CNAME -> VALUE
%import common.CPP_COMMENT -> COMMENT
%import common.WS -> BS
%import common.FLOAT -> _FLOAT

%ignore COMMENT
%ignore BS

INTEGER: /((0[Xx][a-fA-F0-9][a-fA-F0-9_]*)|([0-9][0-9_]*)|(0[Oo][0-7][0-7_]*)|(0[Bb][01]01_]*))(u8|u16|u32|u64|u128|u|i8|i16|i32|i64|i128)?/
FLOAT: _FLOAT /("f16"|"f32"|"f64"|"f128")/
COMPLEX_TYPE: /("c16"|"c32"|"c64"|"c128")/
RUNE: /'((~[\r\n])|(\\(([abfnrtv\\"'{])|(x[a-fA-F0-9][a-fA-F0-9])|(u[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])|(U[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]))))?'/
STRING: /"(([^\r\n])|(\\(([abfnrtv\\"'{])|(x[a-fA-F0-9][a-fA-F0-9])|(u[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])|(U[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]))))*"/

LBRACE:                   "{"
RBRACE:                   "}"
DOLLAR:                   "$"
EQUAL:                    "="
COLON:                    ":"
COLON_COLON:              "::"
DOT:                      "."
DOT_DOT:                  ".."
ELLIPSIS:                 "..."
PLUS_PLUS:                "++"
MINUS_MINUS:              "--"
PLUS:                     "+"
MINUS:                    "-"
TILDE:                    "~"
BANG:                     "!"
STAR:                     "*"
SLASH:                    "/"
PERCENT:                  "%"
STAR_STAR:                "**"
DOUBLE_OPEN_ANGLE:        "<<"
DOUBLE_CLOSE_ANGLE:       ">>"
TRIPLE_CLOSE_ANGLE:       ">>>"
OPEN_ANGLE:               "<"
CLOSE_ANGLE:              ">"
OPEN_ANGLE_EQUAL:         "<="
CLOSE_ANGLE_EQUAL:        ">="
EQUAL_EQUAL:              "=="
BANG_EQUAL:               "!="
AMP:                      "&"
AMP_AMP:                  "&&"
CARET:                    "^"
PIPE:                     "|"
PIPE_PIPE:                "||"
STAR_EQUAL:               "*="
SLASH_EQUAL:              "/="
PERCENT_EQUAL:            "%="
PLUS_EQUAL:               "+="
MINUS_EQUAL:              "-="
DOUBLE_OPEN_ANGLE_EQUAL:  "<<="
DOUBLE_CLOSE_ANGLE_EQUAL: ">>="
TRIPLE_CLOSE_ANGLE_EQUAL: ">>>="
AMP_EQUAL:                "&="
CARET_EQUAL:              "^="
PIPE_EQUAL:               "|="
TILDE_EQUAL:              "~="
AMP_AMP_EQUAL:            "&&="
PIPE_PIPE_EQUAL:          "||="
STAR_STAR_EQUAL:          "**="

TRUE:                     "true"
FALSE:                    "false"

ARRAY: "array"
CARRAY: "carray"
CBITFIELD: "cbitfield"
CBLOCKFN: "cblockfn"
CFN: "cfn"
CONST: "const"
CPTR: "cptr"
CSTRUCT: "cstruct"
CUNION: "cunion"
CVOID: "cvoid"
ENUM: "enum"
FN: "fn"
IMPL: "impl"
IFACE: "iface"
MOD: "mod"
RANGE: "range"
REQ: "req"
STRUCT: "struct"
VARIANT: "variant"
TYPEDEF: "typedef"

IF: "if"
ELSE: "else"
SWITCH: "switch"
CASE: "case"
MATCH: "match"
DEFAULT: "default"
FOR: "for"
WHILE: "while"
LOOP: "loop"
BREAK: "break"
CONTINUE: "continue"
LET: "let"
RETURN: "return"

_base_identifier: VALUE ((DOT | COLON_COLON) VALUE)*

_no_ref_identifier: VALUE ("." VALUE)*

identifier: _base_identifier

lookup_expr: _base_identifier

runtime_lookup_expr: _base_identifier

_sized_array_type_literal_expr: \
  "[" _type_expr "*" (lookup_expr | int_literal_expr) "]"

_unsized_array_type_literal_expr: "[" _type_expr ELLIPSIS "]"

_base_array_type_literal_expr: _sized_array_type_literal_expr
                           | _unsized_array_type_literal_expr
array_type_literal_expr: STAR? _base_array_type_literal_expr
                         | AMP _base_array_type_literal_expr BANG?

c_array_type_literal_expr: \
  (STAR? CARRAY _sized_array_type_literal_expr)
  | (AMP CARRAY _sized_array_type_literal_expr BANG?)

c_bit_field_type_literal_expr: \
  (STAR? CBITFIELD "(" _int_type "," int_literal_expr ")")
  | (AMP CBITFIELD "(" _int_type "," int_literal_expr ")" BANG?)

_base_func: "(" _type_params? ")" [":" _type_expr]

c_block_function_type_expr: CBLOCKFN _base_func

c_function_type_expr: CFN _base_func

c_pointer_type_literal_expr: CPTR "(" _type_expr ")" BANG?

c_struct_type_literal_expr: \
  (STAR? CSTRUCT "{" _type_params? "}")
  | (AMP CSTRUCT "{" _type_params? "}" BANG?)

c_union_type_literal_expr: \
  (STAR? CUNION "{" _type_params "}")
  | (AMP CUNION "{" _type_params "}" BANG?)

!c_void_type_literal_expr: CVOID BANG?

function_type_literal_expr: FN _base_func

_base_range_type_literal_expr: ((float_literal_expr | lookup_expr) DOT_DOT \
                                (float_literal_expr | lookup_expr))
                             | ((  int_literal_expr | lookup_expr) DOT_DOT \
                                  (int_literal_expr | lookup_expr))

range_type_literal_expr: (STAR? _base_range_type_literal_expr)
                         | (AMP _base_range_type_literal_expr BANG?)

_base_struct_type_literal_expr: "{" _type_params? "}"

struct_type_literal_expr: (STAR? _base_struct_type_literal_expr)
                          | (AMP _base_struct_type_literal_expr BANG?)

_var_type_expr: (STAR? lookup_expr [ "(" _type_params ")" ])
              | (AMP   lookup_expr [ "(" _type_params ")" ] BANG?)
              | (      lookup_expr [ "(" _type_params ")" ] BANG?)

_block_var: (STAR? VALUE [ "(" _type_params ")" ])
          | (AMP   VALUE [ "(" _type_params ")" ] BANG?)
          | (      VALUE [ "(" _type_params ")" ] BANG?)

_literal_type_expr: array_type_literal_expr
                  | c_array_type_literal_expr
                  | c_bit_field_type_literal_expr
                  | c_block_function_type_expr
                  | c_function_type_expr
                  | c_pointer_type_literal_expr
                  | c_struct_type_literal_expr
                  | c_union_type_literal_expr
                  | c_void_type_literal_expr
                  | function_type_literal_expr
                  | range_type_literal_expr
                  | struct_type_literal_expr

type_placeholder: "$" VALUE

_type_expr: type_placeholder | _literal_type_expr | _var_type_expr

?type_param_pair: VALUE ":" _type_expr

_type_params: _type_param_list | _type_param_pair_list

_type_param_list: _type_expr
                | _type_expr ("," _type_expr)+ [","]
                | _type_expr ","

_type_param_pair_list: type_param_pair
                     | type_param_pair ("," type_param_pair)+ [","]
                     | type_param_pair ","

_expr_list: expr | expr ("," expr)+ [","] | expr ","

_expr_pair_list: VALUE ":" expr
               | VALUE ":" expr ("," VALUE ":" expr)+ [","]
               | VALUE ":" expr ","

_arg_list: _expr_list | _expr_pair_list

?expr: and_expr (PIPE_PIPE and_expr)*
 | "(" and_expr ("||" and_expr)* ")" -> or_expr

?and_expr: cmp_expr (AMP_AMP cmp_expr)* | "(" cmp_expr (AMP_AMP cmp_expr)* ")"

?cmp_expr: bor_expr (_cmp_op bor_expr)* | "(" bor_expr (_cmp_op bor_expr)* ")"

?bor_expr: bxor_expr (PIPE bxor_expr)* | "(" bxor_expr (PIPE bxor_expr)* ")"

?bxor_expr: band_expr (CARET band_expr)* | "(" band_expr (CARET band_expr)* ")"

?band_expr: shift_expr (AMP shift_expr)* | "(" shift_expr (AMP shift_expr)* ")"

?shift_expr: arith_expr (_shift_op arith_expr)*
       | "(" arith_expr (_shift_op arith_expr)* ")"

?arith_expr: mul_expr (_add_op mul_expr)*
       | "(" mul_expr (_add_op mul_expr)* ")"

?mul_expr: inc_dec_expr (_mul_op inc_dec_expr)*
     | "(" inc_dec_expr (_mul_op inc_dec_expr)* ")"

?inc_dec_expr: (inc_dec_expr _inc_dec_op) | unary_expr

?unary_expr: (_unary_op unary_expr) | power_expr

?power_expr: atom_expr (STAR_STAR unary_expr)*
       | "(" atom_expr (STAR_STAR unary_expr)+ ")"

?atom_expr: \
    atom_expr "(" [_arg_list] ")"                       -> call_expr
  | atom_expr "[" atom_expr "]"                         -> index_expr
  | "(" atom_expr ")"
  | "*" atom_expr                                       -> move_expr
  | "&" atom_expr                                       -> ref_expr
  | "&" atom_expr "!"                                   -> exref_expr
  | CPTR "(" atom_expr ")" BANG?                        -> c_pointer_expr
  | CVOID "(" atom_expr ")" BANG?                       -> c_void_expr
  | "[" _expr_list "]"                                  -> array_expr
  | ( runtime_lookup_expr
    | _base_struct_type_literal_expr) "{" _arg_list "}" -> struct_expr
  | runtime_lookup_expr
  | bool_literal_expr
  | complex_literal_expr
  | function_literal_expr
  | float_literal_expr
  | int_literal_expr
  | rune_literal_expr
  | string_literal_expr

_literal_expr: bool_literal_expr
             | complex_literal_expr
             | float_literal_expr
             | function_literal_expr
             | int_literal_expr
             | rune_literal_expr
             | string_literal_expr
             | "(" _literal_expr ")"

bool_literal_expr: (TRUE | FALSE)       

complex_literal_expr: COMPLEX_TYPE "(" \
  (float_literal_expr | int_literal_expr) "," \
  (float_literal_expr | int_literal_expr) [","] \
")"

float_literal_expr: FLOAT                

function_literal_expr: FN _base_func code_block

int_literal_expr: INTEGER              

rune_literal_expr: RUNE                 

string_literal_expr: STRING               

if_block: IF "(" expr ")" code_block [ELSE (if_block | code_block)]

switch_block: SWITCH "(" identifier ")" "{" ( \
  default_block | (case_block+ default_block?) \
) "}"

case_block: CASE "(" expr ")" code_block

match_block: MATCH "(" expr ")" "{" ( \
  default_block | (match_case_block+ default_block?) \
) "}"

match_case_block: CASE "(" VALUE ":" VALUE ")" code_block

default_block: DEFAULT code_block

for_block: \
  FOR "(" _block_var ":" (expr | range_type_literal_expr) ")" code_block

while_block: WHILE "(" expr ")" code_block

loop_block: LOOP code_block

break_stmt: BREAK

continue_stmt: CONTINUE

let_stmt: LET VALUE BANG? ":" expr

return_stmt: RETURN expr

assign_stmt: expr _assign_op expr

code_block: LBRACE (if_block
               | switch_block
               | match_block
               | for_block
               | while_block
               | loop_block
               | let_stmt
               | assign_stmt
               | return_stmt
               | break_stmt
               | continue_stmt
               | expr)* RBRACE

array_type_def: ARRAY VALUE array_type_literal_expr

c_array_type_def: CARRAY VALUE _sized_array_type_literal_expr

c_block_function_decl: CBLOCKFN VALUE _base_func

c_function_decl: CFN VALUE _base_func

c_struct_type_def: CSTRUCT VALUE "{" _type_params? "}"

c_union_type_def: CUNION VALUE "{" _type_params "}"

const_def: CONST VALUE ":" _literal_expr

enum_type_def: ENUM VALUE "{" _expr_pair_list "}"

function_type_def: FN VALUE _base_func

function_def: FN VALUE _base_func code_block

implementation_def: \
  IMPL identifier ["(" lookup_expr ")"] "{" function_def* "}"

interface_type_def: IFACE VALUE "{" (function_def | function_type_def)* "}"

module_decl: MOD _no_ref_identifier

range_type_def: RANGE VALUE range_type_literal_expr

requirement_decl: REQ _no_ref_identifier [":" VALUE]

struct_type_def: STRUCT VALUE struct_type_literal_expr

variant_type_def: VARIANT VALUE "{" _type_params "}"

type_def: TYPEDEF VALUE ":" _type_expr

module: module_decl (array_type_def
                   | c_array_type_def
                   | c_block_function_decl
                   | c_function_decl
                   | c_struct_type_def
                   | c_union_type_def
                   | const_def
                   | enum_type_def
                   | function_def
                   | function_type_def
                   | implementation_def
                   | interface_type_def
                   | range_type_def
                   | requirement_decl
                   | struct_type_def
                   | type_def
                   | variant_type_def)*

program: module+

!_cmp_op: "<"|">"|"<="|">="|"=="|"!="
!_shift_op: "<<"|">>"|">>>"
!_add_op: "+"|"-"
!_mul_op: "*"|"/"|"%"
!_inc_dec_op: "++"|"--"
!_unary_op: "+"|"-"|"~"|"!"
!_int_type: ("int" | "i8" | "i16" | "i32" | "i64" | "i128"
           | "uint" | "u8" | "u16" | "u32" | "u64" | "u128")
!_assign_op: \
  EQUAL PLUS_EQUAL | MINUS_EQUAL | PERCENT_EQUAL | CARET_EQUAL | AMP_EQUAL | \
  STAR_EQUAL | TILDE_EQUAL | PIPE_EQUAL | SLASH_EQUAL | AMP_AMP_EQUAL |      \
  PIPE_PIPE_EQUAL | STAR_STAR_EQUAL | DOUBLE_OPEN_ANGLE_EQUAL |              \
  DOUBLE_CLOSE_ANGLE_EQUAL | TRIPLE_CLOSE_ANGLE_EQUAL                        \
