# The file was automatically generated by Lark v1.1.2
__version__ = "1.1.2"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from abc import ABC, abstractmethod
from collections.abc import Sequence
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]', 
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        if (
                            isinstance(self, (UnexpectedToken, UnexpectedEOF))
                            and isinstance(ut, (UnexpectedToken, UnexpectedEOF))
                        ):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]
    interactive_parser: 'InteractiveParser'

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()
        
        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass


import sys, re
import logging
logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()


def classify(seq, key=None, value=None):
    d = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        if k in d:
            d[k].append(v)
        else:
            d[k] = [v]
    return d


def _deserialize(data, namespace, memo):
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


class Serialize:
    #--

    def memo_serialize(self, types_to_memoize):
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo=None):
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)
        return res

    @classmethod
    def deserialize(cls, data, memo):
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()

        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize):
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value):
        return isinstance(value, self.types_to_memoize)

    def serialize(self):
        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data, namespace, memo):
        return _deserialize(data, namespace, memo)


try:
    import regex  ##

except ImportError:
    regex = None

import sre_parse
import sre_constants
categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr):
    if regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]
    except sre_constants.error:
        if not regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            if c.match('') is None:
                ##

                return 1, int(sre_constants.MAXREPEAT)
            else:
                return 0, int(sre_constants.MAXREPEAT)


from collections import OrderedDict

class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, 'Tree[_Leaf_T]']


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: 'List[Branch[_Leaf_T]]'

    def __init__(self, data: str, children: 'List[Branch[_Leaf_T]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            return [indent_str*level, self._pretty_label(), '\t', '%s' % (self.children[0],), '\n']

        l = [indent_str*level, self._pretty_label(), '\n']
        for n in self.children:
            if isinstance(n, Tree):
                l += n._pretty(level+1, indent_str)
            else:
                l += [indent_str*(level+1), '%s' % (n,), '\n']

        return l

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __rich__(self, parent:'rich.tree.Tree'=None) -> 'rich.tree.Tree':
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f'[bold]{self.data}[/bold]')
        else:
            import rich.tree
            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f'[green]{c}[/green]')

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        queue = [self]
        subtrees = OrderedDict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            ##

            queue += [c for c in reversed(subtree.children)  ##

                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        while stack:
            node = stack.pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack.append(child)

    def find_pred(self, pred: 'Callable[[Tree[_Leaf_T]], bool]') -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar('_Return_T')
_Return_V = TypeVar('_Return_V')
_Leaf_T = TypeVar('_Leaf_T')
_Leaf_U = TypeVar('_Leaf_U')
_R = TypeVar('_R')
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        return self._transform_tree(tree)

    def __mul__(
            self: 'Transformer[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):

    transformers: 'Tuple[Union[Transformer, TransformerChain], ...]'

    def __init__(self, *transformers: 'Union[Transformer, TransformerChain]') -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
            self: 'TransformerChain[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        result, = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [self._visit_tree(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    base_func: Callable

    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        ##

        self.base_func = func  ##

        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            g = self.base_func.__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = self.base_func.__set_name__
        except AttributeError:
            return
        else:
            f(owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    def __init__(self, origin, expansion, order=0, alias=None, options=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy


class Pattern(Serialize, ABC):

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str]=(), raw: Optional[str]=None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int=TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'): ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T', bound="Token")

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    type: str
    start_pos: int
    value: Any
    line: int
    column: int
    end_line: int
    end_column: int
    end_pos: int

    def __new__(cls, type_, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)
        inst.type = type_
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    def update(self, type_: Optional[str]=None, value: Optional[Any]=None) -> 'Token':
        return Token.new_borrow_pos(
            type_ if type_ is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size//2)

            mres.append((mre, {i: n for n, i in mre.groupindex.items()}))
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre, type_from_index in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), type_from_index[m.lastindex]


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    #--

    __slots__ = 'text', 'line_ctr', 'last_token'

    def __init__(self, text, line_ctr=None, last_token=None):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: 'Lexer', lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: 'Lexer', text: str):
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


class BasicLexer(Lexer):

    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf') -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            for t in terminals:
                try:
                    self.re.compile(t.pattern.to_regexp(), conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)

    def next_token(self, lex_state: LexerState, parser_state: Any=None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            if type_ not in self.ignore_types:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                line_ctr.feed(value, type_ in self.newline_types)
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                lex_state.last_token = t
                return t
            else:
                if type_ in self.callback:
                    t2 = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
                    self.callback[type_](t2)
                line_ctr.feed(value, type_ in self.newline_types)

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):

    lexers: Dict[str, BasicLexer]
    root_lexer: BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[str, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        lexer_by_tokens: Dict[FrozenSet[str], BasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = BasicLexer(lexer_conf)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        self.root_lexer = BasicLexer(trad_conf)

    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##




_ParserArgType: 'TypeAlias' = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: 'TypeAlias' = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_Callback = Callable[[Token], Token]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _Callback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None, callbacks: Optional[Dict[str, _Callback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )


class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    def __init__(self, rules, callbacks, start):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start

        self.parser_type = None


from functools import partial, wraps
from itertools import repeat, product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [iter(child.children) if i in ambiguous else repeat(child) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f[0])) for f in product(zip(*expand))])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, '__default__', None)
        if default_handler:
            def default_callback(data, children):
                return default_handler(data, children, None)
        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class LALR_Parser(Serialize):
    def __init__(self, parser_conf, debug=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo):
        return self._parse_table.serialize(memo)
    
    def parse_interactive(self, lexer, start):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class ParseConf:
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    def __init__(self, parse_table, callbacks, start):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start


class ParserState:
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    def __init__(self, parse_conf, lexer, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self):
        return self.state_stack[-1]

    ##

    def __eq__(self, other):
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack),
        )

    def copy(self):
        return copy(self)

    def feed_token(self, token, is_end=False):
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s)

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]

class _Parser:
    def __init__(self, parse_table, callbacks, debug=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer, start, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)
    

    def parse_from_state(self, state):
        ##

        try:
            token = None
            for token in state.lexer.lex(state):
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')


class ParseTable:
    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()
        rules = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])


class IntParseTable(ParseTable):

    @classmethod
    def from_ParseTable(cls, parse_table):
        enum = list(parse_table.states)
        state_to_idx = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    parser = cls.deserialize(data['parser'], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: 'Dict[str, Callable[[LexerConf, Any, Any], Any]]' = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    def __init__(self, lexer_conf, parser_conf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert create_parser is not None, "{} is not supported in standalone mode".format(
                    parser_conf.parser_type
                )
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        try:
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
        except KeyError:
            assert issubclass(lexer_type, Lexer), lexer_type
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        else:
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex, options)

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)
    
    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def _make_lexer_thread(self, text):
        cls = (self.options and self.options._plugins.get('LexerThread')) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {'on_error': on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)
    
    def parse_interactive(self, text=None, start=None):
        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = self._make_lexer_thread(text)
        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('BasicLexer')) or BasicLexer
    return cls(lexer_conf)

def create_contextual_lexer(lexer_conf, parser, postlex, options):
    cls = (options and options._plugins.get('ContextualLexer')) or ContextualLexer
    states = {idx:list(t.keys()) for idx, t in parser._parse_table.states.items()}
    always_accept = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf, parser_conf, options=None):
    debug = options.debug if options else False
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    return cls(parser_conf, debug=debug)

_parser_creators['lalr'] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Any
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = """
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates (line, column, end_line, end_column) attributes into all tree branches.
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'import_paths': [],
        'source_path': None,
        '_plugins': {},
    }

    def __init__(self, options_dict):
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name):
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name, value):
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo):
        return self.options

    @classmethod
    def deserialize(cls, data, memo):
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class', '_plugins'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T', bound="Lark")

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    terminals: List[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)

        ##

        use_regex = self.options.regex
        if use_regex:
            if regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name
            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read
        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_md5 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not isascii(grammar):
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals', '_plugins')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_md5 = hashlib.md5(s.encode('utf8')).hexdigest()

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")
                        
                    cache_fn = tempfile.gettempdir() + '/.lark_cache_%s_%s_%s.tmp' % (cache_md5, *sys.version_info[:2])

                if FS.exists(cache_fn):
                    logger.debug('Loading grammar from cache: %s', cache_fn)
                    ##

                    for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                        del options[name]
                    with FS.open(cache_fn, 'rb') as f:
                        old_options = self.options
                        try:
                            file_md5 = f.readline().rstrip(b'\n')
                            cached_used_files = pickle.load(f)
                            if file_md5 == cache_md5.encode('utf8') and verify_used_files(cached_used_files):
                                cached_parser_data = pickle.load(f)
                                self._load(cached_parser_data, **options)
                                return
                        except Exception: ##

                            logger.exception("Failed to load Lark from cache: %r. We will try to carry on." % cache_fn)
                            
                            ##

                            ##

                            self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            with FS.open(cache_fn, 'wb') as f:
                assert cache_md5 is not None
                f.write(cache_md5.encode('utf8') + b'\n')
                pickle.dump(used_files, f)
                self.save(f, _LOAD_ALLOWED_OPTIONS)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore=False):
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self):
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self):
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options
        )

    def save(self, f, exclude_options: Collection[str] = ()):
        #--
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls, f):
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data, memo, options):
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self, f, **kwargs):
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: 'Sequence[str]'=[""], **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]
    
    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> 'ParseTree':
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        raise NotImplementedError()


class PythonIndenter(Indenter):
    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
{'parser': {'lexer_conf': {'terminals': [{'@': 0}, {'@': 1}, {'@': 2}, {'@': 3}, {'@': 4}, {'@': 5}, {'@': 6}, {'@': 7}, {'@': 8}, {'@': 9}, {'@': 10}, {'@': 11}, {'@': 12}, {'@': 13}, {'@': 14}, {'@': 15}, {'@': 16}, {'@': 17}, {'@': 18}, {'@': 19}, {'@': 20}, {'@': 21}, {'@': 22}, {'@': 23}, {'@': 24}, {'@': 25}, {'@': 26}, {'@': 27}, {'@': 28}, {'@': 29}, {'@': 30}, {'@': 31}, {'@': 32}, {'@': 33}, {'@': 34}, {'@': 35}, {'@': 36}, {'@': 37}, {'@': 38}, {'@': 39}, {'@': 40}, {'@': 41}, {'@': 42}, {'@': 43}, {'@': 44}, {'@': 45}, {'@': 46}, {'@': 47}, {'@': 48}, {'@': 49}, {'@': 50}, {'@': 51}, {'@': 52}, {'@': 53}, {'@': 54}, {'@': 55}, {'@': 56}, {'@': 57}, {'@': 58}, {'@': 59}, {'@': 60}, {'@': 61}, {'@': 62}, {'@': 63}, {'@': 64}, {'@': 65}, {'@': 66}, {'@': 67}, {'@': 68}, {'@': 69}, {'@': 70}, {'@': 71}, {'@': 72}, {'@': 73}, {'@': 74}, {'@': 75}, {'@': 76}, {'@': 77}, {'@': 78}, {'@': 79}, {'@': 80}, {'@': 81}, {'@': 82}, {'@': 83}, {'@': 84}, {'@': 85}, {'@': 86}, {'@': 87}, {'@': 88}, {'@': 89}, {'@': 90}, {'@': 91}, {'@': 92}, {'@': 93}, {'@': 94}, {'@': 95}, {'@': 96}], 'ignore': ['COMMENT', 'BS'], 'g_regex_flags': 0, 'use_bytes': False, 'lexer_type': 'contextual', '__type__': 'LexerConf'}, 'parser_conf': {'rules': [{'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}, {'@': 436}, {'@': 437}, {'@': 438}, {'@': 439}, {'@': 440}, {'@': 441}, {'@': 442}, {'@': 443}, {'@': 444}, {'@': 445}, {'@': 446}, {'@': 447}, {'@': 448}, {'@': 449}, {'@': 450}, {'@': 451}], 'start': ['module'], 'parser_type': 'lalr', '__type__': 'ParserConf'}, 'parser': {'tokens': {0: 'VALUE', 1: 'RPAR', 2: 'CONTINUE', 3: 'MINUS', 4: 'CARRAY', 5: 'LBRACE', 6: 'LSQB', 7: 'CSTRUCT', 8: 'INTEGER', 9: 'TRUE', 10: 'FOR', 11: 'LOOP', 12: 'RETURN', 13: 'SWITCH', 14: 'CUNION', 15: 'BREAK', 16: 'MATCH', 17: 'RUNE', 18: 'FLOAT', 19: 'STRING', 20: 'PLUS', 21: 'AMP', 22: 'LPAR', 23: 'STAR', 24: 'RBRACE', 25: 'IF', 26: 'TILDE', 27: 'LET', 28: 'COMPLEX', 29: 'BANG', 30: 'FALSE', 31: 'WHILE', 32: 'c_struct_type_expr', 33: 'mul_expr', 34: 'c_union_type_expr', 35: 'struct_type_expr', 36: 'atom_expr', 37: 'cmp_expr', 38: 'bor_expr', 39: 'arith_expr', 40: 'band_expr', 41: 'inc_dec_expr', 42: 'identifier', 43: '_unary_op', 44: 'c_array_type_expr', 45: 'shift_expr', 46: 'bxor_expr', 47: 'power_expr', 48: 'function_type_expr', 49: 'unary_expr', 50: 'function_literal', 51: 'COMMA', 52: '__band_expr_star_14', 53: 'IFACE', 54: 'CBLOCKFNTYPE', 55: 'OPEN_ANGLE_EQUAL', 56: 'STAR_EQUAL', 57: 'PIPE_PIPE_EQUAL', 58: 'STRUCT', 59: 'DOUBLE_CLOSE_ANGLE_EQUAL', 60: 'CFNTYPE', 61: 'BANG_EQUAL', 62: 'MINUS_EQUAL', 63: 'CONST', 64: 'SLASH_EQUAL', 65: 'OPEN_ANGLE', 66: 'EQUAL', 67: 'CLOSE_ANGLE', 68: 'DOUBLE_OPEN_ANGLE_EQUAL', 69: 'AMP_EQUAL', 70: 'AMP_AMP_EQUAL', 71: 'VARIANT', 72: 'EQUAL_EQUAL', 73: 'ARRAY', 74: 'CFN', 75: 'PLUS_EQUAL', 76: 'CLOSE_ANGLE_EQUAL', 77: 'IMPL', 78: 'AMP_AMP', 79: 'PIPE_PIPE', 80: 'ALIAS', 81: '$END', 82: 'CARET_EQUAL', 83: 'CARET', 84: 'PIPE_EQUAL', 85: 'PERCENT_EQUAL', 86: 'REQ', 87: 'TRIPLE_CLOSE_ANGLE_EQUAL', 88: 'FN', 89: 'ENUM', 90: 'TILDE_EQUAL', 91: 'SLASH_SLASH_EQUAL', 92: 'PIPE', 93: 'RANGE', 94: 'MINUS_MINUS', 95: 'DOUBLE_OPEN_ANGLE', 96: 'STAR_STAR', 97: '__ANON_2', 98: 'PLUS_PLUS', 99: '__ANON_1', 100: 'RSQB', 101: 'TRIPLE_CLOSE_ANGLE', 102: 'PERCENT', 103: 'DOT', 104: 'DOUBLE_CLOSE_ANGLE', 105: 'CASE', 106: 'DEFAULT', 107: 'ELSE', 108: 'ELLIPSIS', 109: 'expr', 110: 'and_expr', 111: '_shift_op', 112: '__shift_expr_star_15', 113: 'code_block', 114: 'value', 115: '__bxor_expr_star_13', 116: 'expr_list', 117: '__expr_star_9', 118: '__cmp_expr_star_11', 119: '_cmp_op', 120: '__ANON_0', 121: 'COLON_COLON', 122: 'COLON', 123: 'c_function_type_type_def', 124: 'struct_type_def', 125: 'enum_type_def', 126: 'function_type_def', 127: 'const_def', 128: 'implementation_def', 129: 'variant_type_def', 130: 'requirement_decl', 131: 'function_def', 132: 'array_type_def', 133: 'c_union_type_def', 134: 'c_block_function_type_type_def', 135: 'alias_def', 136: 'c_array_type_def', 137: 'range_type_def', 138: 'c_function_type_def', 139: 'c_struct_type_def', 140: 'interface_type_def', 141: 'type_param_pair', 142: 'return_type', 143: '__mul_expr_star_17', 144: '_inc_dec_op', 145: '_mul_op', 146: '_type_param_pair_list', 147: '__identifier_star_1', 148: 'array_type_expr', 149: '__and_expr_star_10', 150: '__value_list_plus_0', 151: '__bor_expr_star_12', 152: 'range_type_expr', 153: '__power_expr_star_18', 154: '__code_block_star_21', 155: 'return_stmt', 156: 'loop_block', 157: 'break_stmt', 158: 'while_block', 159: 'assign_stmt', 160: 'let_stmt', 161: 'for_block', 162: 'switch_block', 163: 'if_block', 164: 'match_block', 165: 'continue_stmt', 166: 'expr_pair_list', 167: '__arith_expr_star_16', 168: '_add_op', 169: '_type_expr', 170: 'c_pointer_type_expr', 171: 'CVOID', 172: 'CPTR', 173: 'c_bit_field_type_expr', 174: 'CBITFIELD', 175: '_type_param', 176: 'param', 177: 'c_block_function_type_type_expr', 178: 'c_function_type_type_expr', 179: 'c_void_type_expr', 180: '__interface_type_def_star_2', 181: '_type_param_list', 182: 'module', 183: 'module_decl', 184: 'MOD', 185: '__module_star_6', 186: '__expr_list_plus_7', 187: '__implementation_def_star_5', 188: '__match_block_plus_20', 189: 'default_block', 190: 'match_case_block', 191: 'case_block', 192: '__expr_pair_list_plus_8', 193: 'value_list', 194: '___type_param_list_plus_3', 195: '___type_param_pair_list_plus_4', 196: '__switch_block_plus_19'}, 'states': {0: {0: (0, 279)}, 1: {1: (0, 320)}, 2: {2: (1, {'@': 429}), 3: (1, {'@': 429}), 4: (1, {'@': 429}), 5: (1, {'@': 429}), 6: (1, {'@': 429}), 7: (1, {'@': 429}), 8: (1, {'@': 429}), 9: (1, {'@': 429}), 10: (1, {'@': 429}), 11: (1, {'@': 429}), 12: (1, {'@': 429}), 13: (1, {'@': 429}), 14: (1, {'@': 429}), 15: (1, {'@': 429}), 16: (1, {'@': 429}), 17: (1, {'@': 429}), 18: (1, {'@': 429}), 19: (1, {'@': 429}), 20: (1, {'@': 429}), 21: (1, {'@': 429}), 22: (1, {'@': 429}), 23: (1, {'@': 429}), 24: (1, {'@': 429}), 25: (1, {'@': 429}), 26: (1, {'@': 429}), 27: (1, {'@': 429}), 28: (1, {'@': 429}), 29: (1, {'@': 429}), 30: (1, {'@': 429}), 0: (1, {'@': 429}), 31: (1, {'@': 429})}, 3: {32: (0, 559), 33: (0, 260), 28: (0, 315), 0: (0, 107), 26: (0, 20), 34: (0, 13), 22: (0, 321), 35: (0, 8), 36: (0, 550), 17: (0, 585), 37: (0, 650), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 45: (0, 6), 46: (0, 188), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 4: {0: (0, 187)}, 5: {51: (1, {'@': 360}), 1: (1, {'@': 360}), 24: (1, {'@': 360})}, 6: {21: (0, 620), 52: (0, 638), 53: (1, {'@': 240}), 54: (1, {'@': 240}), 55: (1, {'@': 240}), 56: (1, {'@': 240}), 2: (1, {'@': 240}), 3: (1, {'@': 240}), 57: (1, {'@': 240}), 58: (1, {'@': 240}), 59: (1, {'@': 240}), 8: (1, {'@': 240}), 60: (1, {'@': 240}), 9: (1, {'@': 240}), 11: (1, {'@': 240}), 12: (1, {'@': 240}), 61: (1, {'@': 240}), 13: (1, {'@': 240}), 62: (1, {'@': 240}), 63: (1, {'@': 240}), 15: (1, {'@': 240}), 64: (1, {'@': 240}), 16: (1, {'@': 240}), 17: (1, {'@': 240}), 65: (1, {'@': 240}), 66: (1, {'@': 240}), 67: (1, {'@': 240}), 68: (1, {'@': 240}), 69: (1, {'@': 240}), 70: (1, {'@': 240}), 71: (1, {'@': 240}), 25: (1, {'@': 240}), 72: (1, {'@': 240}), 73: (1, {'@': 240}), 26: (1, {'@': 240}), 27: (1, {'@': 240}), 1: (1, {'@': 240}), 28: (1, {'@': 240}), 30: (1, {'@': 240}), 74: (1, {'@': 240}), 75: (1, {'@': 240}), 76: (1, {'@': 240}), 77: (1, {'@': 240}), 78: (1, {'@': 240}), 79: (1, {'@': 240}), 80: (1, {'@': 240}), 81: (1, {'@': 240}), 4: (1, {'@': 240}), 5: (1, {'@': 240}), 82: (1, {'@': 240}), 6: (1, {'@': 240}), 83: (1, {'@': 240}), 7: (1, {'@': 240}), 84: (1, {'@': 240}), 10: (1, {'@': 240}), 14: (1, {'@': 240}), 85: (1, {'@': 240}), 18: (1, {'@': 240}), 19: (1, {'@': 240}), 86: (1, {'@': 240}), 20: (1, {'@': 240}), 87: (1, {'@': 240}), 22: (1, {'@': 240}), 23: (1, {'@': 240}), 24: (1, {'@': 240}), 51: (1, {'@': 240}), 88: (1, {'@': 240}), 89: (1, {'@': 240}), 90: (1, {'@': 240}), 91: (1, {'@': 240}), 92: (1, {'@': 240}), 29: (1, {'@': 240}), 0: (1, {'@': 240}), 31: (1, {'@': 240}), 93: (1, {'@': 240})}, 7: {0: (0, 107), 42: (0, 242)}, 8: {5: (0, 350)}, 9: {77: (1, {'@': 366}), 60: (1, {'@': 366}), 53: (1, {'@': 366}), 54: (1, {'@': 366}), 80: (1, {'@': 366}), 93: (1, {'@': 366}), 81: (1, {'@': 366}), 88: (1, {'@': 366}), 4: (1, {'@': 366}), 86: (1, {'@': 366}), 74: (1, {'@': 366}), 63: (1, {'@': 366}), 71: (1, {'@': 366}), 14: (1, {'@': 366}), 7: (1, {'@': 366}), 58: (1, {'@': 366}), 73: (1, {'@': 366}), 89: (1, {'@': 366})}, 10: {2: (1, {'@': 326}), 3: (1, {'@': 326}), 4: (1, {'@': 326}), 5: (1, {'@': 326}), 6: (1, {'@': 326}), 7: (1, {'@': 326}), 8: (1, {'@': 326}), 9: (1, {'@': 326}), 10: (1, {'@': 326}), 11: (1, {'@': 326}), 12: (1, {'@': 326}), 13: (1, {'@': 326}), 14: (1, {'@': 326}), 15: (1, {'@': 326}), 16: (1, {'@': 326}), 17: (1, {'@': 326}), 18: (1, {'@': 326}), 19: (1, {'@': 326}), 20: (1, {'@': 326}), 21: (1, {'@': 326}), 22: (1, {'@': 326}), 23: (1, {'@': 326}), 24: (1, {'@': 326}), 25: (1, {'@': 326}), 26: (1, {'@': 326}), 27: (1, {'@': 326}), 28: (1, {'@': 326}), 29: (1, {'@': 326}), 30: (1, {'@': 326}), 0: (1, {'@': 326}), 31: (1, {'@': 326}), 88: (1, {'@': 326}), 77: (1, {'@': 326}), 53: (1, {'@': 326}), 54: (1, {'@': 326}), 80: (1, {'@': 326}), 81: (1, {'@': 326}), 86: (1, {'@': 326}), 71: (1, {'@': 326}), 58: (1, {'@': 326}), 73: (1, {'@': 326}), 89: (1, {'@': 326}), 60: (1, {'@': 326}), 74: (1, {'@': 326}), 63: (1, {'@': 326}), 93: (1, {'@': 326}), 56: (1, {'@': 326}), 57: (1, {'@': 326}), 59: (1, {'@': 326}), 94: (1, {'@': 326}), 64: (1, {'@': 326}), 65: (1, {'@': 326}), 67: (1, {'@': 326}), 95: (1, {'@': 326}), 70: (1, {'@': 326}), 96: (1, {'@': 326}), 72: (1, {'@': 326}), 1: (1, {'@': 326}), 76: (1, {'@': 326}), 78: (1, {'@': 326}), 79: (1, {'@': 326}), 84: (1, {'@': 326}), 97: (1, {'@': 326}), 87: (1, {'@': 326}), 98: (1, {'@': 326}), 91: (1, {'@': 326}), 55: (1, {'@': 326}), 61: (1, {'@': 326}), 62: (1, {'@': 326}), 99: (1, {'@': 326}), 66: (1, {'@': 326}), 68: (1, {'@': 326}), 100: (1, {'@': 326}), 69: (1, {'@': 326}), 75: (1, {'@': 326}), 101: (1, {'@': 326}), 82: (1, {'@': 326}), 83: (1, {'@': 326}), 102: (1, {'@': 326}), 103: (1, {'@': 326}), 85: (1, {'@': 326}), 104: (1, {'@': 326}), 51: (1, {'@': 326}), 90: (1, {'@': 326}), 92: (1, {'@': 326}), 105: (1, {'@': 326}), 106: (1, {'@': 326}), 107: (1, {'@': 326})}, 11: {24: (0, 583)}, 12: {77: (1, {'@': 200}), 60: (1, {'@': 200}), 53: (1, {'@': 200}), 54: (1, {'@': 200}), 80: (1, {'@': 200}), 93: (1, {'@': 200}), 81: (1, {'@': 200}), 88: (1, {'@': 200}), 4: (1, {'@': 200}), 86: (1, {'@': 200}), 74: (1, {'@': 200}), 63: (1, {'@': 200}), 71: (1, {'@': 200}), 14: (1, {'@': 200}), 7: (1, {'@': 200}), 58: (1, {'@': 200}), 73: (1, {'@': 200}), 89: (1, {'@': 200})}, 13: {5: (0, 502)}, 14: {23: (1, {'@': 114}), 108: (1, {'@': 114}), 51: (1, {'@': 114}), 1: (1, {'@': 114}), 77: (1, {'@': 114}), 53: (1, {'@': 114}), 54: (1, {'@': 114}), 80: (1, {'@': 114}), 81: (1, {'@': 114}), 86: (1, {'@': 114}), 4: (1, {'@': 114}), 71: (1, {'@': 114}), 88: (1, {'@': 114}), 7: (1, {'@': 114}), 58: (1, {'@': 114}), 73: (1, {'@': 114}), 89: (1, {'@': 114}), 60: (1, {'@': 114}), 74: (1, {'@': 114}), 63: (1, {'@': 114}), 14: (1, {'@': 114}), 93: (1, {'@': 114}), 24: (1, {'@': 114}), 29: (1, {'@': 114}), 5: (1, {'@': 114})}, 15: {18: (0, 466)}, 16: {77: (1, {'@': 381}), 60: (1, {'@': 381}), 53: (1, {'@': 381}), 54: (1, {'@': 381}), 80: (1, {'@': 381}), 93: (1, {'@': 381}), 81: (1, {'@': 381}), 88: (1, {'@': 381}), 4: (1, {'@': 381}), 86: (1, {'@': 381}), 74: (1, {'@': 381}), 63: (1, {'@': 381}), 71: (1, {'@': 381}), 14: (1, {'@': 381}), 7: (1, {'@': 381}), 58: (1, {'@': 381}), 73: (1, {'@': 381}), 89: (1, {'@': 381})}, 17: {77: (1, {'@': 379}), 60: (1, {'@': 379}), 53: (1, {'@': 379}), 54: (1, {'@': 379}), 80: (1, {'@': 379}), 93: (1, {'@': 379}), 81: (1, {'@': 379}), 88: (1, {'@': 379}), 4: (1, {'@': 379}), 86: (1, {'@': 379}), 74: (1, {'@': 379}), 63: (1, {'@': 379}), 71: (1, {'@': 379}), 14: (1, {'@': 379}), 7: (1, {'@': 379}), 58: (1, {'@': 379}), 73: (1, {'@': 379}), 89: (1, {'@': 379})}, 18: {77: (1, {'@': 376}), 60: (1, {'@': 376}), 53: (1, {'@': 376}), 54: (1, {'@': 376}), 80: (1, {'@': 376}), 93: (1, {'@': 376}), 81: (1, {'@': 376}), 88: (1, {'@': 376}), 4: (1, {'@': 376}), 86: (1, {'@': 376}), 74: (1, {'@': 376}), 63: (1, {'@': 376}), 71: (1, {'@': 376}), 14: (1, {'@': 376}), 7: (1, {'@': 376}), 58: (1, {'@': 376}), 73: (1, {'@': 376}), 89: (1, {'@': 376})}, 19: {77: (1, {'@': 151}), 53: (1, {'@': 151}), 54: (1, {'@': 151}), 80: (1, {'@': 151}), 81: (1, {'@': 151}), 86: (1, {'@': 151}), 4: (1, {'@': 151}), 71: (1, {'@': 151}), 88: (1, {'@': 151}), 7: (1, {'@': 151}), 58: (1, {'@': 151}), 73: (1, {'@': 151}), 89: (1, {'@': 151}), 60: (1, {'@': 151}), 74: (1, {'@': 151}), 63: (1, {'@': 151}), 14: (1, {'@': 151}), 93: (1, {'@': 151})}, 20: {3: (1, {'@': 346}), 4: (1, {'@': 346}), 5: (1, {'@': 346}), 6: (1, {'@': 346}), 7: (1, {'@': 346}), 8: (1, {'@': 346}), 9: (1, {'@': 346}), 14: (1, {'@': 346}), 17: (1, {'@': 346}), 18: (1, {'@': 346}), 19: (1, {'@': 346}), 20: (1, {'@': 346}), 21: (1, {'@': 346}), 22: (1, {'@': 346}), 23: (1, {'@': 346}), 26: (1, {'@': 346}), 28: (1, {'@': 346}), 29: (1, {'@': 346}), 30: (1, {'@': 346}), 0: (1, {'@': 346})}, 21: {88: (1, {'@': 363}), 24: (1, {'@': 363})}, 22: {77: (1, {'@': 375}), 60: (1, {'@': 375}), 53: (1, {'@': 375}), 54: (1, {'@': 375}), 80: (1, {'@': 375}), 93: (1, {'@': 375}), 81: (1, {'@': 375}), 88: (1, {'@': 375}), 4: (1, {'@': 375}), 86: (1, {'@': 375}), 74: (1, {'@': 375}), 63: (1, {'@': 375}), 71: (1, {'@': 375}), 14: (1, {'@': 375}), 7: (1, {'@': 375}), 58: (1, {'@': 375}), 73: (1, {'@': 375}), 89: (1, {'@': 375})}, 23: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 109: (0, 491), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 24: {16: (1, {'@': 318}), 17: (1, {'@': 318}), 18: (1, {'@': 318}), 2: (1, {'@': 318}), 19: (1, {'@': 318}), 3: (1, {'@': 318}), 4: (1, {'@': 318}), 20: (1, {'@': 318}), 21: (1, {'@': 318}), 22: (1, {'@': 318}), 5: (1, {'@': 318}), 23: (1, {'@': 318}), 24: (1, {'@': 318}), 6: (1, {'@': 318}), 25: (1, {'@': 318}), 7: (1, {'@': 318}), 8: (1, {'@': 318}), 9: (1, {'@': 318}), 26: (1, {'@': 318}), 27: (1, {'@': 318}), 10: (1, {'@': 318}), 11: (1, {'@': 318}), 28: (1, {'@': 318}), 29: (1, {'@': 318}), 30: (1, {'@': 318}), 12: (1, {'@': 318}), 0: (1, {'@': 318}), 13: (1, {'@': 318}), 31: (1, {'@': 318}), 14: (1, {'@': 318}), 15: (1, {'@': 318})}, 25: {2: (1, {'@': 448}), 3: (1, {'@': 448}), 4: (1, {'@': 448}), 5: (1, {'@': 448}), 6: (1, {'@': 448}), 7: (1, {'@': 448}), 8: (1, {'@': 448}), 9: (1, {'@': 448}), 10: (1, {'@': 448}), 11: (1, {'@': 448}), 12: (1, {'@': 448}), 13: (1, {'@': 448}), 14: (1, {'@': 448}), 15: (1, {'@': 448}), 16: (1, {'@': 448}), 17: (1, {'@': 448}), 18: (1, {'@': 448}), 19: (1, {'@': 448}), 20: (1, {'@': 448}), 21: (1, {'@': 448}), 22: (1, {'@': 448}), 23: (1, {'@': 448}), 24: (1, {'@': 448}), 25: (1, {'@': 448}), 26: (1, {'@': 448}), 27: (1, {'@': 448}), 28: (1, {'@': 448}), 29: (1, {'@': 448}), 30: (1, {'@': 448}), 0: (1, {'@': 448}), 31: (1, {'@': 448})}, 26: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 109: (0, 97), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 27: {0: (0, 107), 42: (0, 469), 8: (0, 210)}, 28: {23: (1, {'@': 108}), 108: (1, {'@': 108}), 51: (1, {'@': 108}), 1: (1, {'@': 108}), 77: (1, {'@': 108}), 53: (1, {'@': 108}), 54: (1, {'@': 108}), 80: (1, {'@': 108}), 81: (1, {'@': 108}), 86: (1, {'@': 108}), 4: (1, {'@': 108}), 71: (1, {'@': 108}), 88: (1, {'@': 108}), 7: (1, {'@': 108}), 58: (1, {'@': 108}), 73: (1, {'@': 108}), 89: (1, {'@': 108}), 60: (1, {'@': 108}), 74: (1, {'@': 108}), 63: (1, {'@': 108}), 14: (1, {'@': 108}), 93: (1, {'@': 108}), 24: (1, {'@': 108}), 5: (1, {'@': 108}), 29: (1, {'@': 108})}, 29: {0: (0, 626)}, 30: {53: (1, {'@': 234}), 54: (1, {'@': 234}), 55: (1, {'@': 234}), 56: (1, {'@': 234}), 2: (1, {'@': 234}), 3: (1, {'@': 234}), 57: (1, {'@': 234}), 58: (1, {'@': 234}), 59: (1, {'@': 234}), 8: (1, {'@': 234}), 60: (1, {'@': 234}), 9: (1, {'@': 234}), 11: (1, {'@': 234}), 12: (1, {'@': 234}), 61: (1, {'@': 234}), 13: (1, {'@': 234}), 62: (1, {'@': 234}), 63: (1, {'@': 234}), 15: (1, {'@': 234}), 64: (1, {'@': 234}), 16: (1, {'@': 234}), 17: (1, {'@': 234}), 65: (1, {'@': 234}), 66: (1, {'@': 234}), 67: (1, {'@': 234}), 68: (1, {'@': 234}), 69: (1, {'@': 234}), 70: (1, {'@': 234}), 71: (1, {'@': 234}), 25: (1, {'@': 234}), 72: (1, {'@': 234}), 73: (1, {'@': 234}), 26: (1, {'@': 234}), 27: (1, {'@': 234}), 1: (1, {'@': 234}), 28: (1, {'@': 234}), 30: (1, {'@': 234}), 74: (1, {'@': 234}), 75: (1, {'@': 234}), 76: (1, {'@': 234}), 77: (1, {'@': 234}), 78: (1, {'@': 234}), 79: (1, {'@': 234}), 80: (1, {'@': 234}), 81: (1, {'@': 234}), 4: (1, {'@': 234}), 5: (1, {'@': 234}), 82: (1, {'@': 234}), 6: (1, {'@': 234}), 7: (1, {'@': 234}), 84: (1, {'@': 234}), 10: (1, {'@': 234}), 14: (1, {'@': 234}), 85: (1, {'@': 234}), 18: (1, {'@': 234}), 19: (1, {'@': 234}), 86: (1, {'@': 234}), 20: (1, {'@': 234}), 21: (1, {'@': 234}), 87: (1, {'@': 234}), 22: (1, {'@': 234}), 23: (1, {'@': 234}), 24: (1, {'@': 234}), 51: (1, {'@': 234}), 88: (1, {'@': 234}), 89: (1, {'@': 234}), 90: (1, {'@': 234}), 91: (1, {'@': 234}), 29: (1, {'@': 234}), 0: (1, {'@': 234}), 31: (1, {'@': 234}), 93: (1, {'@': 234})}, 31: {1: (0, 75), 111: (0, 181), 112: (0, 70), 95: (0, 115), 104: (0, 193), 101: (0, 149), 21: (1, {'@': 244}), 83: (1, {'@': 244}), 92: (1, {'@': 244}), 55: (1, {'@': 244}), 65: (1, {'@': 244}), 67: (1, {'@': 244}), 61: (1, {'@': 244}), 76: (1, {'@': 244}), 72: (1, {'@': 244}), 78: (1, {'@': 244}), 79: (1, {'@': 244})}, 32: {0: (0, 265)}, 33: {32: (0, 559), 42: (0, 168), 20: (0, 95), 4: (0, 556), 36: (0, 550), 28: (0, 315), 5: (0, 642), 22: (0, 271), 0: (0, 107), 26: (0, 20), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 3: (0, 211), 47: (0, 243), 48: (0, 238), 18: (0, 651), 8: (0, 500), 23: (0, 134), 49: (0, 240), 50: (0, 102)}, 34: {77: (1, {'@': 374}), 60: (1, {'@': 374}), 53: (1, {'@': 374}), 54: (1, {'@': 374}), 80: (1, {'@': 374}), 93: (1, {'@': 374}), 81: (1, {'@': 374}), 88: (1, {'@': 374}), 4: (1, {'@': 374}), 86: (1, {'@': 374}), 74: (1, {'@': 374}), 63: (1, {'@': 374}), 71: (1, {'@': 374}), 14: (1, {'@': 374}), 7: (1, {'@': 374}), 58: (1, {'@': 374}), 73: (1, {'@': 374}), 89: (1, {'@': 374})}, 35: {113: (0, 330), 5: (0, 246)}, 36: {51: (0, 197), 1: (1, {'@': 198}), 24: (1, {'@': 198})}, 37: {0: (0, 118), 114: (0, 313)}, 38: {115: (0, 110), 83: (0, 135), 53: (1, {'@': 236}), 54: (1, {'@': 236}), 55: (1, {'@': 236}), 56: (1, {'@': 236}), 2: (1, {'@': 236}), 3: (1, {'@': 236}), 57: (1, {'@': 236}), 58: (1, {'@': 236}), 59: (1, {'@': 236}), 8: (1, {'@': 236}), 60: (1, {'@': 236}), 9: (1, {'@': 236}), 11: (1, {'@': 236}), 12: (1, {'@': 236}), 61: (1, {'@': 236}), 13: (1, {'@': 236}), 62: (1, {'@': 236}), 63: (1, {'@': 236}), 15: (1, {'@': 236}), 64: (1, {'@': 236}), 16: (1, {'@': 236}), 17: (1, {'@': 236}), 65: (1, {'@': 236}), 66: (1, {'@': 236}), 67: (1, {'@': 236}), 68: (1, {'@': 236}), 69: (1, {'@': 236}), 70: (1, {'@': 236}), 71: (1, {'@': 236}), 25: (1, {'@': 236}), 72: (1, {'@': 236}), 73: (1, {'@': 236}), 26: (1, {'@': 236}), 27: (1, {'@': 236}), 1: (1, {'@': 236}), 28: (1, {'@': 236}), 30: (1, {'@': 236}), 74: (1, {'@': 236}), 75: (1, {'@': 236}), 76: (1, {'@': 236}), 77: (1, {'@': 236}), 78: (1, {'@': 236}), 79: (1, {'@': 236}), 80: (1, {'@': 236}), 81: (1, {'@': 236}), 4: (1, {'@': 236}), 5: (1, {'@': 236}), 82: (1, {'@': 236}), 6: (1, {'@': 236}), 7: (1, {'@': 236}), 84: (1, {'@': 236}), 10: (1, {'@': 236}), 14: (1, {'@': 236}), 85: (1, {'@': 236}), 18: (1, {'@': 236}), 19: (1, {'@': 236}), 86: (1, {'@': 236}), 20: (1, {'@': 236}), 21: (1, {'@': 236}), 87: (1, {'@': 236}), 22: (1, {'@': 236}), 23: (1, {'@': 236}), 24: (1, {'@': 236}), 51: (1, {'@': 236}), 88: (1, {'@': 236}), 89: (1, {'@': 236}), 90: (1, {'@': 236}), 91: (1, {'@': 236}), 92: (1, {'@': 236}), 29: (1, {'@': 236}), 0: (1, {'@': 236}), 31: (1, {'@': 236}), 93: (1, {'@': 236})}, 39: {24: (0, 293)}, 40: {32: (0, 559), 109: (0, 365), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 116: (0, 11), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 41: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 109: (0, 333), 23: (0, 134), 50: (0, 102)}, 42: {0: (0, 274)}, 43: {16: (1, {'@': 310}), 17: (1, {'@': 310}), 18: (1, {'@': 310}), 2: (1, {'@': 310}), 19: (1, {'@': 310}), 3: (1, {'@': 310}), 4: (1, {'@': 310}), 20: (1, {'@': 310}), 21: (1, {'@': 310}), 22: (1, {'@': 310}), 5: (1, {'@': 310}), 23: (1, {'@': 310}), 24: (1, {'@': 310}), 6: (1, {'@': 310}), 25: (1, {'@': 310}), 7: (1, {'@': 310}), 8: (1, {'@': 310}), 9: (1, {'@': 310}), 26: (1, {'@': 310}), 27: (1, {'@': 310}), 10: (1, {'@': 310}), 11: (1, {'@': 310}), 28: (1, {'@': 310}), 29: (1, {'@': 310}), 30: (1, {'@': 310}), 12: (1, {'@': 310}), 0: (1, {'@': 310}), 13: (1, {'@': 310}), 31: (1, {'@': 310}), 14: (1, {'@': 310}), 15: (1, {'@': 310})}, 44: {53: (1, {'@': 271}), 54: (1, {'@': 271}), 55: (1, {'@': 271}), 56: (1, {'@': 271}), 2: (1, {'@': 271}), 3: (1, {'@': 271}), 57: (1, {'@': 271}), 58: (1, {'@': 271}), 59: (1, {'@': 271}), 8: (1, {'@': 271}), 60: (1, {'@': 271}), 9: (1, {'@': 271}), 11: (1, {'@': 271}), 12: (1, {'@': 271}), 61: (1, {'@': 271}), 13: (1, {'@': 271}), 62: (1, {'@': 271}), 63: (1, {'@': 271}), 94: (1, {'@': 271}), 15: (1, {'@': 271}), 64: (1, {'@': 271}), 16: (1, {'@': 271}), 17: (1, {'@': 271}), 99: (1, {'@': 271}), 65: (1, {'@': 271}), 66: (1, {'@': 271}), 67: (1, {'@': 271}), 68: (1, {'@': 271}), 69: (1, {'@': 271}), 95: (1, {'@': 271}), 70: (1, {'@': 271}), 71: (1, {'@': 271}), 96: (1, {'@': 271}), 25: (1, {'@': 271}), 72: (1, {'@': 271}), 73: (1, {'@': 271}), 26: (1, {'@': 271}), 27: (1, {'@': 271}), 1: (1, {'@': 271}), 28: (1, {'@': 271}), 30: (1, {'@': 271}), 74: (1, {'@': 271}), 75: (1, {'@': 271}), 76: (1, {'@': 271}), 101: (1, {'@': 271}), 77: (1, {'@': 271}), 78: (1, {'@': 271}), 79: (1, {'@': 271}), 80: (1, {'@': 271}), 81: (1, {'@': 271}), 4: (1, {'@': 271}), 5: (1, {'@': 271}), 82: (1, {'@': 271}), 6: (1, {'@': 271}), 83: (1, {'@': 271}), 7: (1, {'@': 271}), 102: (1, {'@': 271}), 84: (1, {'@': 271}), 10: (1, {'@': 271}), 103: (1, {'@': 271}), 97: (1, {'@': 271}), 14: (1, {'@': 271}), 85: (1, {'@': 271}), 18: (1, {'@': 271}), 19: (1, {'@': 271}), 86: (1, {'@': 271}), 20: (1, {'@': 271}), 104: (1, {'@': 271}), 21: (1, {'@': 271}), 87: (1, {'@': 271}), 22: (1, {'@': 271}), 23: (1, {'@': 271}), 24: (1, {'@': 271}), 51: (1, {'@': 271}), 88: (1, {'@': 271}), 98: (1, {'@': 271}), 89: (1, {'@': 271}), 90: (1, {'@': 271}), 91: (1, {'@': 271}), 92: (1, {'@': 271}), 29: (1, {'@': 271}), 0: (1, {'@': 271}), 31: (1, {'@': 271}), 93: (1, {'@': 271}), 100: (1, {'@': 271})}, 45: {88: (1, {'@': 356}), 24: (1, {'@': 356})}, 46: {2: (1, {'@': 449}), 3: (1, {'@': 449}), 4: (1, {'@': 449}), 5: (1, {'@': 449}), 6: (1, {'@': 449}), 7: (1, {'@': 449}), 8: (1, {'@': 449}), 9: (1, {'@': 449}), 10: (1, {'@': 449}), 11: (1, {'@': 449}), 12: (1, {'@': 449}), 13: (1, {'@': 449}), 14: (1, {'@': 449}), 15: (1, {'@': 449}), 16: (1, {'@': 449}), 17: (1, {'@': 449}), 18: (1, {'@': 449}), 19: (1, {'@': 449}), 20: (1, {'@': 449}), 21: (1, {'@': 449}), 22: (1, {'@': 449}), 23: (1, {'@': 449}), 24: (1, {'@': 449}), 25: (1, {'@': 449}), 26: (1, {'@': 449}), 27: (1, {'@': 449}), 28: (1, {'@': 449}), 29: (1, {'@': 449}), 30: (1, {'@': 449}), 0: (1, {'@': 449}), 31: (1, {'@': 449})}, 47: {79: (0, 218), 117: (0, 454), 1: (0, 268)}, 48: {16: (1, {'@': 305}), 17: (1, {'@': 305}), 18: (1, {'@': 305}), 2: (1, {'@': 305}), 19: (1, {'@': 305}), 3: (1, {'@': 305}), 4: (1, {'@': 305}), 20: (1, {'@': 305}), 21: (1, {'@': 305}), 22: (1, {'@': 305}), 5: (1, {'@': 305}), 23: (1, {'@': 305}), 24: (1, {'@': 305}), 6: (1, {'@': 305}), 25: (1, {'@': 305}), 7: (1, {'@': 305}), 8: (1, {'@': 305}), 9: (1, {'@': 305}), 26: (1, {'@': 305}), 27: (1, {'@': 305}), 10: (1, {'@': 305}), 11: (1, {'@': 305}), 28: (1, {'@': 305}), 29: (1, {'@': 305}), 30: (1, {'@': 305}), 12: (1, {'@': 305}), 0: (1, {'@': 305}), 13: (1, {'@': 305}), 31: (1, {'@': 305}), 14: (1, {'@': 305}), 15: (1, {'@': 305})}, 49: {2: (1, {'@': 447}), 3: (1, {'@': 447}), 4: (1, {'@': 447}), 5: (1, {'@': 447}), 6: (1, {'@': 447}), 7: (1, {'@': 447}), 8: (1, {'@': 447}), 9: (1, {'@': 447}), 10: (1, {'@': 447}), 11: (1, {'@': 447}), 12: (1, {'@': 447}), 13: (1, {'@': 447}), 14: (1, {'@': 447}), 15: (1, {'@': 447}), 16: (1, {'@': 447}), 17: (1, {'@': 447}), 18: (1, {'@': 447}), 19: (1, {'@': 447}), 20: (1, {'@': 447}), 21: (1, {'@': 447}), 22: (1, {'@': 447}), 23: (1, {'@': 447}), 24: (1, {'@': 447}), 25: (1, {'@': 447}), 26: (1, {'@': 447}), 27: (1, {'@': 447}), 28: (1, {'@': 447}), 29: (1, {'@': 447}), 30: (1, {'@': 447}), 0: (1, {'@': 447}), 31: (1, {'@': 447})}, 50: {16: (1, {'@': 312}), 17: (1, {'@': 312}), 18: (1, {'@': 312}), 2: (1, {'@': 312}), 19: (1, {'@': 312}), 3: (1, {'@': 312}), 4: (1, {'@': 312}), 20: (1, {'@': 312}), 21: (1, {'@': 312}), 22: (1, {'@': 312}), 5: (1, {'@': 312}), 23: (1, {'@': 312}), 24: (1, {'@': 312}), 6: (1, {'@': 312}), 25: (1, {'@': 312}), 7: (1, {'@': 312}), 8: (1, {'@': 312}), 9: (1, {'@': 312}), 26: (1, {'@': 312}), 27: (1, {'@': 312}), 10: (1, {'@': 312}), 11: (1, {'@': 312}), 28: (1, {'@': 312}), 29: (1, {'@': 312}), 30: (1, {'@': 312}), 12: (1, {'@': 312}), 0: (1, {'@': 312}), 13: (1, {'@': 312}), 31: (1, {'@': 312}), 14: (1, {'@': 312}), 15: (1, {'@': 312})}, 51: {2: (1, {'@': 444}), 3: (1, {'@': 444}), 4: (1, {'@': 444}), 5: (1, {'@': 444}), 6: (1, {'@': 444}), 7: (1, {'@': 444}), 8: (1, {'@': 444}), 9: (1, {'@': 444}), 10: (1, {'@': 444}), 11: (1, {'@': 444}), 12: (1, {'@': 444}), 13: (1, {'@': 444}), 14: (1, {'@': 444}), 15: (1, {'@': 444}), 16: (1, {'@': 444}), 17: (1, {'@': 444}), 18: (1, {'@': 444}), 19: (1, {'@': 444}), 20: (1, {'@': 444}), 21: (1, {'@': 444}), 22: (1, {'@': 444}), 23: (1, {'@': 444}), 24: (1, {'@': 444}), 25: (1, {'@': 444}), 26: (1, {'@': 444}), 27: (1, {'@': 444}), 28: (1, {'@': 444}), 29: (1, {'@': 444}), 30: (1, {'@': 444}), 0: (1, {'@': 444}), 31: (1, {'@': 444})}, 52: {1: (0, 74)}, 53: {2: (1, {'@': 446}), 3: (1, {'@': 446}), 4: (1, {'@': 446}), 5: (1, {'@': 446}), 6: (1, {'@': 446}), 7: (1, {'@': 446}), 8: (1, {'@': 446}), 9: (1, {'@': 446}), 10: (1, {'@': 446}), 11: (1, {'@': 446}), 12: (1, {'@': 446}), 13: (1, {'@': 446}), 14: (1, {'@': 446}), 15: (1, {'@': 446}), 16: (1, {'@': 446}), 17: (1, {'@': 446}), 18: (1, {'@': 446}), 19: (1, {'@': 446}), 20: (1, {'@': 446}), 21: (1, {'@': 446}), 22: (1, {'@': 446}), 23: (1, {'@': 446}), 24: (1, {'@': 446}), 25: (1, {'@': 446}), 26: (1, {'@': 446}), 27: (1, {'@': 446}), 28: (1, {'@': 446}), 29: (1, {'@': 446}), 30: (1, {'@': 446}), 0: (1, {'@': 446}), 31: (1, {'@': 446})}, 54: {77: (1, {'@': 378}), 60: (1, {'@': 378}), 53: (1, {'@': 378}), 54: (1, {'@': 378}), 80: (1, {'@': 378}), 93: (1, {'@': 378}), 81: (1, {'@': 378}), 88: (1, {'@': 378}), 4: (1, {'@': 378}), 86: (1, {'@': 378}), 74: (1, {'@': 378}), 63: (1, {'@': 378}), 71: (1, {'@': 378}), 14: (1, {'@': 378}), 7: (1, {'@': 378}), 58: (1, {'@': 378}), 73: (1, {'@': 378}), 89: (1, {'@': 378})}, 55: {118: (0, 104), 1: (0, 232), 76: (0, 337), 72: (0, 312), 119: (0, 361), 65: (0, 148), 55: (0, 136), 67: (0, 248), 61: (0, 280), 78: (1, {'@': 228}), 79: (1, {'@': 228})}, 56: {16: (1, {'@': 304}), 17: (1, {'@': 304}), 18: (1, {'@': 304}), 2: (1, {'@': 304}), 19: (1, {'@': 304}), 3: (1, {'@': 304}), 4: (1, {'@': 304}), 20: (1, {'@': 304}), 21: (1, {'@': 304}), 22: (1, {'@': 304}), 5: (1, {'@': 304}), 23: (1, {'@': 304}), 24: (1, {'@': 304}), 6: (1, {'@': 304}), 25: (1, {'@': 304}), 7: (1, {'@': 304}), 8: (1, {'@': 304}), 9: (1, {'@': 304}), 26: (1, {'@': 304}), 27: (1, {'@': 304}), 10: (1, {'@': 304}), 11: (1, {'@': 304}), 28: (1, {'@': 304}), 29: (1, {'@': 304}), 30: (1, {'@': 304}), 12: (1, {'@': 304}), 0: (1, {'@': 304}), 13: (1, {'@': 304}), 31: (1, {'@': 304}), 14: (1, {'@': 304}), 15: (1, {'@': 304})}, 57: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102), 109: (0, 162)}, 58: {16: (1, {'@': 313}), 17: (1, {'@': 313}), 18: (1, {'@': 313}), 2: (1, {'@': 313}), 19: (1, {'@': 313}), 3: (1, {'@': 313}), 4: (1, {'@': 313}), 20: (1, {'@': 313}), 21: (1, {'@': 313}), 22: (1, {'@': 313}), 5: (1, {'@': 313}), 23: (1, {'@': 313}), 24: (1, {'@': 313}), 6: (1, {'@': 313}), 25: (1, {'@': 313}), 7: (1, {'@': 313}), 8: (1, {'@': 313}), 9: (1, {'@': 313}), 26: (1, {'@': 313}), 27: (1, {'@': 313}), 10: (1, {'@': 313}), 11: (1, {'@': 313}), 28: (1, {'@': 313}), 29: (1, {'@': 313}), 30: (1, {'@': 313}), 12: (1, {'@': 313}), 0: (1, {'@': 313}), 13: (1, {'@': 313}), 31: (1, {'@': 313}), 14: (1, {'@': 313}), 15: (1, {'@': 313})}, 59: {56: (1, {'@': 351}), 54: (1, {'@': 351}), 2: (1, {'@': 351}), 3: (1, {'@': 351}), 57: (1, {'@': 351}), 58: (1, {'@': 351}), 59: (1, {'@': 351}), 8: (1, {'@': 351}), 60: (1, {'@': 351}), 9: (1, {'@': 351}), 12: (1, {'@': 351}), 13: (1, {'@': 351}), 94: (1, {'@': 351}), 64: (1, {'@': 351}), 65: (1, {'@': 351}), 67: (1, {'@': 351}), 95: (1, {'@': 351}), 70: (1, {'@': 351}), 96: (1, {'@': 351}), 25: (1, {'@': 351}), 72: (1, {'@': 351}), 73: (1, {'@': 351}), 1: (1, {'@': 351}), 28: (1, {'@': 351}), 30: (1, {'@': 351}), 76: (1, {'@': 351}), 78: (1, {'@': 351}), 79: (1, {'@': 351}), 4: (1, {'@': 351}), 5: (1, {'@': 351}), 7: (1, {'@': 351}), 84: (1, {'@': 351}), 97: (1, {'@': 351}), 86: (1, {'@': 351}), 20: (1, {'@': 351}), 87: (1, {'@': 351}), 23: (1, {'@': 351}), 88: (1, {'@': 351}), 98: (1, {'@': 351}), 89: (1, {'@': 351}), 91: (1, {'@': 351}), 29: (1, {'@': 351}), 0: (1, {'@': 351}), 31: (1, {'@': 351}), 53: (1, {'@': 351}), 55: (1, {'@': 351}), 120: (1, {'@': 351}), 11: (1, {'@': 351}), 61: (1, {'@': 351}), 62: (1, {'@': 351}), 63: (1, {'@': 351}), 15: (1, {'@': 351}), 16: (1, {'@': 351}), 17: (1, {'@': 351}), 99: (1, {'@': 351}), 66: (1, {'@': 351}), 68: (1, {'@': 351}), 100: (1, {'@': 351}), 69: (1, {'@': 351}), 71: (1, {'@': 351}), 26: (1, {'@': 351}), 27: (1, {'@': 351}), 75: (1, {'@': 351}), 74: (1, {'@': 351}), 101: (1, {'@': 351}), 121: (1, {'@': 351}), 77: (1, {'@': 351}), 80: (1, {'@': 351}), 81: (1, {'@': 351}), 82: (1, {'@': 351}), 6: (1, {'@': 351}), 83: (1, {'@': 351}), 102: (1, {'@': 351}), 10: (1, {'@': 351}), 103: (1, {'@': 351}), 108: (1, {'@': 351}), 14: (1, {'@': 351}), 85: (1, {'@': 351}), 18: (1, {'@': 351}), 19: (1, {'@': 351}), 104: (1, {'@': 351}), 21: (1, {'@': 351}), 22: (1, {'@': 351}), 24: (1, {'@': 351}), 51: (1, {'@': 351}), 90: (1, {'@': 351}), 92: (1, {'@': 351}), 93: (1, {'@': 351})}, 60: {0: (0, 283)}, 61: {70: (0, 41), 64: (0, 199), 75: (0, 77), 82: (0, 272), 85: (0, 535), 62: (0, 653), 56: (0, 285), 66: (0, 73), 57: (0, 57), 69: (0, 92), 84: (0, 156), 59: (0, 227), 68: (0, 343), 90: (0, 319), 87: (0, 26), 91: (0, 206), 2: (1, {'@': 451}), 3: (1, {'@': 451}), 4: (1, {'@': 451}), 5: (1, {'@': 451}), 6: (1, {'@': 451}), 7: (1, {'@': 451}), 8: (1, {'@': 451}), 9: (1, {'@': 451}), 10: (1, {'@': 451}), 11: (1, {'@': 451}), 12: (1, {'@': 451}), 13: (1, {'@': 451}), 14: (1, {'@': 451}), 15: (1, {'@': 451}), 16: (1, {'@': 451}), 17: (1, {'@': 451}), 18: (1, {'@': 451}), 19: (1, {'@': 451}), 20: (1, {'@': 451}), 21: (1, {'@': 451}), 22: (1, {'@': 451}), 23: (1, {'@': 451}), 24: (1, {'@': 451}), 25: (1, {'@': 451}), 26: (1, {'@': 451}), 27: (1, {'@': 451}), 28: (1, {'@': 451}), 29: (1, {'@': 451}), 30: (1, {'@': 451}), 0: (1, {'@': 451}), 31: (1, {'@': 451})}, 62: {122: (0, 548)}, 63: {2: (1, {'@': 442}), 3: (1, {'@': 442}), 4: (1, {'@': 442}), 5: (1, {'@': 442}), 6: (1, {'@': 442}), 7: (1, {'@': 442}), 8: (1, {'@': 442}), 9: (1, {'@': 442}), 10: (1, {'@': 442}), 11: (1, {'@': 442}), 12: (1, {'@': 442}), 13: (1, {'@': 442}), 14: (1, {'@': 442}), 15: (1, {'@': 442}), 16: (1, {'@': 442}), 17: (1, {'@': 442}), 18: (1, {'@': 442}), 19: (1, {'@': 442}), 20: (1, {'@': 442}), 21: (1, {'@': 442}), 22: (1, {'@': 442}), 23: (1, {'@': 442}), 24: (1, {'@': 442}), 25: (1, {'@': 442}), 26: (1, {'@': 442}), 27: (1, {'@': 442}), 28: (1, {'@': 442}), 29: (1, {'@': 442}), 30: (1, {'@': 442}), 0: (1, {'@': 442}), 31: (1, {'@': 442})}, 64: {0: (0, 266)}, 65: {123: (0, 214), 74: (0, 106), 73: (0, 140), 89: (0, 72), 58: (0, 114), 124: (0, 194), 125: (0, 173), 126: (0, 198), 127: (0, 163), 128: (0, 229), 71: (0, 133), 129: (0, 226), 130: (0, 216), 131: (0, 200), 132: (0, 202), 133: (0, 203), 53: (0, 120), 134: (0, 174), 135: (0, 220), 77: (0, 98), 80: (0, 4), 54: (0, 105), 4: (0, 42), 93: (0, 60), 14: (0, 138), 136: (0, 205), 60: (0, 32), 7: (0, 101), 88: (0, 78), 63: (0, 64), 137: (0, 207), 138: (0, 180), 139: (0, 209), 86: (0, 7), 140: (0, 223), 81: (1, {'@': 208})}, 66: {32: (0, 559), 33: (0, 260), 28: (0, 315), 0: (0, 107), 26: (0, 20), 34: (0, 13), 22: (0, 314), 35: (0, 8), 36: (0, 550), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 38: (0, 422), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 45: (0, 6), 46: (0, 188), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 67: {0: (0, 177), 141: (0, 5), 1: (1, {'@': 199}), 24: (1, {'@': 199})}, 68: {122: (0, 492)}, 69: {77: (1, {'@': 142}), 53: (1, {'@': 142}), 54: (1, {'@': 142}), 80: (1, {'@': 142}), 81: (1, {'@': 142}), 86: (1, {'@': 142}), 4: (1, {'@': 142}), 71: (1, {'@': 142}), 88: (1, {'@': 142}), 7: (1, {'@': 142}), 58: (1, {'@': 142}), 73: (1, {'@': 142}), 89: (1, {'@': 142}), 60: (1, {'@': 142}), 74: (1, {'@': 142}), 63: (1, {'@': 142}), 14: (1, {'@': 142}), 93: (1, {'@': 142})}, 70: {95: (0, 115), 1: (0, 402), 104: (0, 193), 111: (0, 610), 101: (0, 149), 21: (1, {'@': 243}), 83: (1, {'@': 243}), 92: (1, {'@': 243}), 55: (1, {'@': 243}), 65: (1, {'@': 243}), 67: (1, {'@': 243}), 61: (1, {'@': 243}), 76: (1, {'@': 243}), 72: (1, {'@': 243}), 78: (1, {'@': 243}), 79: (1, {'@': 243})}, 71: {23: (1, {'@': 107}), 108: (1, {'@': 107}), 51: (1, {'@': 107}), 1: (1, {'@': 107}), 77: (1, {'@': 107}), 53: (1, {'@': 107}), 54: (1, {'@': 107}), 80: (1, {'@': 107}), 81: (1, {'@': 107}), 86: (1, {'@': 107}), 4: (1, {'@': 107}), 71: (1, {'@': 107}), 88: (1, {'@': 107}), 7: (1, {'@': 107}), 58: (1, {'@': 107}), 73: (1, {'@': 107}), 89: (1, {'@': 107}), 60: (1, {'@': 107}), 74: (1, {'@': 107}), 63: (1, {'@': 107}), 14: (1, {'@': 107}), 93: (1, {'@': 107}), 24: (1, {'@': 107}), 122: (1, {'@': 107}), 5: (1, {'@': 107}), 29: (1, {'@': 107})}, 72: {0: (0, 225)}, 73: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 109: (0, 192), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 74: {5: (0, 642), 35: (0, 595)}, 75: {53: (1, {'@': 246}), 54: (1, {'@': 246}), 55: (1, {'@': 246}), 56: (1, {'@': 246}), 2: (1, {'@': 246}), 3: (1, {'@': 246}), 57: (1, {'@': 246}), 58: (1, {'@': 246}), 59: (1, {'@': 246}), 8: (1, {'@': 246}), 60: (1, {'@': 246}), 9: (1, {'@': 246}), 11: (1, {'@': 246}), 12: (1, {'@': 246}), 61: (1, {'@': 246}), 13: (1, {'@': 246}), 62: (1, {'@': 246}), 63: (1, {'@': 246}), 15: (1, {'@': 246}), 64: (1, {'@': 246}), 16: (1, {'@': 246}), 17: (1, {'@': 246}), 65: (1, {'@': 246}), 66: (1, {'@': 246}), 67: (1, {'@': 246}), 68: (1, {'@': 246}), 69: (1, {'@': 246}), 70: (1, {'@': 246}), 71: (1, {'@': 246}), 25: (1, {'@': 246}), 72: (1, {'@': 246}), 73: (1, {'@': 246}), 26: (1, {'@': 246}), 27: (1, {'@': 246}), 1: (1, {'@': 246}), 28: (1, {'@': 246}), 30: (1, {'@': 246}), 74: (1, {'@': 246}), 75: (1, {'@': 246}), 76: (1, {'@': 246}), 77: (1, {'@': 246}), 78: (1, {'@': 246}), 79: (1, {'@': 246}), 80: (1, {'@': 246}), 81: (1, {'@': 246}), 4: (1, {'@': 246}), 5: (1, {'@': 246}), 82: (1, {'@': 246}), 6: (1, {'@': 246}), 83: (1, {'@': 246}), 7: (1, {'@': 246}), 84: (1, {'@': 246}), 10: (1, {'@': 246}), 14: (1, {'@': 246}), 85: (1, {'@': 246}), 18: (1, {'@': 246}), 19: (1, {'@': 246}), 86: (1, {'@': 246}), 20: (1, {'@': 246}), 21: (1, {'@': 246}), 87: (1, {'@': 246}), 22: (1, {'@': 246}), 23: (1, {'@': 246}), 24: (1, {'@': 246}), 51: (1, {'@': 246}), 88: (1, {'@': 246}), 89: (1, {'@': 246}), 90: (1, {'@': 246}), 91: (1, {'@': 246}), 92: (1, {'@': 246}), 29: (1, {'@': 246}), 0: (1, {'@': 246}), 31: (1, {'@': 246}), 93: (1, {'@': 246})}, 76: {77: (1, {'@': 365}), 60: (1, {'@': 365}), 53: (1, {'@': 365}), 54: (1, {'@': 365}), 80: (1, {'@': 365}), 93: (1, {'@': 365}), 81: (1, {'@': 365}), 88: (1, {'@': 365}), 4: (1, {'@': 365}), 86: (1, {'@': 365}), 74: (1, {'@': 365}), 63: (1, {'@': 365}), 71: (1, {'@': 365}), 14: (1, {'@': 365}), 7: (1, {'@': 365}), 58: (1, {'@': 365}), 73: (1, {'@': 365}), 89: (1, {'@': 365})}, 77: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 109: (0, 43), 23: (0, 134), 50: (0, 102)}, 78: {0: (0, 277)}, 79: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 109: (0, 152), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 80: {77: (1, {'@': 150}), 53: (1, {'@': 150}), 54: (1, {'@': 150}), 80: (1, {'@': 150}), 81: (1, {'@': 150}), 86: (1, {'@': 150}), 4: (1, {'@': 150}), 71: (1, {'@': 150}), 88: (1, {'@': 150}), 7: (1, {'@': 150}), 58: (1, {'@': 150}), 73: (1, {'@': 150}), 89: (1, {'@': 150}), 60: (1, {'@': 150}), 74: (1, {'@': 150}), 63: (1, {'@': 150}), 14: (1, {'@': 150}), 93: (1, {'@': 150})}, 81: {53: (1, {'@': 282}), 54: (1, {'@': 282}), 55: (1, {'@': 282}), 56: (1, {'@': 282}), 2: (1, {'@': 282}), 3: (1, {'@': 282}), 57: (1, {'@': 282}), 58: (1, {'@': 282}), 59: (1, {'@': 282}), 8: (1, {'@': 282}), 60: (1, {'@': 282}), 9: (1, {'@': 282}), 11: (1, {'@': 282}), 12: (1, {'@': 282}), 61: (1, {'@': 282}), 13: (1, {'@': 282}), 62: (1, {'@': 282}), 63: (1, {'@': 282}), 94: (1, {'@': 282}), 15: (1, {'@': 282}), 64: (1, {'@': 282}), 16: (1, {'@': 282}), 17: (1, {'@': 282}), 99: (1, {'@': 282}), 65: (1, {'@': 282}), 66: (1, {'@': 282}), 67: (1, {'@': 282}), 68: (1, {'@': 282}), 69: (1, {'@': 282}), 95: (1, {'@': 282}), 70: (1, {'@': 282}), 71: (1, {'@': 282}), 96: (1, {'@': 282}), 25: (1, {'@': 282}), 72: (1, {'@': 282}), 73: (1, {'@': 282}), 26: (1, {'@': 282}), 27: (1, {'@': 282}), 1: (1, {'@': 282}), 28: (1, {'@': 282}), 30: (1, {'@': 282}), 74: (1, {'@': 282}), 75: (1, {'@': 282}), 76: (1, {'@': 282}), 101: (1, {'@': 282}), 77: (1, {'@': 282}), 78: (1, {'@': 282}), 79: (1, {'@': 282}), 80: (1, {'@': 282}), 81: (1, {'@': 282}), 4: (1, {'@': 282}), 5: (1, {'@': 282}), 82: (1, {'@': 282}), 6: (1, {'@': 282}), 83: (1, {'@': 282}), 7: (1, {'@': 282}), 102: (1, {'@': 282}), 84: (1, {'@': 282}), 10: (1, {'@': 282}), 103: (1, {'@': 282}), 97: (1, {'@': 282}), 14: (1, {'@': 282}), 85: (1, {'@': 282}), 18: (1, {'@': 282}), 19: (1, {'@': 282}), 86: (1, {'@': 282}), 20: (1, {'@': 282}), 104: (1, {'@': 282}), 21: (1, {'@': 282}), 87: (1, {'@': 282}), 22: (1, {'@': 282}), 23: (1, {'@': 282}), 24: (1, {'@': 282}), 51: (1, {'@': 282}), 88: (1, {'@': 282}), 98: (1, {'@': 282}), 89: (1, {'@': 282}), 90: (1, {'@': 282}), 91: (1, {'@': 282}), 92: (1, {'@': 282}), 29: (1, {'@': 282}), 0: (1, {'@': 282}), 31: (1, {'@': 282}), 93: (1, {'@': 282}), 100: (1, {'@': 282})}, 82: {77: (1, {'@': 380}), 60: (1, {'@': 380}), 53: (1, {'@': 380}), 54: (1, {'@': 380}), 80: (1, {'@': 380}), 93: (1, {'@': 380}), 81: (1, {'@': 380}), 88: (1, {'@': 380}), 4: (1, {'@': 380}), 86: (1, {'@': 380}), 74: (1, {'@': 380}), 63: (1, {'@': 380}), 71: (1, {'@': 380}), 14: (1, {'@': 380}), 7: (1, {'@': 380}), 58: (1, {'@': 380}), 73: (1, {'@': 380}), 89: (1, {'@': 380})}, 83: {77: (1, {'@': 165}), 53: (1, {'@': 165}), 54: (1, {'@': 165}), 80: (1, {'@': 165}), 81: (1, {'@': 165}), 86: (1, {'@': 165}), 4: (1, {'@': 165}), 71: (1, {'@': 165}), 88: (1, {'@': 165}), 7: (1, {'@': 165}), 58: (1, {'@': 165}), 73: (1, {'@': 165}), 89: (1, {'@': 165}), 60: (1, {'@': 165}), 74: (1, {'@': 165}), 63: (1, {'@': 165}), 14: (1, {'@': 165}), 93: (1, {'@': 165})}, 84: {77: (1, {'@': 152}), 53: (1, {'@': 152}), 54: (1, {'@': 152}), 80: (1, {'@': 152}), 81: (1, {'@': 152}), 4: (1, {'@': 152}), 5: (1, {'@': 152}), 7: (1, {'@': 152}), 58: (1, {'@': 152}), 60: (1, {'@': 152}), 63: (1, {'@': 152}), 108: (1, {'@': 152}), 14: (1, {'@': 152}), 86: (1, {'@': 152}), 23: (1, {'@': 152}), 24: (1, {'@': 152}), 51: (1, {'@': 152}), 71: (1, {'@': 152}), 88: (1, {'@': 152}), 73: (1, {'@': 152}), 89: (1, {'@': 152}), 1: (1, {'@': 152}), 29: (1, {'@': 152}), 74: (1, {'@': 152}), 93: (1, {'@': 152})}, 85: {1: (0, 87)}, 86: {51: (0, 432), 1: (1, {'@': 100})}, 87: {122: (0, 475), 142: (0, 224), 5: (1, {'@': 144}), 77: (1, {'@': 144}), 53: (1, {'@': 144}), 54: (1, {'@': 144}), 80: (1, {'@': 144}), 81: (1, {'@': 144}), 86: (1, {'@': 144}), 4: (1, {'@': 144}), 71: (1, {'@': 144}), 88: (1, {'@': 144}), 7: (1, {'@': 144}), 58: (1, {'@': 144}), 73: (1, {'@': 144}), 89: (1, {'@': 144}), 60: (1, {'@': 144}), 74: (1, {'@': 144}), 63: (1, {'@': 144}), 14: (1, {'@': 144}), 93: (1, {'@': 144}), 23: (1, {'@': 144}), 108: (1, {'@': 144}), 24: (1, {'@': 144}), 51: (1, {'@': 144}), 1: (1, {'@': 144}), 29: (1, {'@': 144})}, 88: {77: (1, {'@': 133}), 53: (1, {'@': 133}), 54: (1, {'@': 133}), 80: (1, {'@': 133}), 81: (1, {'@': 133}), 86: (1, {'@': 133}), 4: (1, {'@': 133}), 71: (1, {'@': 133}), 88: (1, {'@': 133}), 7: (1, {'@': 133}), 58: (1, {'@': 133}), 73: (1, {'@': 133}), 89: (1, {'@': 133}), 60: (1, {'@': 133}), 74: (1, {'@': 133}), 63: (1, {'@': 133}), 14: (1, {'@': 133}), 93: (1, {'@': 133})}, 89: {1: (0, 629)}, 90: {77: (1, {'@': 368}), 60: (1, {'@': 368}), 53: (1, {'@': 368}), 54: (1, {'@': 368}), 80: (1, {'@': 368}), 93: (1, {'@': 368}), 81: (1, {'@': 368}), 88: (1, {'@': 368}), 4: (1, {'@': 368}), 86: (1, {'@': 368}), 74: (1, {'@': 368}), 63: (1, {'@': 368}), 71: (1, {'@': 368}), 14: (1, {'@': 368}), 7: (1, {'@': 368}), 58: (1, {'@': 368}), 73: (1, {'@': 368}), 89: (1, {'@': 368})}, 91: {98: (0, 541), 143: (0, 167), 97: (0, 195), 94: (0, 239), 99: (0, 276), 23: (0, 125), 144: (0, 137), 145: (0, 189), 102: (0, 129), 53: (1, {'@': 252}), 54: (1, {'@': 252}), 55: (1, {'@': 252}), 56: (1, {'@': 252}), 2: (1, {'@': 252}), 3: (1, {'@': 252}), 57: (1, {'@': 252}), 58: (1, {'@': 252}), 59: (1, {'@': 252}), 8: (1, {'@': 252}), 60: (1, {'@': 252}), 9: (1, {'@': 252}), 11: (1, {'@': 252}), 12: (1, {'@': 252}), 61: (1, {'@': 252}), 13: (1, {'@': 252}), 62: (1, {'@': 252}), 63: (1, {'@': 252}), 15: (1, {'@': 252}), 64: (1, {'@': 252}), 16: (1, {'@': 252}), 17: (1, {'@': 252}), 65: (1, {'@': 252}), 66: (1, {'@': 252}), 67: (1, {'@': 252}), 68: (1, {'@': 252}), 69: (1, {'@': 252}), 95: (1, {'@': 252}), 70: (1, {'@': 252}), 71: (1, {'@': 252}), 25: (1, {'@': 252}), 72: (1, {'@': 252}), 73: (1, {'@': 252}), 26: (1, {'@': 252}), 27: (1, {'@': 252}), 1: (1, {'@': 252}), 28: (1, {'@': 252}), 30: (1, {'@': 252}), 74: (1, {'@': 252}), 75: (1, {'@': 252}), 76: (1, {'@': 252}), 101: (1, {'@': 252}), 77: (1, {'@': 252}), 78: (1, {'@': 252}), 79: (1, {'@': 252}), 80: (1, {'@': 252}), 81: (1, {'@': 252}), 4: (1, {'@': 252}), 5: (1, {'@': 252}), 82: (1, {'@': 252}), 6: (1, {'@': 252}), 83: (1, {'@': 252}), 7: (1, {'@': 252}), 84: (1, {'@': 252}), 10: (1, {'@': 252}), 14: (1, {'@': 252}), 85: (1, {'@': 252}), 18: (1, {'@': 252}), 19: (1, {'@': 252}), 86: (1, {'@': 252}), 20: (1, {'@': 252}), 104: (1, {'@': 252}), 21: (1, {'@': 252}), 87: (1, {'@': 252}), 22: (1, {'@': 252}), 24: (1, {'@': 252}), 51: (1, {'@': 252}), 88: (1, {'@': 252}), 89: (1, {'@': 252}), 90: (1, {'@': 252}), 91: (1, {'@': 252}), 92: (1, {'@': 252}), 29: (1, {'@': 252}), 0: (1, {'@': 252}), 31: (1, {'@': 252}), 93: (1, {'@': 252})}, 92: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102), 109: (0, 215)}, 93: {16: (1, {'@': 319}), 17: (1, {'@': 319}), 18: (1, {'@': 319}), 2: (1, {'@': 319}), 19: (1, {'@': 319}), 3: (1, {'@': 319}), 4: (1, {'@': 319}), 20: (1, {'@': 319}), 21: (1, {'@': 319}), 22: (1, {'@': 319}), 5: (1, {'@': 319}), 23: (1, {'@': 319}), 24: (1, {'@': 319}), 6: (1, {'@': 319}), 25: (1, {'@': 319}), 7: (1, {'@': 319}), 8: (1, {'@': 319}), 9: (1, {'@': 319}), 26: (1, {'@': 319}), 27: (1, {'@': 319}), 10: (1, {'@': 319}), 11: (1, {'@': 319}), 28: (1, {'@': 319}), 29: (1, {'@': 319}), 30: (1, {'@': 319}), 12: (1, {'@': 319}), 0: (1, {'@': 319}), 13: (1, {'@': 319}), 31: (1, {'@': 319}), 14: (1, {'@': 319}), 15: (1, {'@': 319})}, 94: {1: (0, 494), 96: (0, 295), 102: (1, {'@': 259}), 23: (1, {'@': 259}), 94: (1, {'@': 259}), 99: (1, {'@': 259}), 98: (1, {'@': 259}), 97: (1, {'@': 259}), 83: (1, {'@': 259}), 92: (1, {'@': 259}), 3: (1, {'@': 259}), 20: (1, {'@': 259}), 104: (1, {'@': 259}), 21: (1, {'@': 259}), 95: (1, {'@': 259}), 101: (1, {'@': 259}), 55: (1, {'@': 259}), 65: (1, {'@': 259}), 67: (1, {'@': 259}), 76: (1, {'@': 259}), 72: (1, {'@': 259}), 61: (1, {'@': 259}), 78: (1, {'@': 259}), 79: (1, {'@': 259})}, 95: {3: (1, {'@': 344}), 4: (1, {'@': 344}), 5: (1, {'@': 344}), 6: (1, {'@': 344}), 7: (1, {'@': 344}), 8: (1, {'@': 344}), 9: (1, {'@': 344}), 14: (1, {'@': 344}), 17: (1, {'@': 344}), 18: (1, {'@': 344}), 19: (1, {'@': 344}), 20: (1, {'@': 344}), 21: (1, {'@': 344}), 22: (1, {'@': 344}), 23: (1, {'@': 344}), 26: (1, {'@': 344}), 28: (1, {'@': 344}), 29: (1, {'@': 344}), 30: (1, {'@': 344}), 0: (1, {'@': 344})}, 96: {3: (1, {'@': 337}), 4: (1, {'@': 337}), 5: (1, {'@': 337}), 6: (1, {'@': 337}), 7: (1, {'@': 337}), 8: (1, {'@': 337}), 9: (1, {'@': 337}), 14: (1, {'@': 337}), 17: (1, {'@': 337}), 18: (1, {'@': 337}), 19: (1, {'@': 337}), 20: (1, {'@': 337}), 21: (1, {'@': 337}), 22: (1, {'@': 337}), 23: (1, {'@': 337}), 26: (1, {'@': 337}), 28: (1, {'@': 337}), 29: (1, {'@': 337}), 30: (1, {'@': 337}), 0: (1, {'@': 337})}, 97: {16: (1, {'@': 324}), 17: (1, {'@': 324}), 18: (1, {'@': 324}), 2: (1, {'@': 324}), 19: (1, {'@': 324}), 3: (1, {'@': 324}), 4: (1, {'@': 324}), 20: (1, {'@': 324}), 21: (1, {'@': 324}), 22: (1, {'@': 324}), 5: (1, {'@': 324}), 23: (1, {'@': 324}), 24: (1, {'@': 324}), 6: (1, {'@': 324}), 25: (1, {'@': 324}), 7: (1, {'@': 324}), 8: (1, {'@': 324}), 9: (1, {'@': 324}), 26: (1, {'@': 324}), 27: (1, {'@': 324}), 10: (1, {'@': 324}), 11: (1, {'@': 324}), 28: (1, {'@': 324}), 29: (1, {'@': 324}), 30: (1, {'@': 324}), 12: (1, {'@': 324}), 0: (1, {'@': 324}), 13: (1, {'@': 324}), 31: (1, {'@': 324}), 14: (1, {'@': 324}), 15: (1, {'@': 324})}, 98: {0: (0, 107), 42: (0, 159)}, 99: {29: (0, 62), 122: (0, 301)}, 100: {41: (0, 435), 32: (0, 559), 42: (0, 168), 4: (0, 556), 20: (0, 95), 28: (0, 315), 22: (0, 271), 36: (0, 230), 5: (0, 642), 0: (0, 306), 1: (0, 560), 26: (0, 20), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 141: (0, 582), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 3: (0, 211), 47: (0, 243), 48: (0, 238), 18: (0, 651), 49: (0, 259), 146: (0, 85), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 101: {0: (0, 256)}, 102: {53: (1, {'@': 280}), 54: (1, {'@': 280}), 55: (1, {'@': 280}), 56: (1, {'@': 280}), 2: (1, {'@': 280}), 3: (1, {'@': 280}), 57: (1, {'@': 280}), 58: (1, {'@': 280}), 59: (1, {'@': 280}), 8: (1, {'@': 280}), 60: (1, {'@': 280}), 9: (1, {'@': 280}), 11: (1, {'@': 280}), 12: (1, {'@': 280}), 61: (1, {'@': 280}), 13: (1, {'@': 280}), 62: (1, {'@': 280}), 63: (1, {'@': 280}), 94: (1, {'@': 280}), 15: (1, {'@': 280}), 64: (1, {'@': 280}), 16: (1, {'@': 280}), 17: (1, {'@': 280}), 99: (1, {'@': 280}), 65: (1, {'@': 280}), 66: (1, {'@': 280}), 67: (1, {'@': 280}), 68: (1, {'@': 280}), 69: (1, {'@': 280}), 95: (1, {'@': 280}), 70: (1, {'@': 280}), 71: (1, {'@': 280}), 96: (1, {'@': 280}), 25: (1, {'@': 280}), 72: (1, {'@': 280}), 73: (1, {'@': 280}), 26: (1, {'@': 280}), 27: (1, {'@': 280}), 1: (1, {'@': 280}), 28: (1, {'@': 280}), 30: (1, {'@': 280}), 74: (1, {'@': 280}), 75: (1, {'@': 280}), 76: (1, {'@': 280}), 101: (1, {'@': 280}), 77: (1, {'@': 280}), 78: (1, {'@': 280}), 79: (1, {'@': 280}), 80: (1, {'@': 280}), 81: (1, {'@': 280}), 4: (1, {'@': 280}), 5: (1, {'@': 280}), 82: (1, {'@': 280}), 6: (1, {'@': 280}), 83: (1, {'@': 280}), 7: (1, {'@': 280}), 102: (1, {'@': 280}), 84: (1, {'@': 280}), 10: (1, {'@': 280}), 103: (1, {'@': 280}), 97: (1, {'@': 280}), 14: (1, {'@': 280}), 85: (1, {'@': 280}), 18: (1, {'@': 280}), 19: (1, {'@': 280}), 86: (1, {'@': 280}), 20: (1, {'@': 280}), 104: (1, {'@': 280}), 21: (1, {'@': 280}), 87: (1, {'@': 280}), 22: (1, {'@': 280}), 23: (1, {'@': 280}), 24: (1, {'@': 280}), 51: (1, {'@': 280}), 88: (1, {'@': 280}), 98: (1, {'@': 280}), 89: (1, {'@': 280}), 90: (1, {'@': 280}), 91: (1, {'@': 280}), 92: (1, {'@': 280}), 29: (1, {'@': 280}), 0: (1, {'@': 280}), 31: (1, {'@': 280}), 93: (1, {'@': 280}), 100: (1, {'@': 280})}, 103: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 109: (0, 164), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 6: (0, 570), 21: (0, 631), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 104: {72: (0, 312), 61: (0, 280), 119: (0, 66), 55: (0, 136), 67: (0, 248), 1: (0, 581), 65: (0, 148), 76: (0, 337), 78: (1, {'@': 227}), 79: (1, {'@': 227})}, 105: {0: (0, 288)}, 106: {0: (0, 237)}, 107: {103: (0, 252), 147: (0, 292), 121: (0, 327), 53: (1, {'@': 103}), 54: (1, {'@': 103}), 55: (1, {'@': 103}), 56: (1, {'@': 103}), 2: (1, {'@': 103}), 3: (1, {'@': 103}), 57: (1, {'@': 103}), 58: (1, {'@': 103}), 59: (1, {'@': 103}), 8: (1, {'@': 103}), 60: (1, {'@': 103}), 9: (1, {'@': 103}), 11: (1, {'@': 103}), 12: (1, {'@': 103}), 61: (1, {'@': 103}), 13: (1, {'@': 103}), 62: (1, {'@': 103}), 63: (1, {'@': 103}), 94: (1, {'@': 103}), 15: (1, {'@': 103}), 64: (1, {'@': 103}), 16: (1, {'@': 103}), 17: (1, {'@': 103}), 99: (1, {'@': 103}), 65: (1, {'@': 103}), 66: (1, {'@': 103}), 67: (1, {'@': 103}), 68: (1, {'@': 103}), 69: (1, {'@': 103}), 95: (1, {'@': 103}), 70: (1, {'@': 103}), 71: (1, {'@': 103}), 96: (1, {'@': 103}), 25: (1, {'@': 103}), 72: (1, {'@': 103}), 73: (1, {'@': 103}), 26: (1, {'@': 103}), 27: (1, {'@': 103}), 1: (1, {'@': 103}), 28: (1, {'@': 103}), 30: (1, {'@': 103}), 74: (1, {'@': 103}), 75: (1, {'@': 103}), 76: (1, {'@': 103}), 101: (1, {'@': 103}), 77: (1, {'@': 103}), 78: (1, {'@': 103}), 79: (1, {'@': 103}), 80: (1, {'@': 103}), 81: (1, {'@': 103}), 4: (1, {'@': 103}), 5: (1, {'@': 103}), 82: (1, {'@': 103}), 6: (1, {'@': 103}), 83: (1, {'@': 103}), 7: (1, {'@': 103}), 102: (1, {'@': 103}), 84: (1, {'@': 103}), 10: (1, {'@': 103}), 97: (1, {'@': 103}), 14: (1, {'@': 103}), 85: (1, {'@': 103}), 18: (1, {'@': 103}), 19: (1, {'@': 103}), 86: (1, {'@': 103}), 20: (1, {'@': 103}), 104: (1, {'@': 103}), 21: (1, {'@': 103}), 87: (1, {'@': 103}), 22: (1, {'@': 103}), 23: (1, {'@': 103}), 24: (1, {'@': 103}), 51: (1, {'@': 103}), 88: (1, {'@': 103}), 98: (1, {'@': 103}), 89: (1, {'@': 103}), 90: (1, {'@': 103}), 91: (1, {'@': 103}), 92: (1, {'@': 103}), 29: (1, {'@': 103}), 0: (1, {'@': 103}), 31: (1, {'@': 103}), 93: (1, {'@': 103}), 100: (1, {'@': 103}), 108: (1, {'@': 103}), 120: (1, {'@': 103})}, 108: {2: (1, {'@': 428}), 3: (1, {'@': 428}), 4: (1, {'@': 428}), 5: (1, {'@': 428}), 6: (1, {'@': 428}), 7: (1, {'@': 428}), 8: (1, {'@': 428}), 9: (1, {'@': 428}), 10: (1, {'@': 428}), 11: (1, {'@': 428}), 12: (1, {'@': 428}), 13: (1, {'@': 428}), 14: (1, {'@': 428}), 15: (1, {'@': 428}), 16: (1, {'@': 428}), 17: (1, {'@': 428}), 18: (1, {'@': 428}), 19: (1, {'@': 428}), 20: (1, {'@': 428}), 21: (1, {'@': 428}), 22: (1, {'@': 428}), 23: (1, {'@': 428}), 24: (1, {'@': 428}), 25: (1, {'@': 428}), 26: (1, {'@': 428}), 27: (1, {'@': 428}), 28: (1, {'@': 428}), 29: (1, {'@': 428}), 30: (1, {'@': 428}), 0: (1, {'@': 428}), 31: (1, {'@': 428})}, 109: {3: (1, {'@': 336}), 4: (1, {'@': 336}), 5: (1, {'@': 336}), 6: (1, {'@': 336}), 7: (1, {'@': 336}), 8: (1, {'@': 336}), 9: (1, {'@': 336}), 14: (1, {'@': 336}), 17: (1, {'@': 336}), 18: (1, {'@': 336}), 19: (1, {'@': 336}), 20: (1, {'@': 336}), 21: (1, {'@': 336}), 22: (1, {'@': 336}), 23: (1, {'@': 336}), 26: (1, {'@': 336}), 28: (1, {'@': 336}), 29: (1, {'@': 336}), 30: (1, {'@': 336}), 0: (1, {'@': 336})}, 110: {83: (0, 179), 53: (1, {'@': 235}), 54: (1, {'@': 235}), 55: (1, {'@': 235}), 56: (1, {'@': 235}), 2: (1, {'@': 235}), 3: (1, {'@': 235}), 57: (1, {'@': 235}), 58: (1, {'@': 235}), 59: (1, {'@': 235}), 8: (1, {'@': 235}), 60: (1, {'@': 235}), 9: (1, {'@': 235}), 11: (1, {'@': 235}), 12: (1, {'@': 235}), 61: (1, {'@': 235}), 13: (1, {'@': 235}), 62: (1, {'@': 235}), 63: (1, {'@': 235}), 15: (1, {'@': 235}), 64: (1, {'@': 235}), 16: (1, {'@': 235}), 17: (1, {'@': 235}), 65: (1, {'@': 235}), 66: (1, {'@': 235}), 67: (1, {'@': 235}), 68: (1, {'@': 235}), 69: (1, {'@': 235}), 70: (1, {'@': 235}), 71: (1, {'@': 235}), 25: (1, {'@': 235}), 72: (1, {'@': 235}), 73: (1, {'@': 235}), 26: (1, {'@': 235}), 27: (1, {'@': 235}), 1: (1, {'@': 235}), 28: (1, {'@': 235}), 30: (1, {'@': 235}), 74: (1, {'@': 235}), 75: (1, {'@': 235}), 76: (1, {'@': 235}), 77: (1, {'@': 235}), 78: (1, {'@': 235}), 79: (1, {'@': 235}), 80: (1, {'@': 235}), 81: (1, {'@': 235}), 4: (1, {'@': 235}), 5: (1, {'@': 235}), 82: (1, {'@': 235}), 6: (1, {'@': 235}), 7: (1, {'@': 235}), 84: (1, {'@': 235}), 10: (1, {'@': 235}), 14: (1, {'@': 235}), 85: (1, {'@': 235}), 18: (1, {'@': 235}), 19: (1, {'@': 235}), 86: (1, {'@': 235}), 20: (1, {'@': 235}), 21: (1, {'@': 235}), 87: (1, {'@': 235}), 22: (1, {'@': 235}), 23: (1, {'@': 235}), 24: (1, {'@': 235}), 51: (1, {'@': 235}), 88: (1, {'@': 235}), 89: (1, {'@': 235}), 90: (1, {'@': 235}), 91: (1, {'@': 235}), 92: (1, {'@': 235}), 29: (1, {'@': 235}), 0: (1, {'@': 235}), 31: (1, {'@': 235}), 93: (1, {'@': 235})}, 111: {77: (1, {'@': 364}), 60: (1, {'@': 364}), 53: (1, {'@': 364}), 54: (1, {'@': 364}), 80: (1, {'@': 364}), 93: (1, {'@': 364}), 81: (1, {'@': 364}), 88: (1, {'@': 364}), 4: (1, {'@': 364}), 86: (1, {'@': 364}), 74: (1, {'@': 364}), 63: (1, {'@': 364}), 71: (1, {'@': 364}), 14: (1, {'@': 364}), 7: (1, {'@': 364}), 58: (1, {'@': 364}), 73: (1, {'@': 364}), 89: (1, {'@': 364})}, 112: {2: (1, {'@': 434}), 3: (1, {'@': 434}), 4: (1, {'@': 434}), 5: (1, {'@': 434}), 6: (1, {'@': 434}), 7: (1, {'@': 434}), 8: (1, {'@': 434}), 9: (1, {'@': 434}), 10: (1, {'@': 434}), 11: (1, {'@': 434}), 12: (1, {'@': 434}), 13: (1, {'@': 434}), 14: (1, {'@': 434}), 15: (1, {'@': 434}), 16: (1, {'@': 434}), 17: (1, {'@': 434}), 18: (1, {'@': 434}), 19: (1, {'@': 434}), 20: (1, {'@': 434}), 21: (1, {'@': 434}), 22: (1, {'@': 434}), 23: (1, {'@': 434}), 24: (1, {'@': 434}), 25: (1, {'@': 434}), 26: (1, {'@': 434}), 27: (1, {'@': 434}), 28: (1, {'@': 434}), 29: (1, {'@': 434}), 30: (1, {'@': 434}), 0: (1, {'@': 434}), 31: (1, {'@': 434})}, 113: {77: (1, {'@': 136}), 53: (1, {'@': 136}), 54: (1, {'@': 136}), 80: (1, {'@': 136}), 81: (1, {'@': 136}), 86: (1, {'@': 136}), 4: (1, {'@': 136}), 71: (1, {'@': 136}), 88: (1, {'@': 136}), 7: (1, {'@': 136}), 58: (1, {'@': 136}), 73: (1, {'@': 136}), 89: (1, {'@': 136}), 60: (1, {'@': 136}), 74: (1, {'@': 136}), 63: (1, {'@': 136}), 14: (1, {'@': 136}), 93: (1, {'@': 136})}, 114: {0: (0, 231)}, 115: {3: (1, {'@': 333}), 4: (1, {'@': 333}), 5: (1, {'@': 333}), 6: (1, {'@': 333}), 7: (1, {'@': 333}), 8: (1, {'@': 333}), 9: (1, {'@': 333}), 14: (1, {'@': 333}), 17: (1, {'@': 333}), 18: (1, {'@': 333}), 19: (1, {'@': 333}), 20: (1, {'@': 333}), 21: (1, {'@': 333}), 22: (1, {'@': 333}), 23: (1, {'@': 333}), 26: (1, {'@': 333}), 28: (1, {'@': 333}), 29: (1, {'@': 333}), 30: (1, {'@': 333}), 0: (1, {'@': 333})}, 116: {77: (1, {'@': 372}), 60: (1, {'@': 372}), 53: (1, {'@': 372}), 54: (1, {'@': 372}), 80: (1, {'@': 372}), 93: (1, {'@': 372}), 81: (1, {'@': 372}), 88: (1, {'@': 372}), 4: (1, {'@': 372}), 86: (1, {'@': 372}), 74: (1, {'@': 372}), 63: (1, {'@': 372}), 71: (1, {'@': 372}), 14: (1, {'@': 372}), 7: (1, {'@': 372}), 58: (1, {'@': 372}), 73: (1, {'@': 372}), 89: (1, {'@': 372})}, 117: {32: (0, 559), 33: (0, 260), 28: (0, 315), 0: (0, 107), 26: (0, 20), 34: (0, 13), 22: (0, 321), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 37: (0, 473), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 45: (0, 6), 46: (0, 188), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 118: {122: (1, {'@': 97}), 29: (1, {'@': 97}), 51: (1, {'@': 97}), 1: (1, {'@': 97}), 54: (1, {'@': 97}), 56: (1, {'@': 97}), 2: (1, {'@': 97}), 3: (1, {'@': 97}), 57: (1, {'@': 97}), 58: (1, {'@': 97}), 59: (1, {'@': 97}), 8: (1, {'@': 97}), 60: (1, {'@': 97}), 9: (1, {'@': 97}), 12: (1, {'@': 97}), 13: (1, {'@': 97}), 94: (1, {'@': 97}), 64: (1, {'@': 97}), 65: (1, {'@': 97}), 67: (1, {'@': 97}), 95: (1, {'@': 97}), 70: (1, {'@': 97}), 96: (1, {'@': 97}), 25: (1, {'@': 97}), 72: (1, {'@': 97}), 73: (1, {'@': 97}), 28: (1, {'@': 97}), 30: (1, {'@': 97}), 76: (1, {'@': 97}), 78: (1, {'@': 97}), 79: (1, {'@': 97}), 4: (1, {'@': 97}), 5: (1, {'@': 97}), 7: (1, {'@': 97}), 84: (1, {'@': 97}), 97: (1, {'@': 97}), 86: (1, {'@': 97}), 20: (1, {'@': 97}), 87: (1, {'@': 97}), 23: (1, {'@': 97}), 88: (1, {'@': 97}), 98: (1, {'@': 97}), 89: (1, {'@': 97}), 91: (1, {'@': 97}), 0: (1, {'@': 97}), 31: (1, {'@': 97}), 53: (1, {'@': 97}), 55: (1, {'@': 97}), 11: (1, {'@': 97}), 61: (1, {'@': 97}), 62: (1, {'@': 97}), 63: (1, {'@': 97}), 15: (1, {'@': 97}), 16: (1, {'@': 97}), 17: (1, {'@': 97}), 99: (1, {'@': 97}), 66: (1, {'@': 97}), 68: (1, {'@': 97}), 100: (1, {'@': 97}), 69: (1, {'@': 97}), 71: (1, {'@': 97}), 26: (1, {'@': 97}), 27: (1, {'@': 97}), 74: (1, {'@': 97}), 75: (1, {'@': 97}), 101: (1, {'@': 97}), 77: (1, {'@': 97}), 80: (1, {'@': 97}), 81: (1, {'@': 97}), 82: (1, {'@': 97}), 6: (1, {'@': 97}), 83: (1, {'@': 97}), 102: (1, {'@': 97}), 10: (1, {'@': 97}), 103: (1, {'@': 97}), 14: (1, {'@': 97}), 85: (1, {'@': 97}), 18: (1, {'@': 97}), 19: (1, {'@': 97}), 104: (1, {'@': 97}), 21: (1, {'@': 97}), 22: (1, {'@': 97}), 24: (1, {'@': 97}), 90: (1, {'@': 97}), 92: (1, {'@': 97}), 93: (1, {'@': 97})}, 119: {77: (1, {'@': 158}), 53: (1, {'@': 158}), 54: (1, {'@': 158}), 80: (1, {'@': 158}), 81: (1, {'@': 158}), 4: (1, {'@': 158}), 5: (1, {'@': 158}), 7: (1, {'@': 158}), 58: (1, {'@': 158}), 60: (1, {'@': 158}), 63: (1, {'@': 158}), 108: (1, {'@': 158}), 14: (1, {'@': 158}), 86: (1, {'@': 158}), 23: (1, {'@': 158}), 24: (1, {'@': 158}), 51: (1, {'@': 158}), 71: (1, {'@': 158}), 88: (1, {'@': 158}), 73: (1, {'@': 158}), 89: (1, {'@': 158}), 1: (1, {'@': 158}), 29: (1, {'@': 158}), 74: (1, {'@': 158}), 93: (1, {'@': 158})}, 120: {0: (0, 166)}, 121: {23: (0, 128)}, 122: {77: (1, {'@': 369}), 60: (1, {'@': 369}), 53: (1, {'@': 369}), 54: (1, {'@': 369}), 80: (1, {'@': 369}), 93: (1, {'@': 369}), 81: (1, {'@': 369}), 88: (1, {'@': 369}), 4: (1, {'@': 369}), 86: (1, {'@': 369}), 74: (1, {'@': 369}), 63: (1, {'@': 369}), 71: (1, {'@': 369}), 14: (1, {'@': 369}), 7: (1, {'@': 369}), 58: (1, {'@': 369}), 73: (1, {'@': 369}), 89: (1, {'@': 369})}, 123: {77: (1, {'@': 377}), 60: (1, {'@': 377}), 53: (1, {'@': 377}), 54: (1, {'@': 377}), 80: (1, {'@': 377}), 93: (1, {'@': 377}), 81: (1, {'@': 377}), 88: (1, {'@': 377}), 4: (1, {'@': 377}), 86: (1, {'@': 377}), 74: (1, {'@': 377}), 63: (1, {'@': 377}), 71: (1, {'@': 377}), 14: (1, {'@': 377}), 7: (1, {'@': 377}), 58: (1, {'@': 377}), 73: (1, {'@': 377}), 89: (1, {'@': 377})}, 124: {2: (1, {'@': 450}), 3: (1, {'@': 450}), 4: (1, {'@': 450}), 5: (1, {'@': 450}), 6: (1, {'@': 450}), 7: (1, {'@': 450}), 8: (1, {'@': 450}), 9: (1, {'@': 450}), 10: (1, {'@': 450}), 11: (1, {'@': 450}), 12: (1, {'@': 450}), 13: (1, {'@': 450}), 14: (1, {'@': 450}), 15: (1, {'@': 450}), 16: (1, {'@': 450}), 17: (1, {'@': 450}), 18: (1, {'@': 450}), 19: (1, {'@': 450}), 20: (1, {'@': 450}), 21: (1, {'@': 450}), 22: (1, {'@': 450}), 23: (1, {'@': 450}), 24: (1, {'@': 450}), 25: (1, {'@': 450}), 26: (1, {'@': 450}), 27: (1, {'@': 450}), 28: (1, {'@': 450}), 29: (1, {'@': 450}), 30: (1, {'@': 450}), 0: (1, {'@': 450}), 31: (1, {'@': 450})}, 125: {3: (1, {'@': 338}), 4: (1, {'@': 338}), 5: (1, {'@': 338}), 6: (1, {'@': 338}), 7: (1, {'@': 338}), 8: (1, {'@': 338}), 9: (1, {'@': 338}), 14: (1, {'@': 338}), 17: (1, {'@': 338}), 18: (1, {'@': 338}), 19: (1, {'@': 338}), 20: (1, {'@': 338}), 21: (1, {'@': 338}), 22: (1, {'@': 338}), 23: (1, {'@': 338}), 26: (1, {'@': 338}), 28: (1, {'@': 338}), 29: (1, {'@': 338}), 30: (1, {'@': 338}), 0: (1, {'@': 338})}, 126: {111: (0, 181), 95: (0, 115), 104: (0, 193), 101: (0, 149), 112: (0, 142), 53: (1, {'@': 244}), 54: (1, {'@': 244}), 55: (1, {'@': 244}), 56: (1, {'@': 244}), 2: (1, {'@': 244}), 3: (1, {'@': 244}), 57: (1, {'@': 244}), 58: (1, {'@': 244}), 59: (1, {'@': 244}), 8: (1, {'@': 244}), 60: (1, {'@': 244}), 9: (1, {'@': 244}), 11: (1, {'@': 244}), 12: (1, {'@': 244}), 61: (1, {'@': 244}), 13: (1, {'@': 244}), 62: (1, {'@': 244}), 63: (1, {'@': 244}), 15: (1, {'@': 244}), 64: (1, {'@': 244}), 16: (1, {'@': 244}), 17: (1, {'@': 244}), 65: (1, {'@': 244}), 66: (1, {'@': 244}), 67: (1, {'@': 244}), 68: (1, {'@': 244}), 69: (1, {'@': 244}), 70: (1, {'@': 244}), 71: (1, {'@': 244}), 25: (1, {'@': 244}), 72: (1, {'@': 244}), 73: (1, {'@': 244}), 26: (1, {'@': 244}), 27: (1, {'@': 244}), 1: (1, {'@': 244}), 28: (1, {'@': 244}), 30: (1, {'@': 244}), 74: (1, {'@': 244}), 75: (1, {'@': 244}), 76: (1, {'@': 244}), 77: (1, {'@': 244}), 78: (1, {'@': 244}), 79: (1, {'@': 244}), 80: (1, {'@': 244}), 81: (1, {'@': 244}), 4: (1, {'@': 244}), 5: (1, {'@': 244}), 82: (1, {'@': 244}), 6: (1, {'@': 244}), 83: (1, {'@': 244}), 7: (1, {'@': 244}), 84: (1, {'@': 244}), 10: (1, {'@': 244}), 14: (1, {'@': 244}), 85: (1, {'@': 244}), 18: (1, {'@': 244}), 19: (1, {'@': 244}), 86: (1, {'@': 244}), 20: (1, {'@': 244}), 21: (1, {'@': 244}), 87: (1, {'@': 244}), 22: (1, {'@': 244}), 23: (1, {'@': 244}), 24: (1, {'@': 244}), 51: (1, {'@': 244}), 88: (1, {'@': 244}), 89: (1, {'@': 244}), 90: (1, {'@': 244}), 91: (1, {'@': 244}), 92: (1, {'@': 244}), 29: (1, {'@': 244}), 0: (1, {'@': 244}), 31: (1, {'@': 244}), 93: (1, {'@': 244})}, 127: {8: (0, 219), 0: (0, 107), 42: (0, 175)}, 128: {42: (0, 647), 0: (0, 107), 8: (0, 615)}, 129: {3: (1, {'@': 341}), 4: (1, {'@': 341}), 5: (1, {'@': 341}), 6: (1, {'@': 341}), 7: (1, {'@': 341}), 8: (1, {'@': 341}), 9: (1, {'@': 341}), 14: (1, {'@': 341}), 17: (1, {'@': 341}), 18: (1, {'@': 341}), 19: (1, {'@': 341}), 20: (1, {'@': 341}), 21: (1, {'@': 341}), 22: (1, {'@': 341}), 23: (1, {'@': 341}), 26: (1, {'@': 341}), 28: (1, {'@': 341}), 29: (1, {'@': 341}), 30: (1, {'@': 341}), 0: (1, {'@': 341})}, 130: {16: (1, {'@': 316}), 17: (1, {'@': 316}), 18: (1, {'@': 316}), 2: (1, {'@': 316}), 19: (1, {'@': 316}), 3: (1, {'@': 316}), 4: (1, {'@': 316}), 20: (1, {'@': 316}), 21: (1, {'@': 316}), 22: (1, {'@': 316}), 5: (1, {'@': 316}), 23: (1, {'@': 316}), 24: (1, {'@': 316}), 6: (1, {'@': 316}), 25: (1, {'@': 316}), 7: (1, {'@': 316}), 8: (1, {'@': 316}), 9: (1, {'@': 316}), 26: (1, {'@': 316}), 27: (1, {'@': 316}), 10: (1, {'@': 316}), 11: (1, {'@': 316}), 28: (1, {'@': 316}), 29: (1, {'@': 316}), 30: (1, {'@': 316}), 12: (1, {'@': 316}), 0: (1, {'@': 316}), 13: (1, {'@': 316}), 31: (1, {'@': 316}), 14: (1, {'@': 316}), 15: (1, {'@': 316})}, 131: {77: (1, {'@': 370}), 60: (1, {'@': 370}), 53: (1, {'@': 370}), 54: (1, {'@': 370}), 80: (1, {'@': 370}), 93: (1, {'@': 370}), 81: (1, {'@': 370}), 88: (1, {'@': 370}), 4: (1, {'@': 370}), 86: (1, {'@': 370}), 74: (1, {'@': 370}), 63: (1, {'@': 370}), 71: (1, {'@': 370}), 14: (1, {'@': 370}), 7: (1, {'@': 370}), 58: (1, {'@': 370}), 73: (1, {'@': 370}), 89: (1, {'@': 370})}, 132: {1: (0, 575), 78: (0, 117), 79: (1, {'@': 223})}, 133: {0: (0, 184)}, 134: {32: (0, 559), 42: (0, 168), 4: (0, 556), 22: (0, 442), 36: (0, 145), 28: (0, 315), 5: (0, 642), 0: (0, 107), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 17: (0, 585), 44: (0, 584), 9: (0, 530), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 48: (0, 238), 18: (0, 651), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 135: {32: (0, 559), 33: (0, 260), 28: (0, 315), 0: (0, 107), 26: (0, 20), 34: (0, 13), 40: (0, 467), 35: (0, 8), 22: (0, 512), 36: (0, 550), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 136: {3: (1, {'@': 329}), 4: (1, {'@': 329}), 5: (1, {'@': 329}), 6: (1, {'@': 329}), 7: (1, {'@': 329}), 8: (1, {'@': 329}), 9: (1, {'@': 329}), 14: (1, {'@': 329}), 17: (1, {'@': 329}), 18: (1, {'@': 329}), 19: (1, {'@': 329}), 20: (1, {'@': 329}), 21: (1, {'@': 329}), 22: (1, {'@': 329}), 23: (1, {'@': 329}), 26: (1, {'@': 329}), 28: (1, {'@': 329}), 29: (1, {'@': 329}), 30: (1, {'@': 329}), 0: (1, {'@': 329})}, 137: {53: (1, {'@': 255}), 54: (1, {'@': 255}), 55: (1, {'@': 255}), 56: (1, {'@': 255}), 2: (1, {'@': 255}), 3: (1, {'@': 255}), 57: (1, {'@': 255}), 58: (1, {'@': 255}), 59: (1, {'@': 255}), 8: (1, {'@': 255}), 60: (1, {'@': 255}), 9: (1, {'@': 255}), 11: (1, {'@': 255}), 12: (1, {'@': 255}), 61: (1, {'@': 255}), 13: (1, {'@': 255}), 62: (1, {'@': 255}), 63: (1, {'@': 255}), 94: (1, {'@': 255}), 15: (1, {'@': 255}), 64: (1, {'@': 255}), 16: (1, {'@': 255}), 17: (1, {'@': 255}), 99: (1, {'@': 255}), 65: (1, {'@': 255}), 66: (1, {'@': 255}), 67: (1, {'@': 255}), 68: (1, {'@': 255}), 69: (1, {'@': 255}), 95: (1, {'@': 255}), 70: (1, {'@': 255}), 71: (1, {'@': 255}), 25: (1, {'@': 255}), 72: (1, {'@': 255}), 73: (1, {'@': 255}), 26: (1, {'@': 255}), 27: (1, {'@': 255}), 1: (1, {'@': 255}), 28: (1, {'@': 255}), 30: (1, {'@': 255}), 74: (1, {'@': 255}), 75: (1, {'@': 255}), 76: (1, {'@': 255}), 101: (1, {'@': 255}), 77: (1, {'@': 255}), 78: (1, {'@': 255}), 79: (1, {'@': 255}), 80: (1, {'@': 255}), 81: (1, {'@': 255}), 4: (1, {'@': 255}), 5: (1, {'@': 255}), 82: (1, {'@': 255}), 6: (1, {'@': 255}), 83: (1, {'@': 255}), 7: (1, {'@': 255}), 102: (1, {'@': 255}), 84: (1, {'@': 255}), 10: (1, {'@': 255}), 97: (1, {'@': 255}), 14: (1, {'@': 255}), 85: (1, {'@': 255}), 18: (1, {'@': 255}), 19: (1, {'@': 255}), 86: (1, {'@': 255}), 20: (1, {'@': 255}), 104: (1, {'@': 255}), 21: (1, {'@': 255}), 87: (1, {'@': 255}), 23: (1, {'@': 255}), 22: (1, {'@': 255}), 24: (1, {'@': 255}), 51: (1, {'@': 255}), 88: (1, {'@': 255}), 98: (1, {'@': 255}), 89: (1, {'@': 255}), 90: (1, {'@': 255}), 91: (1, {'@': 255}), 92: (1, {'@': 255}), 29: (1, {'@': 255}), 0: (1, {'@': 255}), 31: (1, {'@': 255}), 93: (1, {'@': 255})}, 138: {0: (0, 182)}, 139: {22: (0, 155)}, 140: {0: (0, 150)}, 141: {2: (1, {'@': 441}), 3: (1, {'@': 441}), 4: (1, {'@': 441}), 5: (1, {'@': 441}), 6: (1, {'@': 441}), 7: (1, {'@': 441}), 8: (1, {'@': 441}), 9: (1, {'@': 441}), 10: (1, {'@': 441}), 11: (1, {'@': 441}), 12: (1, {'@': 441}), 13: (1, {'@': 441}), 14: (1, {'@': 441}), 15: (1, {'@': 441}), 16: (1, {'@': 441}), 17: (1, {'@': 441}), 18: (1, {'@': 441}), 19: (1, {'@': 441}), 20: (1, {'@': 441}), 21: (1, {'@': 441}), 22: (1, {'@': 441}), 23: (1, {'@': 441}), 24: (1, {'@': 441}), 25: (1, {'@': 441}), 26: (1, {'@': 441}), 27: (1, {'@': 441}), 28: (1, {'@': 441}), 29: (1, {'@': 441}), 30: (1, {'@': 441}), 0: (1, {'@': 441}), 31: (1, {'@': 441})}, 142: {95: (0, 115), 104: (0, 193), 111: (0, 610), 101: (0, 149), 53: (1, {'@': 243}), 54: (1, {'@': 243}), 55: (1, {'@': 243}), 56: (1, {'@': 243}), 2: (1, {'@': 243}), 3: (1, {'@': 243}), 57: (1, {'@': 243}), 58: (1, {'@': 243}), 59: (1, {'@': 243}), 8: (1, {'@': 243}), 60: (1, {'@': 243}), 9: (1, {'@': 243}), 11: (1, {'@': 243}), 12: (1, {'@': 243}), 61: (1, {'@': 243}), 13: (1, {'@': 243}), 62: (1, {'@': 243}), 63: (1, {'@': 243}), 15: (1, {'@': 243}), 64: (1, {'@': 243}), 16: (1, {'@': 243}), 17: (1, {'@': 243}), 65: (1, {'@': 243}), 66: (1, {'@': 243}), 67: (1, {'@': 243}), 68: (1, {'@': 243}), 69: (1, {'@': 243}), 70: (1, {'@': 243}), 71: (1, {'@': 243}), 25: (1, {'@': 243}), 72: (1, {'@': 243}), 73: (1, {'@': 243}), 26: (1, {'@': 243}), 27: (1, {'@': 243}), 1: (1, {'@': 243}), 28: (1, {'@': 243}), 30: (1, {'@': 243}), 74: (1, {'@': 243}), 75: (1, {'@': 243}), 76: (1, {'@': 243}), 77: (1, {'@': 243}), 78: (1, {'@': 243}), 79: (1, {'@': 243}), 80: (1, {'@': 243}), 81: (1, {'@': 243}), 4: (1, {'@': 243}), 5: (1, {'@': 243}), 82: (1, {'@': 243}), 6: (1, {'@': 243}), 83: (1, {'@': 243}), 7: (1, {'@': 243}), 84: (1, {'@': 243}), 10: (1, {'@': 243}), 14: (1, {'@': 243}), 85: (1, {'@': 243}), 18: (1, {'@': 243}), 19: (1, {'@': 243}), 86: (1, {'@': 243}), 20: (1, {'@': 243}), 21: (1, {'@': 243}), 87: (1, {'@': 243}), 22: (1, {'@': 243}), 23: (1, {'@': 243}), 24: (1, {'@': 243}), 51: (1, {'@': 243}), 88: (1, {'@': 243}), 89: (1, {'@': 243}), 90: (1, {'@': 243}), 91: (1, {'@': 243}), 92: (1, {'@': 243}), 29: (1, {'@': 243}), 0: (1, {'@': 243}), 31: (1, {'@': 243}), 93: (1, {'@': 243})}, 143: {77: (1, {'@': 371}), 60: (1, {'@': 371}), 53: (1, {'@': 371}), 54: (1, {'@': 371}), 80: (1, {'@': 371}), 93: (1, {'@': 371}), 81: (1, {'@': 371}), 88: (1, {'@': 371}), 4: (1, {'@': 371}), 86: (1, {'@': 371}), 74: (1, {'@': 371}), 63: (1, {'@': 371}), 71: (1, {'@': 371}), 14: (1, {'@': 371}), 7: (1, {'@': 371}), 58: (1, {'@': 371}), 73: (1, {'@': 371}), 89: (1, {'@': 371})}, 144: {2: (1, {'@': 445}), 3: (1, {'@': 445}), 4: (1, {'@': 445}), 5: (1, {'@': 445}), 6: (1, {'@': 445}), 7: (1, {'@': 445}), 8: (1, {'@': 445}), 9: (1, {'@': 445}), 10: (1, {'@': 445}), 11: (1, {'@': 445}), 12: (1, {'@': 445}), 13: (1, {'@': 445}), 14: (1, {'@': 445}), 15: (1, {'@': 445}), 16: (1, {'@': 445}), 17: (1, {'@': 445}), 18: (1, {'@': 445}), 19: (1, {'@': 445}), 20: (1, {'@': 445}), 21: (1, {'@': 445}), 22: (1, {'@': 445}), 23: (1, {'@': 445}), 24: (1, {'@': 445}), 25: (1, {'@': 445}), 26: (1, {'@': 445}), 27: (1, {'@': 445}), 28: (1, {'@': 445}), 29: (1, {'@': 445}), 30: (1, {'@': 445}), 0: (1, {'@': 445}), 31: (1, {'@': 445})}, 145: {22: (0, 346), 103: (0, 666), 6: (0, 561), 53: (1, {'@': 266}), 54: (1, {'@': 266}), 55: (1, {'@': 266}), 56: (1, {'@': 266}), 2: (1, {'@': 266}), 3: (1, {'@': 266}), 57: (1, {'@': 266}), 58: (1, {'@': 266}), 59: (1, {'@': 266}), 8: (1, {'@': 266}), 60: (1, {'@': 266}), 9: (1, {'@': 266}), 11: (1, {'@': 266}), 12: (1, {'@': 266}), 61: (1, {'@': 266}), 13: (1, {'@': 266}), 62: (1, {'@': 266}), 63: (1, {'@': 266}), 94: (1, {'@': 266}), 15: (1, {'@': 266}), 64: (1, {'@': 266}), 16: (1, {'@': 266}), 17: (1, {'@': 266}), 99: (1, {'@': 266}), 65: (1, {'@': 266}), 66: (1, {'@': 266}), 67: (1, {'@': 266}), 68: (1, {'@': 266}), 69: (1, {'@': 266}), 95: (1, {'@': 266}), 70: (1, {'@': 266}), 71: (1, {'@': 266}), 96: (1, {'@': 266}), 25: (1, {'@': 266}), 72: (1, {'@': 266}), 73: (1, {'@': 266}), 26: (1, {'@': 266}), 27: (1, {'@': 266}), 1: (1, {'@': 266}), 28: (1, {'@': 266}), 30: (1, {'@': 266}), 74: (1, {'@': 266}), 75: (1, {'@': 266}), 76: (1, {'@': 266}), 101: (1, {'@': 266}), 77: (1, {'@': 266}), 78: (1, {'@': 266}), 79: (1, {'@': 266}), 80: (1, {'@': 266}), 81: (1, {'@': 266}), 4: (1, {'@': 266}), 5: (1, {'@': 266}), 82: (1, {'@': 266}), 83: (1, {'@': 266}), 7: (1, {'@': 266}), 102: (1, {'@': 266}), 84: (1, {'@': 266}), 10: (1, {'@': 266}), 97: (1, {'@': 266}), 14: (1, {'@': 266}), 85: (1, {'@': 266}), 18: (1, {'@': 266}), 19: (1, {'@': 266}), 86: (1, {'@': 266}), 20: (1, {'@': 266}), 104: (1, {'@': 266}), 21: (1, {'@': 266}), 87: (1, {'@': 266}), 23: (1, {'@': 266}), 24: (1, {'@': 266}), 51: (1, {'@': 266}), 88: (1, {'@': 266}), 98: (1, {'@': 266}), 89: (1, {'@': 266}), 90: (1, {'@': 266}), 91: (1, {'@': 266}), 92: (1, {'@': 266}), 29: (1, {'@': 266}), 0: (1, {'@': 266}), 31: (1, {'@': 266}), 93: (1, {'@': 266}), 100: (1, {'@': 266})}, 146: {77: (1, {'@': 373}), 60: (1, {'@': 373}), 53: (1, {'@': 373}), 54: (1, {'@': 373}), 80: (1, {'@': 373}), 93: (1, {'@': 373}), 81: (1, {'@': 373}), 88: (1, {'@': 373}), 4: (1, {'@': 373}), 86: (1, {'@': 373}), 74: (1, {'@': 373}), 63: (1, {'@': 373}), 71: (1, {'@': 373}), 14: (1, {'@': 373}), 7: (1, {'@': 373}), 58: (1, {'@': 373}), 73: (1, {'@': 373}), 89: (1, {'@': 373})}, 147: {2: (1, {'@': 438}), 3: (1, {'@': 438}), 4: (1, {'@': 438}), 5: (1, {'@': 438}), 6: (1, {'@': 438}), 7: (1, {'@': 438}), 8: (1, {'@': 438}), 9: (1, {'@': 438}), 10: (1, {'@': 438}), 11: (1, {'@': 438}), 12: (1, {'@': 438}), 13: (1, {'@': 438}), 14: (1, {'@': 438}), 15: (1, {'@': 438}), 16: (1, {'@': 438}), 17: (1, {'@': 438}), 18: (1, {'@': 438}), 19: (1, {'@': 438}), 20: (1, {'@': 438}), 21: (1, {'@': 438}), 22: (1, {'@': 438}), 23: (1, {'@': 438}), 24: (1, {'@': 438}), 25: (1, {'@': 438}), 26: (1, {'@': 438}), 27: (1, {'@': 438}), 28: (1, {'@': 438}), 29: (1, {'@': 438}), 30: (1, {'@': 438}), 0: (1, {'@': 438}), 31: (1, {'@': 438})}, 148: {3: (1, {'@': 327}), 4: (1, {'@': 327}), 5: (1, {'@': 327}), 6: (1, {'@': 327}), 7: (1, {'@': 327}), 8: (1, {'@': 327}), 9: (1, {'@': 327}), 14: (1, {'@': 327}), 17: (1, {'@': 327}), 18: (1, {'@': 327}), 19: (1, {'@': 327}), 20: (1, {'@': 327}), 21: (1, {'@': 327}), 22: (1, {'@': 327}), 23: (1, {'@': 327}), 26: (1, {'@': 327}), 28: (1, {'@': 327}), 29: (1, {'@': 327}), 30: (1, {'@': 327}), 0: (1, {'@': 327})}, 149: {3: (1, {'@': 335}), 4: (1, {'@': 335}), 5: (1, {'@': 335}), 6: (1, {'@': 335}), 7: (1, {'@': 335}), 8: (1, {'@': 335}), 9: (1, {'@': 335}), 14: (1, {'@': 335}), 17: (1, {'@': 335}), 18: (1, {'@': 335}), 19: (1, {'@': 335}), 20: (1, {'@': 335}), 21: (1, {'@': 335}), 22: (1, {'@': 335}), 23: (1, {'@': 335}), 26: (1, {'@': 335}), 28: (1, {'@': 335}), 29: (1, {'@': 335}), 30: (1, {'@': 335}), 0: (1, {'@': 335})}, 150: {6: (0, 262), 148: (0, 542)}, 151: {16: (1, {'@': 322}), 17: (1, {'@': 322}), 18: (1, {'@': 322}), 2: (1, {'@': 322}), 19: (1, {'@': 322}), 3: (1, {'@': 322}), 4: (1, {'@': 322}), 20: (1, {'@': 322}), 21: (1, {'@': 322}), 22: (1, {'@': 322}), 5: (1, {'@': 322}), 23: (1, {'@': 322}), 24: (1, {'@': 322}), 6: (1, {'@': 322}), 25: (1, {'@': 322}), 7: (1, {'@': 322}), 8: (1, {'@': 322}), 9: (1, {'@': 322}), 26: (1, {'@': 322}), 27: (1, {'@': 322}), 10: (1, {'@': 322}), 11: (1, {'@': 322}), 28: (1, {'@': 322}), 29: (1, {'@': 322}), 30: (1, {'@': 322}), 12: (1, {'@': 322}), 0: (1, {'@': 322}), 13: (1, {'@': 322}), 31: (1, {'@': 322}), 14: (1, {'@': 322}), 15: (1, {'@': 322})}, 152: {16: (1, {'@': 308}), 17: (1, {'@': 308}), 18: (1, {'@': 308}), 2: (1, {'@': 308}), 19: (1, {'@': 308}), 3: (1, {'@': 308}), 4: (1, {'@': 308}), 20: (1, {'@': 308}), 21: (1, {'@': 308}), 22: (1, {'@': 308}), 5: (1, {'@': 308}), 23: (1, {'@': 308}), 24: (1, {'@': 308}), 6: (1, {'@': 308}), 25: (1, {'@': 308}), 7: (1, {'@': 308}), 8: (1, {'@': 308}), 9: (1, {'@': 308}), 26: (1, {'@': 308}), 27: (1, {'@': 308}), 10: (1, {'@': 308}), 11: (1, {'@': 308}), 28: (1, {'@': 308}), 29: (1, {'@': 308}), 30: (1, {'@': 308}), 12: (1, {'@': 308}), 0: (1, {'@': 308}), 13: (1, {'@': 308}), 31: (1, {'@': 308}), 14: (1, {'@': 308}), 15: (1, {'@': 308})}, 153: {78: (0, 3), 1: (0, 212), 149: (0, 132), 79: (1, {'@': 224})}, 154: {77: (1, {'@': 207}), 53: (1, {'@': 207}), 54: (1, {'@': 207}), 80: (1, {'@': 207}), 81: (1, {'@': 207}), 86: (1, {'@': 207}), 4: (1, {'@': 207}), 71: (1, {'@': 207}), 88: (1, {'@': 207}), 7: (1, {'@': 207}), 58: (1, {'@': 207}), 73: (1, {'@': 207}), 89: (1, {'@': 207}), 60: (1, {'@': 207}), 74: (1, {'@': 207}), 63: (1, {'@': 207}), 14: (1, {'@': 207}), 93: (1, {'@': 207})}, 155: {141: (0, 582), 0: (0, 177), 146: (0, 261), 1: (0, 532)}, 156: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 109: (0, 317), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 157: {77: (1, {'@': 154}), 53: (1, {'@': 154}), 54: (1, {'@': 154}), 80: (1, {'@': 154}), 81: (1, {'@': 154}), 4: (1, {'@': 154}), 5: (1, {'@': 154}), 7: (1, {'@': 154}), 58: (1, {'@': 154}), 60: (1, {'@': 154}), 63: (1, {'@': 154}), 108: (1, {'@': 154}), 14: (1, {'@': 154}), 86: (1, {'@': 154}), 23: (1, {'@': 154}), 24: (1, {'@': 154}), 51: (1, {'@': 154}), 71: (1, {'@': 154}), 88: (1, {'@': 154}), 73: (1, {'@': 154}), 89: (1, {'@': 154}), 1: (1, {'@': 154}), 29: (1, {'@': 154}), 74: (1, {'@': 154}), 93: (1, {'@': 154})}, 158: {16: (1, {'@': 296}), 17: (1, {'@': 296}), 18: (1, {'@': 296}), 2: (1, {'@': 296}), 19: (1, {'@': 296}), 3: (1, {'@': 296}), 4: (1, {'@': 296}), 20: (1, {'@': 296}), 21: (1, {'@': 296}), 22: (1, {'@': 296}), 5: (1, {'@': 296}), 23: (1, {'@': 296}), 24: (1, {'@': 296}), 6: (1, {'@': 296}), 25: (1, {'@': 296}), 7: (1, {'@': 296}), 8: (1, {'@': 296}), 9: (1, {'@': 296}), 26: (1, {'@': 296}), 27: (1, {'@': 296}), 10: (1, {'@': 296}), 11: (1, {'@': 296}), 28: (1, {'@': 296}), 29: (1, {'@': 296}), 30: (1, {'@': 296}), 12: (1, {'@': 296}), 0: (1, {'@': 296}), 13: (1, {'@': 296}), 31: (1, {'@': 296}), 14: (1, {'@': 296}), 15: (1, {'@': 296})}, 159: {22: (0, 456), 5: (0, 441)}, 160: {2: (1, {'@': 325}), 3: (1, {'@': 325}), 4: (1, {'@': 325}), 5: (1, {'@': 325}), 6: (1, {'@': 325}), 7: (1, {'@': 325}), 8: (1, {'@': 325}), 9: (1, {'@': 325}), 10: (1, {'@': 325}), 11: (1, {'@': 325}), 12: (1, {'@': 325}), 13: (1, {'@': 325}), 14: (1, {'@': 325}), 15: (1, {'@': 325}), 16: (1, {'@': 325}), 17: (1, {'@': 325}), 18: (1, {'@': 325}), 19: (1, {'@': 325}), 20: (1, {'@': 325}), 21: (1, {'@': 325}), 22: (1, {'@': 325}), 23: (1, {'@': 325}), 24: (1, {'@': 325}), 25: (1, {'@': 325}), 26: (1, {'@': 325}), 27: (1, {'@': 325}), 28: (1, {'@': 325}), 29: (1, {'@': 325}), 30: (1, {'@': 325}), 0: (1, {'@': 325}), 31: (1, {'@': 325}), 88: (1, {'@': 325}), 77: (1, {'@': 325}), 53: (1, {'@': 325}), 54: (1, {'@': 325}), 80: (1, {'@': 325}), 81: (1, {'@': 325}), 86: (1, {'@': 325}), 71: (1, {'@': 325}), 58: (1, {'@': 325}), 73: (1, {'@': 325}), 89: (1, {'@': 325}), 60: (1, {'@': 325}), 74: (1, {'@': 325}), 63: (1, {'@': 325}), 93: (1, {'@': 325}), 56: (1, {'@': 325}), 57: (1, {'@': 325}), 59: (1, {'@': 325}), 94: (1, {'@': 325}), 64: (1, {'@': 325}), 65: (1, {'@': 325}), 67: (1, {'@': 325}), 95: (1, {'@': 325}), 70: (1, {'@': 325}), 96: (1, {'@': 325}), 72: (1, {'@': 325}), 1: (1, {'@': 325}), 76: (1, {'@': 325}), 78: (1, {'@': 325}), 79: (1, {'@': 325}), 84: (1, {'@': 325}), 97: (1, {'@': 325}), 87: (1, {'@': 325}), 98: (1, {'@': 325}), 91: (1, {'@': 325}), 55: (1, {'@': 325}), 61: (1, {'@': 325}), 62: (1, {'@': 325}), 99: (1, {'@': 325}), 66: (1, {'@': 325}), 68: (1, {'@': 325}), 100: (1, {'@': 325}), 69: (1, {'@': 325}), 75: (1, {'@': 325}), 101: (1, {'@': 325}), 82: (1, {'@': 325}), 83: (1, {'@': 325}), 102: (1, {'@': 325}), 103: (1, {'@': 325}), 85: (1, {'@': 325}), 104: (1, {'@': 325}), 51: (1, {'@': 325}), 90: (1, {'@': 325}), 92: (1, {'@': 325}), 105: (1, {'@': 325}), 106: (1, {'@': 325}), 107: (1, {'@': 325})}, 161: {22: (0, 400)}, 162: {16: (1, {'@': 321}), 17: (1, {'@': 321}), 18: (1, {'@': 321}), 2: (1, {'@': 321}), 19: (1, {'@': 321}), 3: (1, {'@': 321}), 4: (1, {'@': 321}), 20: (1, {'@': 321}), 21: (1, {'@': 321}), 22: (1, {'@': 321}), 5: (1, {'@': 321}), 23: (1, {'@': 321}), 24: (1, {'@': 321}), 6: (1, {'@': 321}), 25: (1, {'@': 321}), 7: (1, {'@': 321}), 8: (1, {'@': 321}), 9: (1, {'@': 321}), 26: (1, {'@': 321}), 27: (1, {'@': 321}), 10: (1, {'@': 321}), 11: (1, {'@': 321}), 28: (1, {'@': 321}), 29: (1, {'@': 321}), 30: (1, {'@': 321}), 12: (1, {'@': 321}), 0: (1, {'@': 321}), 13: (1, {'@': 321}), 31: (1, {'@': 321}), 14: (1, {'@': 321}), 15: (1, {'@': 321})}, 163: {77: (1, {'@': 391}), 60: (1, {'@': 391}), 53: (1, {'@': 391}), 54: (1, {'@': 391}), 80: (1, {'@': 391}), 93: (1, {'@': 391}), 81: (1, {'@': 391}), 88: (1, {'@': 391}), 4: (1, {'@': 391}), 86: (1, {'@': 391}), 74: (1, {'@': 391}), 63: (1, {'@': 391}), 71: (1, {'@': 391}), 14: (1, {'@': 391}), 7: (1, {'@': 391}), 58: (1, {'@': 391}), 73: (1, {'@': 391}), 89: (1, {'@': 391})}, 164: {1: (0, 555)}, 165: {0: (0, 118), 114: (0, 354)}, 166: {5: (0, 267)}, 167: {99: (0, 276), 23: (0, 125), 97: (0, 195), 145: (0, 552), 102: (0, 129), 53: (1, {'@': 251}), 54: (1, {'@': 251}), 55: (1, {'@': 251}), 56: (1, {'@': 251}), 2: (1, {'@': 251}), 3: (1, {'@': 251}), 57: (1, {'@': 251}), 58: (1, {'@': 251}), 59: (1, {'@': 251}), 8: (1, {'@': 251}), 60: (1, {'@': 251}), 9: (1, {'@': 251}), 11: (1, {'@': 251}), 12: (1, {'@': 251}), 61: (1, {'@': 251}), 13: (1, {'@': 251}), 62: (1, {'@': 251}), 63: (1, {'@': 251}), 15: (1, {'@': 251}), 64: (1, {'@': 251}), 16: (1, {'@': 251}), 17: (1, {'@': 251}), 65: (1, {'@': 251}), 66: (1, {'@': 251}), 67: (1, {'@': 251}), 68: (1, {'@': 251}), 69: (1, {'@': 251}), 95: (1, {'@': 251}), 70: (1, {'@': 251}), 71: (1, {'@': 251}), 25: (1, {'@': 251}), 72: (1, {'@': 251}), 73: (1, {'@': 251}), 26: (1, {'@': 251}), 27: (1, {'@': 251}), 1: (1, {'@': 251}), 28: (1, {'@': 251}), 30: (1, {'@': 251}), 74: (1, {'@': 251}), 75: (1, {'@': 251}), 76: (1, {'@': 251}), 101: (1, {'@': 251}), 77: (1, {'@': 251}), 78: (1, {'@': 251}), 79: (1, {'@': 251}), 80: (1, {'@': 251}), 81: (1, {'@': 251}), 4: (1, {'@': 251}), 5: (1, {'@': 251}), 82: (1, {'@': 251}), 6: (1, {'@': 251}), 83: (1, {'@': 251}), 7: (1, {'@': 251}), 84: (1, {'@': 251}), 10: (1, {'@': 251}), 14: (1, {'@': 251}), 85: (1, {'@': 251}), 18: (1, {'@': 251}), 19: (1, {'@': 251}), 86: (1, {'@': 251}), 20: (1, {'@': 251}), 104: (1, {'@': 251}), 21: (1, {'@': 251}), 87: (1, {'@': 251}), 22: (1, {'@': 251}), 24: (1, {'@': 251}), 51: (1, {'@': 251}), 88: (1, {'@': 251}), 89: (1, {'@': 251}), 90: (1, {'@': 251}), 91: (1, {'@': 251}), 92: (1, {'@': 251}), 29: (1, {'@': 251}), 0: (1, {'@': 251}), 31: (1, {'@': 251}), 93: (1, {'@': 251})}, 168: {5: (0, 437), 53: (1, {'@': 287}), 54: (1, {'@': 287}), 55: (1, {'@': 287}), 56: (1, {'@': 287}), 2: (1, {'@': 287}), 3: (1, {'@': 287}), 57: (1, {'@': 287}), 58: (1, {'@': 287}), 59: (1, {'@': 287}), 8: (1, {'@': 287}), 60: (1, {'@': 287}), 9: (1, {'@': 287}), 11: (1, {'@': 287}), 12: (1, {'@': 287}), 61: (1, {'@': 287}), 13: (1, {'@': 287}), 62: (1, {'@': 287}), 63: (1, {'@': 287}), 94: (1, {'@': 287}), 15: (1, {'@': 287}), 64: (1, {'@': 287}), 16: (1, {'@': 287}), 17: (1, {'@': 287}), 99: (1, {'@': 287}), 65: (1, {'@': 287}), 66: (1, {'@': 287}), 67: (1, {'@': 287}), 68: (1, {'@': 287}), 69: (1, {'@': 287}), 95: (1, {'@': 287}), 70: (1, {'@': 287}), 71: (1, {'@': 287}), 96: (1, {'@': 287}), 25: (1, {'@': 287}), 72: (1, {'@': 287}), 73: (1, {'@': 287}), 26: (1, {'@': 287}), 27: (1, {'@': 287}), 1: (1, {'@': 287}), 28: (1, {'@': 287}), 30: (1, {'@': 287}), 74: (1, {'@': 287}), 75: (1, {'@': 287}), 76: (1, {'@': 287}), 101: (1, {'@': 287}), 77: (1, {'@': 287}), 78: (1, {'@': 287}), 79: (1, {'@': 287}), 80: (1, {'@': 287}), 81: (1, {'@': 287}), 4: (1, {'@': 287}), 82: (1, {'@': 287}), 6: (1, {'@': 287}), 83: (1, {'@': 287}), 7: (1, {'@': 287}), 102: (1, {'@': 287}), 84: (1, {'@': 287}), 10: (1, {'@': 287}), 103: (1, {'@': 287}), 97: (1, {'@': 287}), 14: (1, {'@': 287}), 85: (1, {'@': 287}), 18: (1, {'@': 287}), 19: (1, {'@': 287}), 86: (1, {'@': 287}), 20: (1, {'@': 287}), 104: (1, {'@': 287}), 21: (1, {'@': 287}), 87: (1, {'@': 287}), 22: (1, {'@': 287}), 23: (1, {'@': 287}), 24: (1, {'@': 287}), 51: (1, {'@': 287}), 88: (1, {'@': 287}), 98: (1, {'@': 287}), 89: (1, {'@': 287}), 90: (1, {'@': 287}), 91: (1, {'@': 287}), 92: (1, {'@': 287}), 29: (1, {'@': 287}), 0: (1, {'@': 287}), 31: (1, {'@': 287}), 93: (1, {'@': 287}), 100: (1, {'@': 287})}, 169: {23: (1, {'@': 172}), 108: (1, {'@': 172}), 51: (1, {'@': 172}), 1: (1, {'@': 172}), 77: (1, {'@': 172}), 53: (1, {'@': 172}), 54: (1, {'@': 172}), 80: (1, {'@': 172}), 81: (1, {'@': 172}), 86: (1, {'@': 172}), 4: (1, {'@': 172}), 71: (1, {'@': 172}), 88: (1, {'@': 172}), 7: (1, {'@': 172}), 58: (1, {'@': 172}), 73: (1, {'@': 172}), 89: (1, {'@': 172}), 60: (1, {'@': 172}), 74: (1, {'@': 172}), 63: (1, {'@': 172}), 14: (1, {'@': 172}), 93: (1, {'@': 172}), 24: (1, {'@': 172}), 29: (1, {'@': 172}), 5: (1, {'@': 172})}, 170: {78: (0, 117), 51: (1, {'@': 223}), 24: (1, {'@': 223}), 79: (1, {'@': 223}), 2: (1, {'@': 223}), 3: (1, {'@': 223}), 4: (1, {'@': 223}), 5: (1, {'@': 223}), 6: (1, {'@': 223}), 7: (1, {'@': 223}), 8: (1, {'@': 223}), 9: (1, {'@': 223}), 10: (1, {'@': 223}), 11: (1, {'@': 223}), 12: (1, {'@': 223}), 13: (1, {'@': 223}), 14: (1, {'@': 223}), 15: (1, {'@': 223}), 16: (1, {'@': 223}), 17: (1, {'@': 223}), 18: (1, {'@': 223}), 19: (1, {'@': 223}), 20: (1, {'@': 223}), 21: (1, {'@': 223}), 22: (1, {'@': 223}), 23: (1, {'@': 223}), 25: (1, {'@': 223}), 26: (1, {'@': 223}), 27: (1, {'@': 223}), 28: (1, {'@': 223}), 29: (1, {'@': 223}), 30: (1, {'@': 223}), 0: (1, {'@': 223}), 31: (1, {'@': 223}), 1: (1, {'@': 223}), 53: (1, {'@': 223}), 54: (1, {'@': 223}), 56: (1, {'@': 223}), 57: (1, {'@': 223}), 58: (1, {'@': 223}), 59: (1, {'@': 223}), 60: (1, {'@': 223}), 62: (1, {'@': 223}), 63: (1, {'@': 223}), 64: (1, {'@': 223}), 66: (1, {'@': 223}), 68: (1, {'@': 223}), 69: (1, {'@': 223}), 70: (1, {'@': 223}), 71: (1, {'@': 223}), 73: (1, {'@': 223}), 74: (1, {'@': 223}), 75: (1, {'@': 223}), 77: (1, {'@': 223}), 80: (1, {'@': 223}), 81: (1, {'@': 223}), 82: (1, {'@': 223}), 84: (1, {'@': 223}), 85: (1, {'@': 223}), 86: (1, {'@': 223}), 87: (1, {'@': 223}), 88: (1, {'@': 223}), 89: (1, {'@': 223}), 90: (1, {'@': 223}), 91: (1, {'@': 223}), 93: (1, {'@': 223})}, 171: {5: (0, 246), 113: (0, 250), 88: (1, {'@': 357}), 24: (1, {'@': 357})}, 172: {2: (1, {'@': 431}), 3: (1, {'@': 431}), 4: (1, {'@': 431}), 5: (1, {'@': 431}), 6: (1, {'@': 431}), 7: (1, {'@': 431}), 8: (1, {'@': 431}), 9: (1, {'@': 431}), 10: (1, {'@': 431}), 11: (1, {'@': 431}), 12: (1, {'@': 431}), 13: (1, {'@': 431}), 14: (1, {'@': 431}), 15: (1, {'@': 431}), 16: (1, {'@': 431}), 17: (1, {'@': 431}), 18: (1, {'@': 431}), 19: (1, {'@': 431}), 20: (1, {'@': 431}), 21: (1, {'@': 431}), 22: (1, {'@': 431}), 23: (1, {'@': 431}), 24: (1, {'@': 431}), 25: (1, {'@': 431}), 26: (1, {'@': 431}), 27: (1, {'@': 431}), 28: (1, {'@': 431}), 29: (1, {'@': 431}), 30: (1, {'@': 431}), 0: (1, {'@': 431}), 31: (1, {'@': 431})}, 173: {77: (1, {'@': 384}), 60: (1, {'@': 384}), 53: (1, {'@': 384}), 54: (1, {'@': 384}), 80: (1, {'@': 384}), 93: (1, {'@': 384}), 81: (1, {'@': 384}), 88: (1, {'@': 384}), 4: (1, {'@': 384}), 86: (1, {'@': 384}), 74: (1, {'@': 384}), 63: (1, {'@': 384}), 71: (1, {'@': 384}), 14: (1, {'@': 384}), 7: (1, {'@': 384}), 58: (1, {'@': 384}), 73: (1, {'@': 384}), 89: (1, {'@': 384})}, 174: {77: (1, {'@': 395}), 60: (1, {'@': 395}), 53: (1, {'@': 395}), 54: (1, {'@': 395}), 80: (1, {'@': 395}), 93: (1, {'@': 395}), 81: (1, {'@': 395}), 88: (1, {'@': 395}), 4: (1, {'@': 395}), 86: (1, {'@': 395}), 74: (1, {'@': 395}), 63: (1, {'@': 395}), 71: (1, {'@': 395}), 14: (1, {'@': 395}), 7: (1, {'@': 395}), 58: (1, {'@': 395}), 73: (1, {'@': 395}), 89: (1, {'@': 395})}, 175: {77: (1, {'@': 157}), 53: (1, {'@': 157}), 54: (1, {'@': 157}), 80: (1, {'@': 157}), 81: (1, {'@': 157}), 4: (1, {'@': 157}), 5: (1, {'@': 157}), 7: (1, {'@': 157}), 58: (1, {'@': 157}), 60: (1, {'@': 157}), 63: (1, {'@': 157}), 108: (1, {'@': 157}), 14: (1, {'@': 157}), 86: (1, {'@': 157}), 23: (1, {'@': 157}), 24: (1, {'@': 157}), 51: (1, {'@': 157}), 71: (1, {'@': 157}), 88: (1, {'@': 157}), 73: (1, {'@': 157}), 89: (1, {'@': 157}), 1: (1, {'@': 157}), 29: (1, {'@': 157}), 74: (1, {'@': 157}), 93: (1, {'@': 157})}, 176: {2: (1, {'@': 430}), 3: (1, {'@': 430}), 4: (1, {'@': 430}), 5: (1, {'@': 430}), 6: (1, {'@': 430}), 7: (1, {'@': 430}), 8: (1, {'@': 430}), 9: (1, {'@': 430}), 10: (1, {'@': 430}), 11: (1, {'@': 430}), 12: (1, {'@': 430}), 13: (1, {'@': 430}), 14: (1, {'@': 430}), 15: (1, {'@': 430}), 16: (1, {'@': 430}), 17: (1, {'@': 430}), 18: (1, {'@': 430}), 19: (1, {'@': 430}), 20: (1, {'@': 430}), 21: (1, {'@': 430}), 22: (1, {'@': 430}), 23: (1, {'@': 430}), 24: (1, {'@': 430}), 25: (1, {'@': 430}), 26: (1, {'@': 430}), 27: (1, {'@': 430}), 28: (1, {'@': 430}), 29: (1, {'@': 430}), 30: (1, {'@': 430}), 0: (1, {'@': 430}), 31: (1, {'@': 430})}, 177: {122: (0, 304)}, 178: {77: (1, {'@': 155}), 53: (1, {'@': 155}), 54: (1, {'@': 155}), 80: (1, {'@': 155}), 81: (1, {'@': 155}), 4: (1, {'@': 155}), 5: (1, {'@': 155}), 7: (1, {'@': 155}), 58: (1, {'@': 155}), 60: (1, {'@': 155}), 63: (1, {'@': 155}), 108: (1, {'@': 155}), 14: (1, {'@': 155}), 86: (1, {'@': 155}), 23: (1, {'@': 155}), 24: (1, {'@': 155}), 51: (1, {'@': 155}), 71: (1, {'@': 155}), 88: (1, {'@': 155}), 73: (1, {'@': 155}), 89: (1, {'@': 155}), 1: (1, {'@': 155}), 29: (1, {'@': 155}), 74: (1, {'@': 155}), 93: (1, {'@': 155})}, 179: {32: (0, 559), 33: (0, 260), 28: (0, 315), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 22: (0, 512), 36: (0, 550), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 40: (0, 509), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 180: {77: (1, {'@': 397}), 60: (1, {'@': 397}), 53: (1, {'@': 397}), 54: (1, {'@': 397}), 80: (1, {'@': 397}), 93: (1, {'@': 397}), 81: (1, {'@': 397}), 88: (1, {'@': 397}), 4: (1, {'@': 397}), 86: (1, {'@': 397}), 74: (1, {'@': 397}), 63: (1, {'@': 397}), 71: (1, {'@': 397}), 14: (1, {'@': 397}), 7: (1, {'@': 397}), 58: (1, {'@': 397}), 73: (1, {'@': 397}), 89: (1, {'@': 397})}, 181: {32: (0, 559), 33: (0, 260), 20: (0, 95), 42: (0, 168), 36: (0, 550), 28: (0, 315), 5: (0, 642), 4: (0, 556), 22: (0, 401), 41: (0, 91), 26: (0, 20), 34: (0, 13), 0: (0, 107), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 3: (0, 211), 47: (0, 243), 48: (0, 238), 18: (0, 651), 49: (0, 259), 8: (0, 500), 23: (0, 134), 39: (0, 420), 50: (0, 102)}, 182: {5: (0, 419)}, 183: {53: (1, {'@': 286}), 54: (1, {'@': 286}), 55: (1, {'@': 286}), 56: (1, {'@': 286}), 2: (1, {'@': 286}), 3: (1, {'@': 286}), 57: (1, {'@': 286}), 58: (1, {'@': 286}), 59: (1, {'@': 286}), 8: (1, {'@': 286}), 60: (1, {'@': 286}), 9: (1, {'@': 286}), 11: (1, {'@': 286}), 12: (1, {'@': 286}), 61: (1, {'@': 286}), 13: (1, {'@': 286}), 62: (1, {'@': 286}), 63: (1, {'@': 286}), 94: (1, {'@': 286}), 15: (1, {'@': 286}), 64: (1, {'@': 286}), 16: (1, {'@': 286}), 17: (1, {'@': 286}), 99: (1, {'@': 286}), 65: (1, {'@': 286}), 66: (1, {'@': 286}), 67: (1, {'@': 286}), 68: (1, {'@': 286}), 69: (1, {'@': 286}), 95: (1, {'@': 286}), 70: (1, {'@': 286}), 71: (1, {'@': 286}), 96: (1, {'@': 286}), 25: (1, {'@': 286}), 72: (1, {'@': 286}), 73: (1, {'@': 286}), 26: (1, {'@': 286}), 27: (1, {'@': 286}), 1: (1, {'@': 286}), 28: (1, {'@': 286}), 30: (1, {'@': 286}), 74: (1, {'@': 286}), 75: (1, {'@': 286}), 76: (1, {'@': 286}), 101: (1, {'@': 286}), 77: (1, {'@': 286}), 78: (1, {'@': 286}), 79: (1, {'@': 286}), 80: (1, {'@': 286}), 81: (1, {'@': 286}), 4: (1, {'@': 286}), 5: (1, {'@': 286}), 82: (1, {'@': 286}), 6: (1, {'@': 286}), 83: (1, {'@': 286}), 7: (1, {'@': 286}), 102: (1, {'@': 286}), 84: (1, {'@': 286}), 10: (1, {'@': 286}), 103: (1, {'@': 286}), 97: (1, {'@': 286}), 14: (1, {'@': 286}), 85: (1, {'@': 286}), 18: (1, {'@': 286}), 19: (1, {'@': 286}), 86: (1, {'@': 286}), 20: (1, {'@': 286}), 104: (1, {'@': 286}), 21: (1, {'@': 286}), 87: (1, {'@': 286}), 22: (1, {'@': 286}), 23: (1, {'@': 286}), 24: (1, {'@': 286}), 51: (1, {'@': 286}), 88: (1, {'@': 286}), 98: (1, {'@': 286}), 89: (1, {'@': 286}), 90: (1, {'@': 286}), 91: (1, {'@': 286}), 92: (1, {'@': 286}), 29: (1, {'@': 286}), 0: (1, {'@': 286}), 31: (1, {'@': 286}), 93: (1, {'@': 286}), 100: (1, {'@': 286})}, 184: {5: (0, 345), 22: (0, 624)}, 185: {150: (0, 86), 51: (0, 196), 1: (1, {'@': 98})}, 186: {78: (0, 3), 149: (0, 639), 1: (0, 212)}, 187: {122: (0, 302)}, 188: {151: (0, 580), 92: (0, 434), 53: (1, {'@': 232}), 54: (1, {'@': 232}), 55: (1, {'@': 232}), 56: (1, {'@': 232}), 2: (1, {'@': 232}), 3: (1, {'@': 232}), 57: (1, {'@': 232}), 58: (1, {'@': 232}), 59: (1, {'@': 232}), 8: (1, {'@': 232}), 60: (1, {'@': 232}), 9: (1, {'@': 232}), 11: (1, {'@': 232}), 12: (1, {'@': 232}), 61: (1, {'@': 232}), 13: (1, {'@': 232}), 62: (1, {'@': 232}), 63: (1, {'@': 232}), 15: (1, {'@': 232}), 64: (1, {'@': 232}), 16: (1, {'@': 232}), 17: (1, {'@': 232}), 65: (1, {'@': 232}), 66: (1, {'@': 232}), 67: (1, {'@': 232}), 68: (1, {'@': 232}), 69: (1, {'@': 232}), 70: (1, {'@': 232}), 71: (1, {'@': 232}), 25: (1, {'@': 232}), 72: (1, {'@': 232}), 73: (1, {'@': 232}), 26: (1, {'@': 232}), 27: (1, {'@': 232}), 1: (1, {'@': 232}), 28: (1, {'@': 232}), 30: (1, {'@': 232}), 74: (1, {'@': 232}), 75: (1, {'@': 232}), 76: (1, {'@': 232}), 77: (1, {'@': 232}), 78: (1, {'@': 232}), 79: (1, {'@': 232}), 80: (1, {'@': 232}), 81: (1, {'@': 232}), 4: (1, {'@': 232}), 5: (1, {'@': 232}), 82: (1, {'@': 232}), 6: (1, {'@': 232}), 7: (1, {'@': 232}), 84: (1, {'@': 232}), 10: (1, {'@': 232}), 14: (1, {'@': 232}), 85: (1, {'@': 232}), 18: (1, {'@': 232}), 19: (1, {'@': 232}), 86: (1, {'@': 232}), 20: (1, {'@': 232}), 21: (1, {'@': 232}), 87: (1, {'@': 232}), 22: (1, {'@': 232}), 23: (1, {'@': 232}), 24: (1, {'@': 232}), 51: (1, {'@': 232}), 88: (1, {'@': 232}), 89: (1, {'@': 232}), 90: (1, {'@': 232}), 91: (1, {'@': 232}), 29: (1, {'@': 232}), 0: (1, {'@': 232}), 31: (1, {'@': 232}), 93: (1, {'@': 232})}, 189: {32: (0, 559), 42: (0, 168), 20: (0, 95), 4: (0, 556), 36: (0, 550), 28: (0, 315), 5: (0, 642), 22: (0, 271), 0: (0, 107), 26: (0, 20), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 233), 47: (0, 243), 48: (0, 238), 18: (0, 651), 49: (0, 259), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 190: {23: (1, {'@': 187}), 108: (1, {'@': 187}), 51: (1, {'@': 187}), 1: (1, {'@': 187}), 77: (1, {'@': 187}), 53: (1, {'@': 187}), 54: (1, {'@': 187}), 80: (1, {'@': 187}), 81: (1, {'@': 187}), 86: (1, {'@': 187}), 4: (1, {'@': 187}), 71: (1, {'@': 187}), 88: (1, {'@': 187}), 7: (1, {'@': 187}), 58: (1, {'@': 187}), 73: (1, {'@': 187}), 89: (1, {'@': 187}), 60: (1, {'@': 187}), 74: (1, {'@': 187}), 63: (1, {'@': 187}), 14: (1, {'@': 187}), 93: (1, {'@': 187}), 24: (1, {'@': 187}), 29: (1, {'@': 187}), 5: (1, {'@': 187})}, 191: {1: (0, 538)}, 192: {16: (1, {'@': 309}), 17: (1, {'@': 309}), 18: (1, {'@': 309}), 2: (1, {'@': 309}), 19: (1, {'@': 309}), 3: (1, {'@': 309}), 4: (1, {'@': 309}), 20: (1, {'@': 309}), 21: (1, {'@': 309}), 22: (1, {'@': 309}), 5: (1, {'@': 309}), 23: (1, {'@': 309}), 24: (1, {'@': 309}), 6: (1, {'@': 309}), 25: (1, {'@': 309}), 7: (1, {'@': 309}), 8: (1, {'@': 309}), 9: (1, {'@': 309}), 26: (1, {'@': 309}), 27: (1, {'@': 309}), 10: (1, {'@': 309}), 11: (1, {'@': 309}), 28: (1, {'@': 309}), 29: (1, {'@': 309}), 30: (1, {'@': 309}), 12: (1, {'@': 309}), 0: (1, {'@': 309}), 13: (1, {'@': 309}), 31: (1, {'@': 309}), 14: (1, {'@': 309}), 15: (1, {'@': 309})}, 193: {3: (1, {'@': 334}), 4: (1, {'@': 334}), 5: (1, {'@': 334}), 6: (1, {'@': 334}), 7: (1, {'@': 334}), 8: (1, {'@': 334}), 9: (1, {'@': 334}), 14: (1, {'@': 334}), 17: (1, {'@': 334}), 18: (1, {'@': 334}), 19: (1, {'@': 334}), 20: (1, {'@': 334}), 21: (1, {'@': 334}), 22: (1, {'@': 334}), 23: (1, {'@': 334}), 26: (1, {'@': 334}), 28: (1, {'@': 334}), 29: (1, {'@': 334}), 30: (1, {'@': 334}), 0: (1, {'@': 334})}, 194: {77: (1, {'@': 388}), 60: (1, {'@': 388}), 53: (1, {'@': 388}), 54: (1, {'@': 388}), 80: (1, {'@': 388}), 93: (1, {'@': 388}), 81: (1, {'@': 388}), 88: (1, {'@': 388}), 4: (1, {'@': 388}), 86: (1, {'@': 388}), 74: (1, {'@': 388}), 63: (1, {'@': 388}), 71: (1, {'@': 388}), 14: (1, {'@': 388}), 7: (1, {'@': 388}), 58: (1, {'@': 388}), 73: (1, {'@': 388}), 89: (1, {'@': 388})}, 195: {3: (1, {'@': 340}), 4: (1, {'@': 340}), 5: (1, {'@': 340}), 6: (1, {'@': 340}), 7: (1, {'@': 340}), 8: (1, {'@': 340}), 9: (1, {'@': 340}), 14: (1, {'@': 340}), 17: (1, {'@': 340}), 18: (1, {'@': 340}), 19: (1, {'@': 340}), 20: (1, {'@': 340}), 21: (1, {'@': 340}), 22: (1, {'@': 340}), 23: (1, {'@': 340}), 26: (1, {'@': 340}), 28: (1, {'@': 340}), 29: (1, {'@': 340}), 30: (1, {'@': 340}), 0: (1, {'@': 340})}, 196: {0: (0, 118), 114: (0, 568), 1: (1, {'@': 101})}, 197: {141: (0, 565), 0: (0, 177), 1: (1, {'@': 197}), 24: (1, {'@': 197})}, 198: {5: (0, 246), 113: (0, 250), 77: (1, {'@': 385}), 60: (1, {'@': 385}), 53: (1, {'@': 385}), 54: (1, {'@': 385}), 80: (1, {'@': 385}), 93: (1, {'@': 385}), 81: (1, {'@': 385}), 88: (1, {'@': 385}), 4: (1, {'@': 385}), 86: (1, {'@': 385}), 74: (1, {'@': 385}), 63: (1, {'@': 385}), 71: (1, {'@': 385}), 14: (1, {'@': 385}), 7: (1, {'@': 385}), 58: (1, {'@': 385}), 73: (1, {'@': 385}), 89: (1, {'@': 385})}, 199: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 109: (0, 24), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 200: {77: (1, {'@': 392}), 60: (1, {'@': 392}), 53: (1, {'@': 392}), 54: (1, {'@': 392}), 80: (1, {'@': 392}), 93: (1, {'@': 392}), 81: (1, {'@': 392}), 88: (1, {'@': 392}), 4: (1, {'@': 392}), 86: (1, {'@': 392}), 74: (1, {'@': 392}), 63: (1, {'@': 392}), 71: (1, {'@': 392}), 14: (1, {'@': 392}), 7: (1, {'@': 392}), 58: (1, {'@': 392}), 73: (1, {'@': 392}), 89: (1, {'@': 392})}, 201: {98: (0, 541), 143: (0, 362), 1: (0, 367), 97: (0, 195), 94: (0, 239), 99: (0, 276), 23: (0, 125), 144: (0, 137), 145: (0, 189), 102: (0, 129), 101: (1, {'@': 252}), 92: (1, {'@': 252}), 3: (1, {'@': 252}), 20: (1, {'@': 252}), 104: (1, {'@': 252}), 21: (1, {'@': 252}), 95: (1, {'@': 252}), 83: (1, {'@': 252}), 55: (1, {'@': 252}), 65: (1, {'@': 252}), 67: (1, {'@': 252}), 72: (1, {'@': 252}), 61: (1, {'@': 252}), 76: (1, {'@': 252}), 78: (1, {'@': 252}), 79: (1, {'@': 252})}, 202: {77: (1, {'@': 383}), 60: (1, {'@': 383}), 53: (1, {'@': 383}), 54: (1, {'@': 383}), 80: (1, {'@': 383}), 93: (1, {'@': 383}), 81: (1, {'@': 383}), 88: (1, {'@': 383}), 4: (1, {'@': 383}), 86: (1, {'@': 383}), 74: (1, {'@': 383}), 63: (1, {'@': 383}), 71: (1, {'@': 383}), 14: (1, {'@': 383}), 7: (1, {'@': 383}), 58: (1, {'@': 383}), 73: (1, {'@': 383}), 89: (1, {'@': 383})}, 203: {77: (1, {'@': 399}), 60: (1, {'@': 399}), 53: (1, {'@': 399}), 54: (1, {'@': 399}), 80: (1, {'@': 399}), 93: (1, {'@': 399}), 81: (1, {'@': 399}), 88: (1, {'@': 399}), 4: (1, {'@': 399}), 86: (1, {'@': 399}), 74: (1, {'@': 399}), 63: (1, {'@': 399}), 71: (1, {'@': 399}), 14: (1, {'@': 399}), 7: (1, {'@': 399}), 58: (1, {'@': 399}), 73: (1, {'@': 399}), 89: (1, {'@': 399})}, 204: {22: (0, 452)}, 205: {77: (1, {'@': 394}), 60: (1, {'@': 394}), 53: (1, {'@': 394}), 54: (1, {'@': 394}), 80: (1, {'@': 394}), 93: (1, {'@': 394}), 81: (1, {'@': 394}), 88: (1, {'@': 394}), 4: (1, {'@': 394}), 86: (1, {'@': 394}), 74: (1, {'@': 394}), 63: (1, {'@': 394}), 71: (1, {'@': 394}), 14: (1, {'@': 394}), 7: (1, {'@': 394}), 58: (1, {'@': 394}), 73: (1, {'@': 394}), 89: (1, {'@': 394})}, 206: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 109: (0, 93), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 207: {77: (1, {'@': 387}), 60: (1, {'@': 387}), 53: (1, {'@': 387}), 54: (1, {'@': 387}), 80: (1, {'@': 387}), 93: (1, {'@': 387}), 81: (1, {'@': 387}), 88: (1, {'@': 387}), 4: (1, {'@': 387}), 86: (1, {'@': 387}), 74: (1, {'@': 387}), 63: (1, {'@': 387}), 71: (1, {'@': 387}), 14: (1, {'@': 387}), 7: (1, {'@': 387}), 58: (1, {'@': 387}), 73: (1, {'@': 387}), 89: (1, {'@': 387})}, 208: {23: (1, {'@': 173}), 108: (1, {'@': 173}), 51: (1, {'@': 173}), 1: (1, {'@': 173}), 77: (1, {'@': 173}), 53: (1, {'@': 173}), 54: (1, {'@': 173}), 80: (1, {'@': 173}), 81: (1, {'@': 173}), 86: (1, {'@': 173}), 4: (1, {'@': 173}), 71: (1, {'@': 173}), 88: (1, {'@': 173}), 7: (1, {'@': 173}), 58: (1, {'@': 173}), 73: (1, {'@': 173}), 89: (1, {'@': 173}), 60: (1, {'@': 173}), 74: (1, {'@': 173}), 63: (1, {'@': 173}), 14: (1, {'@': 173}), 93: (1, {'@': 173}), 24: (1, {'@': 173}), 29: (1, {'@': 173}), 5: (1, {'@': 173})}, 209: {77: (1, {'@': 398}), 60: (1, {'@': 398}), 53: (1, {'@': 398}), 54: (1, {'@': 398}), 80: (1, {'@': 398}), 93: (1, {'@': 398}), 81: (1, {'@': 398}), 88: (1, {'@': 398}), 4: (1, {'@': 398}), 86: (1, {'@': 398}), 74: (1, {'@': 398}), 63: (1, {'@': 398}), 71: (1, {'@': 398}), 14: (1, {'@': 398}), 7: (1, {'@': 398}), 58: (1, {'@': 398}), 73: (1, {'@': 398}), 89: (1, {'@': 398})}, 210: {100: (0, 487)}, 211: {3: (1, {'@': 345}), 4: (1, {'@': 345}), 5: (1, {'@': 345}), 6: (1, {'@': 345}), 7: (1, {'@': 345}), 8: (1, {'@': 345}), 9: (1, {'@': 345}), 14: (1, {'@': 345}), 17: (1, {'@': 345}), 18: (1, {'@': 345}), 19: (1, {'@': 345}), 20: (1, {'@': 345}), 21: (1, {'@': 345}), 22: (1, {'@': 345}), 23: (1, {'@': 345}), 26: (1, {'@': 345}), 28: (1, {'@': 345}), 29: (1, {'@': 345}), 30: (1, {'@': 345}), 0: (1, {'@': 345})}, 212: {51: (1, {'@': 226}), 24: (1, {'@': 226}), 79: (1, {'@': 226}), 2: (1, {'@': 226}), 3: (1, {'@': 226}), 4: (1, {'@': 226}), 5: (1, {'@': 226}), 6: (1, {'@': 226}), 7: (1, {'@': 226}), 8: (1, {'@': 226}), 9: (1, {'@': 226}), 10: (1, {'@': 226}), 11: (1, {'@': 226}), 12: (1, {'@': 226}), 13: (1, {'@': 226}), 14: (1, {'@': 226}), 15: (1, {'@': 226}), 16: (1, {'@': 226}), 17: (1, {'@': 226}), 18: (1, {'@': 226}), 19: (1, {'@': 226}), 20: (1, {'@': 226}), 21: (1, {'@': 226}), 22: (1, {'@': 226}), 23: (1, {'@': 226}), 25: (1, {'@': 226}), 26: (1, {'@': 226}), 27: (1, {'@': 226}), 28: (1, {'@': 226}), 29: (1, {'@': 226}), 30: (1, {'@': 226}), 0: (1, {'@': 226}), 31: (1, {'@': 226}), 1: (1, {'@': 226}), 53: (1, {'@': 226}), 54: (1, {'@': 226}), 56: (1, {'@': 226}), 57: (1, {'@': 226}), 58: (1, {'@': 226}), 59: (1, {'@': 226}), 60: (1, {'@': 226}), 62: (1, {'@': 226}), 63: (1, {'@': 226}), 64: (1, {'@': 226}), 66: (1, {'@': 226}), 68: (1, {'@': 226}), 69: (1, {'@': 226}), 70: (1, {'@': 226}), 71: (1, {'@': 226}), 73: (1, {'@': 226}), 74: (1, {'@': 226}), 75: (1, {'@': 226}), 77: (1, {'@': 226}), 80: (1, {'@': 226}), 81: (1, {'@': 226}), 82: (1, {'@': 226}), 84: (1, {'@': 226}), 85: (1, {'@': 226}), 86: (1, {'@': 226}), 87: (1, {'@': 226}), 88: (1, {'@': 226}), 89: (1, {'@': 226}), 90: (1, {'@': 226}), 91: (1, {'@': 226}), 93: (1, {'@': 226})}, 213: {51: (0, 640)}, 214: {77: (1, {'@': 396}), 60: (1, {'@': 396}), 53: (1, {'@': 396}), 54: (1, {'@': 396}), 80: (1, {'@': 396}), 93: (1, {'@': 396}), 81: (1, {'@': 396}), 88: (1, {'@': 396}), 4: (1, {'@': 396}), 86: (1, {'@': 396}), 74: (1, {'@': 396}), 63: (1, {'@': 396}), 71: (1, {'@': 396}), 14: (1, {'@': 396}), 7: (1, {'@': 396}), 58: (1, {'@': 396}), 73: (1, {'@': 396}), 89: (1, {'@': 396})}, 215: {16: (1, {'@': 314}), 17: (1, {'@': 314}), 18: (1, {'@': 314}), 2: (1, {'@': 314}), 19: (1, {'@': 314}), 3: (1, {'@': 314}), 4: (1, {'@': 314}), 20: (1, {'@': 314}), 21: (1, {'@': 314}), 22: (1, {'@': 314}), 5: (1, {'@': 314}), 23: (1, {'@': 314}), 24: (1, {'@': 314}), 6: (1, {'@': 314}), 25: (1, {'@': 314}), 7: (1, {'@': 314}), 8: (1, {'@': 314}), 9: (1, {'@': 314}), 26: (1, {'@': 314}), 27: (1, {'@': 314}), 10: (1, {'@': 314}), 11: (1, {'@': 314}), 28: (1, {'@': 314}), 29: (1, {'@': 314}), 30: (1, {'@': 314}), 12: (1, {'@': 314}), 0: (1, {'@': 314}), 13: (1, {'@': 314}), 31: (1, {'@': 314}), 14: (1, {'@': 314}), 15: (1, {'@': 314})}, 216: {77: (1, {'@': 382}), 60: (1, {'@': 382}), 53: (1, {'@': 382}), 54: (1, {'@': 382}), 80: (1, {'@': 382}), 93: (1, {'@': 382}), 81: (1, {'@': 382}), 88: (1, {'@': 382}), 4: (1, {'@': 382}), 86: (1, {'@': 382}), 74: (1, {'@': 382}), 63: (1, {'@': 382}), 71: (1, {'@': 382}), 14: (1, {'@': 382}), 7: (1, {'@': 382}), 58: (1, {'@': 382}), 73: (1, {'@': 382}), 89: (1, {'@': 382})}, 217: {2: (1, {'@': 443}), 3: (1, {'@': 443}), 4: (1, {'@': 443}), 5: (1, {'@': 443}), 6: (1, {'@': 443}), 7: (1, {'@': 443}), 8: (1, {'@': 443}), 9: (1, {'@': 443}), 10: (1, {'@': 443}), 11: (1, {'@': 443}), 12: (1, {'@': 443}), 13: (1, {'@': 443}), 14: (1, {'@': 443}), 15: (1, {'@': 443}), 16: (1, {'@': 443}), 17: (1, {'@': 443}), 18: (1, {'@': 443}), 19: (1, {'@': 443}), 20: (1, {'@': 443}), 21: (1, {'@': 443}), 22: (1, {'@': 443}), 23: (1, {'@': 443}), 24: (1, {'@': 443}), 25: (1, {'@': 443}), 26: (1, {'@': 443}), 27: (1, {'@': 443}), 28: (1, {'@': 443}), 29: (1, {'@': 443}), 30: (1, {'@': 443}), 0: (1, {'@': 443}), 31: (1, {'@': 443})}, 218: {32: (0, 559), 33: (0, 260), 22: (0, 444), 28: (0, 315), 37: (0, 308), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 110: (0, 249), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 219: {77: (1, {'@': 156}), 53: (1, {'@': 156}), 54: (1, {'@': 156}), 80: (1, {'@': 156}), 81: (1, {'@': 156}), 4: (1, {'@': 156}), 5: (1, {'@': 156}), 7: (1, {'@': 156}), 58: (1, {'@': 156}), 60: (1, {'@': 156}), 63: (1, {'@': 156}), 108: (1, {'@': 156}), 14: (1, {'@': 156}), 86: (1, {'@': 156}), 23: (1, {'@': 156}), 24: (1, {'@': 156}), 51: (1, {'@': 156}), 71: (1, {'@': 156}), 88: (1, {'@': 156}), 73: (1, {'@': 156}), 89: (1, {'@': 156}), 1: (1, {'@': 156}), 29: (1, {'@': 156}), 74: (1, {'@': 156}), 93: (1, {'@': 156})}, 220: {77: (1, {'@': 390}), 60: (1, {'@': 390}), 53: (1, {'@': 390}), 54: (1, {'@': 390}), 80: (1, {'@': 390}), 93: (1, {'@': 390}), 81: (1, {'@': 390}), 88: (1, {'@': 390}), 4: (1, {'@': 390}), 86: (1, {'@': 390}), 74: (1, {'@': 390}), 63: (1, {'@': 390}), 71: (1, {'@': 390}), 14: (1, {'@': 390}), 7: (1, {'@': 390}), 58: (1, {'@': 390}), 73: (1, {'@': 390}), 89: (1, {'@': 390})}, 221: {77: (1, {'@': 134}), 53: (1, {'@': 134}), 54: (1, {'@': 134}), 80: (1, {'@': 134}), 81: (1, {'@': 134}), 86: (1, {'@': 134}), 4: (1, {'@': 134}), 71: (1, {'@': 134}), 88: (1, {'@': 134}), 7: (1, {'@': 134}), 58: (1, {'@': 134}), 73: (1, {'@': 134}), 89: (1, {'@': 134}), 60: (1, {'@': 134}), 74: (1, {'@': 134}), 63: (1, {'@': 134}), 14: (1, {'@': 134}), 93: (1, {'@': 134})}, 222: {114: (0, 313), 5: (0, 642), 152: (0, 351), 8: (0, 429), 0: (0, 309), 42: (0, 332), 35: (0, 338), 6: (0, 262), 148: (0, 316), 18: (0, 425)}, 223: {77: (1, {'@': 386}), 60: (1, {'@': 386}), 53: (1, {'@': 386}), 54: (1, {'@': 386}), 80: (1, {'@': 386}), 93: (1, {'@': 386}), 81: (1, {'@': 386}), 88: (1, {'@': 386}), 4: (1, {'@': 386}), 86: (1, {'@': 386}), 74: (1, {'@': 386}), 63: (1, {'@': 386}), 71: (1, {'@': 386}), 14: (1, {'@': 386}), 7: (1, {'@': 386}), 58: (1, {'@': 386}), 73: (1, {'@': 386}), 89: (1, {'@': 386})}, 224: {5: (1, {'@': 143}), 77: (1, {'@': 143}), 53: (1, {'@': 143}), 54: (1, {'@': 143}), 80: (1, {'@': 143}), 81: (1, {'@': 143}), 86: (1, {'@': 143}), 4: (1, {'@': 143}), 71: (1, {'@': 143}), 88: (1, {'@': 143}), 7: (1, {'@': 143}), 58: (1, {'@': 143}), 73: (1, {'@': 143}), 89: (1, {'@': 143}), 60: (1, {'@': 143}), 74: (1, {'@': 143}), 63: (1, {'@': 143}), 14: (1, {'@': 143}), 93: (1, {'@': 143}), 23: (1, {'@': 143}), 108: (1, {'@': 143}), 24: (1, {'@': 143}), 51: (1, {'@': 143}), 1: (1, {'@': 143}), 29: (1, {'@': 143})}, 225: {5: (0, 258)}, 226: {77: (1, {'@': 389}), 60: (1, {'@': 389}), 53: (1, {'@': 389}), 54: (1, {'@': 389}), 80: (1, {'@': 389}), 93: (1, {'@': 389}), 81: (1, {'@': 389}), 88: (1, {'@': 389}), 4: (1, {'@': 389}), 86: (1, {'@': 389}), 74: (1, {'@': 389}), 63: (1, {'@': 389}), 71: (1, {'@': 389}), 14: (1, {'@': 389}), 7: (1, {'@': 389}), 58: (1, {'@': 389}), 73: (1, {'@': 389}), 89: (1, {'@': 389})}, 227: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 109: (0, 264), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 228: {23: (1, {'@': 186}), 108: (1, {'@': 186}), 51: (1, {'@': 186}), 1: (1, {'@': 186}), 77: (1, {'@': 186}), 53: (1, {'@': 186}), 54: (1, {'@': 186}), 80: (1, {'@': 186}), 81: (1, {'@': 186}), 86: (1, {'@': 186}), 4: (1, {'@': 186}), 71: (1, {'@': 186}), 88: (1, {'@': 186}), 7: (1, {'@': 186}), 58: (1, {'@': 186}), 73: (1, {'@': 186}), 89: (1, {'@': 186}), 60: (1, {'@': 186}), 74: (1, {'@': 186}), 63: (1, {'@': 186}), 14: (1, {'@': 186}), 93: (1, {'@': 186}), 24: (1, {'@': 186}), 29: (1, {'@': 186}), 5: (1, {'@': 186})}, 229: {77: (1, {'@': 393}), 60: (1, {'@': 393}), 53: (1, {'@': 393}), 54: (1, {'@': 393}), 80: (1, {'@': 393}), 93: (1, {'@': 393}), 81: (1, {'@': 393}), 88: (1, {'@': 393}), 4: (1, {'@': 393}), 86: (1, {'@': 393}), 74: (1, {'@': 393}), 63: (1, {'@': 393}), 71: (1, {'@': 393}), 14: (1, {'@': 393}), 7: (1, {'@': 393}), 58: (1, {'@': 393}), 73: (1, {'@': 393}), 89: (1, {'@': 393})}, 230: {22: (0, 346), 153: (0, 94), 96: (0, 537), 103: (0, 666), 6: (0, 561), 1: (0, 278), 102: (1, {'@': 260}), 23: (1, {'@': 260}), 94: (1, {'@': 260}), 99: (1, {'@': 260}), 98: (1, {'@': 260}), 97: (1, {'@': 260}), 83: (1, {'@': 260}), 92: (1, {'@': 260}), 3: (1, {'@': 260}), 20: (1, {'@': 260}), 104: (1, {'@': 260}), 21: (1, {'@': 260}), 95: (1, {'@': 260}), 101: (1, {'@': 260}), 55: (1, {'@': 260}), 65: (1, {'@': 260}), 67: (1, {'@': 260}), 76: (1, {'@': 260}), 72: (1, {'@': 260}), 61: (1, {'@': 260}), 78: (1, {'@': 260}), 79: (1, {'@': 260})}, 231: {5: (0, 642), 22: (0, 539), 35: (0, 630)}, 232: {53: (1, {'@': 230}), 54: (1, {'@': 230}), 56: (1, {'@': 230}), 2: (1, {'@': 230}), 3: (1, {'@': 230}), 57: (1, {'@': 230}), 58: (1, {'@': 230}), 59: (1, {'@': 230}), 8: (1, {'@': 230}), 60: (1, {'@': 230}), 9: (1, {'@': 230}), 11: (1, {'@': 230}), 12: (1, {'@': 230}), 13: (1, {'@': 230}), 62: (1, {'@': 230}), 63: (1, {'@': 230}), 15: (1, {'@': 230}), 64: (1, {'@': 230}), 16: (1, {'@': 230}), 17: (1, {'@': 230}), 66: (1, {'@': 230}), 68: (1, {'@': 230}), 69: (1, {'@': 230}), 70: (1, {'@': 230}), 71: (1, {'@': 230}), 25: (1, {'@': 230}), 73: (1, {'@': 230}), 26: (1, {'@': 230}), 27: (1, {'@': 230}), 1: (1, {'@': 230}), 28: (1, {'@': 230}), 30: (1, {'@': 230}), 74: (1, {'@': 230}), 75: (1, {'@': 230}), 77: (1, {'@': 230}), 78: (1, {'@': 230}), 79: (1, {'@': 230}), 80: (1, {'@': 230}), 81: (1, {'@': 230}), 4: (1, {'@': 230}), 5: (1, {'@': 230}), 82: (1, {'@': 230}), 6: (1, {'@': 230}), 7: (1, {'@': 230}), 84: (1, {'@': 230}), 10: (1, {'@': 230}), 14: (1, {'@': 230}), 85: (1, {'@': 230}), 18: (1, {'@': 230}), 19: (1, {'@': 230}), 86: (1, {'@': 230}), 20: (1, {'@': 230}), 21: (1, {'@': 230}), 87: (1, {'@': 230}), 22: (1, {'@': 230}), 23: (1, {'@': 230}), 24: (1, {'@': 230}), 51: (1, {'@': 230}), 88: (1, {'@': 230}), 89: (1, {'@': 230}), 90: (1, {'@': 230}), 91: (1, {'@': 230}), 29: (1, {'@': 230}), 0: (1, {'@': 230}), 31: (1, {'@': 230}), 93: (1, {'@': 230})}, 233: {144: (0, 137), 98: (0, 541), 94: (0, 239), 54: (1, {'@': 420}), 56: (1, {'@': 420}), 2: (1, {'@': 420}), 3: (1, {'@': 420}), 57: (1, {'@': 420}), 58: (1, {'@': 420}), 59: (1, {'@': 420}), 8: (1, {'@': 420}), 60: (1, {'@': 420}), 9: (1, {'@': 420}), 12: (1, {'@': 420}), 13: (1, {'@': 420}), 64: (1, {'@': 420}), 65: (1, {'@': 420}), 67: (1, {'@': 420}), 95: (1, {'@': 420}), 70: (1, {'@': 420}), 25: (1, {'@': 420}), 72: (1, {'@': 420}), 73: (1, {'@': 420}), 1: (1, {'@': 420}), 28: (1, {'@': 420}), 30: (1, {'@': 420}), 76: (1, {'@': 420}), 78: (1, {'@': 420}), 79: (1, {'@': 420}), 4: (1, {'@': 420}), 5: (1, {'@': 420}), 7: (1, {'@': 420}), 84: (1, {'@': 420}), 97: (1, {'@': 420}), 86: (1, {'@': 420}), 20: (1, {'@': 420}), 87: (1, {'@': 420}), 23: (1, {'@': 420}), 88: (1, {'@': 420}), 89: (1, {'@': 420}), 91: (1, {'@': 420}), 29: (1, {'@': 420}), 0: (1, {'@': 420}), 31: (1, {'@': 420}), 53: (1, {'@': 420}), 55: (1, {'@': 420}), 11: (1, {'@': 420}), 61: (1, {'@': 420}), 62: (1, {'@': 420}), 63: (1, {'@': 420}), 15: (1, {'@': 420}), 16: (1, {'@': 420}), 17: (1, {'@': 420}), 99: (1, {'@': 420}), 66: (1, {'@': 420}), 68: (1, {'@': 420}), 69: (1, {'@': 420}), 71: (1, {'@': 420}), 26: (1, {'@': 420}), 27: (1, {'@': 420}), 74: (1, {'@': 420}), 75: (1, {'@': 420}), 101: (1, {'@': 420}), 77: (1, {'@': 420}), 80: (1, {'@': 420}), 81: (1, {'@': 420}), 82: (1, {'@': 420}), 6: (1, {'@': 420}), 83: (1, {'@': 420}), 102: (1, {'@': 420}), 10: (1, {'@': 420}), 14: (1, {'@': 420}), 85: (1, {'@': 420}), 18: (1, {'@': 420}), 19: (1, {'@': 420}), 104: (1, {'@': 420}), 21: (1, {'@': 420}), 22: (1, {'@': 420}), 24: (1, {'@': 420}), 51: (1, {'@': 420}), 90: (1, {'@': 420}), 92: (1, {'@': 420}), 93: (1, {'@': 420})}, 234: {23: (1, {'@': 182}), 108: (1, {'@': 182}), 51: (1, {'@': 182}), 1: (1, {'@': 182}), 77: (1, {'@': 182}), 53: (1, {'@': 182}), 54: (1, {'@': 182}), 80: (1, {'@': 182}), 81: (1, {'@': 182}), 86: (1, {'@': 182}), 4: (1, {'@': 182}), 71: (1, {'@': 182}), 88: (1, {'@': 182}), 7: (1, {'@': 182}), 58: (1, {'@': 182}), 73: (1, {'@': 182}), 89: (1, {'@': 182}), 60: (1, {'@': 182}), 74: (1, {'@': 182}), 63: (1, {'@': 182}), 14: (1, {'@': 182}), 93: (1, {'@': 182}), 24: (1, {'@': 182}), 29: (1, {'@': 182}), 5: (1, {'@': 182})}, 235: {5: (0, 246), 113: (0, 250), 77: (1, {'@': 367}), 60: (1, {'@': 367}), 53: (1, {'@': 367}), 54: (1, {'@': 367}), 80: (1, {'@': 367}), 93: (1, {'@': 367}), 81: (1, {'@': 367}), 88: (1, {'@': 367}), 4: (1, {'@': 367}), 86: (1, {'@': 367}), 74: (1, {'@': 367}), 63: (1, {'@': 367}), 71: (1, {'@': 367}), 14: (1, {'@': 367}), 7: (1, {'@': 367}), 58: (1, {'@': 367}), 73: (1, {'@': 367}), 89: (1, {'@': 367})}, 236: {23: (1, {'@': 171}), 108: (1, {'@': 171}), 51: (1, {'@': 171}), 1: (1, {'@': 171}), 77: (1, {'@': 171}), 53: (1, {'@': 171}), 54: (1, {'@': 171}), 80: (1, {'@': 171}), 81: (1, {'@': 171}), 86: (1, {'@': 171}), 4: (1, {'@': 171}), 71: (1, {'@': 171}), 88: (1, {'@': 171}), 7: (1, {'@': 171}), 58: (1, {'@': 171}), 73: (1, {'@': 171}), 89: (1, {'@': 171}), 60: (1, {'@': 171}), 74: (1, {'@': 171}), 63: (1, {'@': 171}), 14: (1, {'@': 171}), 93: (1, {'@': 171}), 24: (1, {'@': 171}), 29: (1, {'@': 171}), 5: (1, {'@': 171})}, 237: {22: (0, 667), 48: (0, 483)}, 238: {5: (0, 246), 113: (0, 591)}, 239: {56: (1, {'@': 343}), 54: (1, {'@': 343}), 2: (1, {'@': 343}), 3: (1, {'@': 343}), 57: (1, {'@': 343}), 58: (1, {'@': 343}), 59: (1, {'@': 343}), 8: (1, {'@': 343}), 60: (1, {'@': 343}), 9: (1, {'@': 343}), 12: (1, {'@': 343}), 13: (1, {'@': 343}), 94: (1, {'@': 343}), 64: (1, {'@': 343}), 65: (1, {'@': 343}), 67: (1, {'@': 343}), 95: (1, {'@': 343}), 70: (1, {'@': 343}), 25: (1, {'@': 343}), 72: (1, {'@': 343}), 73: (1, {'@': 343}), 1: (1, {'@': 343}), 28: (1, {'@': 343}), 30: (1, {'@': 343}), 76: (1, {'@': 343}), 78: (1, {'@': 343}), 79: (1, {'@': 343}), 4: (1, {'@': 343}), 5: (1, {'@': 343}), 7: (1, {'@': 343}), 84: (1, {'@': 343}), 97: (1, {'@': 343}), 86: (1, {'@': 343}), 20: (1, {'@': 343}), 87: (1, {'@': 343}), 23: (1, {'@': 343}), 88: (1, {'@': 343}), 98: (1, {'@': 343}), 89: (1, {'@': 343}), 91: (1, {'@': 343}), 29: (1, {'@': 343}), 0: (1, {'@': 343}), 31: (1, {'@': 343}), 53: (1, {'@': 343}), 55: (1, {'@': 343}), 11: (1, {'@': 343}), 61: (1, {'@': 343}), 62: (1, {'@': 343}), 63: (1, {'@': 343}), 15: (1, {'@': 343}), 16: (1, {'@': 343}), 17: (1, {'@': 343}), 99: (1, {'@': 343}), 66: (1, {'@': 343}), 68: (1, {'@': 343}), 69: (1, {'@': 343}), 71: (1, {'@': 343}), 26: (1, {'@': 343}), 27: (1, {'@': 343}), 75: (1, {'@': 343}), 74: (1, {'@': 343}), 101: (1, {'@': 343}), 77: (1, {'@': 343}), 80: (1, {'@': 343}), 81: (1, {'@': 343}), 82: (1, {'@': 343}), 6: (1, {'@': 343}), 83: (1, {'@': 343}), 102: (1, {'@': 343}), 10: (1, {'@': 343}), 14: (1, {'@': 343}), 85: (1, {'@': 343}), 18: (1, {'@': 343}), 19: (1, {'@': 343}), 104: (1, {'@': 343}), 21: (1, {'@': 343}), 22: (1, {'@': 343}), 24: (1, {'@': 343}), 51: (1, {'@': 343}), 90: (1, {'@': 343}), 92: (1, {'@': 343}), 93: (1, {'@': 343})}, 240: {53: (1, {'@': 257}), 54: (1, {'@': 257}), 55: (1, {'@': 257}), 56: (1, {'@': 257}), 2: (1, {'@': 257}), 3: (1, {'@': 257}), 57: (1, {'@': 257}), 58: (1, {'@': 257}), 59: (1, {'@': 257}), 8: (1, {'@': 257}), 60: (1, {'@': 257}), 9: (1, {'@': 257}), 11: (1, {'@': 257}), 12: (1, {'@': 257}), 61: (1, {'@': 257}), 13: (1, {'@': 257}), 62: (1, {'@': 257}), 63: (1, {'@': 257}), 94: (1, {'@': 257}), 15: (1, {'@': 257}), 64: (1, {'@': 257}), 16: (1, {'@': 257}), 17: (1, {'@': 257}), 99: (1, {'@': 257}), 65: (1, {'@': 257}), 66: (1, {'@': 257}), 67: (1, {'@': 257}), 68: (1, {'@': 257}), 69: (1, {'@': 257}), 95: (1, {'@': 257}), 70: (1, {'@': 257}), 71: (1, {'@': 257}), 25: (1, {'@': 257}), 72: (1, {'@': 257}), 73: (1, {'@': 257}), 26: (1, {'@': 257}), 27: (1, {'@': 257}), 1: (1, {'@': 257}), 28: (1, {'@': 257}), 30: (1, {'@': 257}), 74: (1, {'@': 257}), 75: (1, {'@': 257}), 76: (1, {'@': 257}), 101: (1, {'@': 257}), 77: (1, {'@': 257}), 78: (1, {'@': 257}), 79: (1, {'@': 257}), 80: (1, {'@': 257}), 81: (1, {'@': 257}), 4: (1, {'@': 257}), 5: (1, {'@': 257}), 82: (1, {'@': 257}), 6: (1, {'@': 257}), 83: (1, {'@': 257}), 7: (1, {'@': 257}), 102: (1, {'@': 257}), 84: (1, {'@': 257}), 10: (1, {'@': 257}), 97: (1, {'@': 257}), 14: (1, {'@': 257}), 85: (1, {'@': 257}), 18: (1, {'@': 257}), 19: (1, {'@': 257}), 86: (1, {'@': 257}), 20: (1, {'@': 257}), 104: (1, {'@': 257}), 21: (1, {'@': 257}), 87: (1, {'@': 257}), 23: (1, {'@': 257}), 22: (1, {'@': 257}), 24: (1, {'@': 257}), 51: (1, {'@': 257}), 88: (1, {'@': 257}), 98: (1, {'@': 257}), 89: (1, {'@': 257}), 90: (1, {'@': 257}), 91: (1, {'@': 257}), 92: (1, {'@': 257}), 29: (1, {'@': 257}), 0: (1, {'@': 257}), 31: (1, {'@': 257}), 93: (1, {'@': 257}), 96: (1, {'@': 257})}, 241: {5: (0, 385)}, 242: {77: (1, {'@': 201}), 53: (1, {'@': 201}), 54: (1, {'@': 201}), 80: (1, {'@': 201}), 81: (1, {'@': 201}), 86: (1, {'@': 201}), 4: (1, {'@': 201}), 71: (1, {'@': 201}), 88: (1, {'@': 201}), 7: (1, {'@': 201}), 58: (1, {'@': 201}), 73: (1, {'@': 201}), 89: (1, {'@': 201}), 60: (1, {'@': 201}), 74: (1, {'@': 201}), 63: (1, {'@': 201}), 14: (1, {'@': 201}), 93: (1, {'@': 201})}, 243: {53: (1, {'@': 258}), 54: (1, {'@': 258}), 55: (1, {'@': 258}), 56: (1, {'@': 258}), 2: (1, {'@': 258}), 3: (1, {'@': 258}), 57: (1, {'@': 258}), 58: (1, {'@': 258}), 59: (1, {'@': 258}), 8: (1, {'@': 258}), 60: (1, {'@': 258}), 9: (1, {'@': 258}), 11: (1, {'@': 258}), 12: (1, {'@': 258}), 61: (1, {'@': 258}), 13: (1, {'@': 258}), 62: (1, {'@': 258}), 63: (1, {'@': 258}), 94: (1, {'@': 258}), 15: (1, {'@': 258}), 64: (1, {'@': 258}), 16: (1, {'@': 258}), 17: (1, {'@': 258}), 99: (1, {'@': 258}), 65: (1, {'@': 258}), 66: (1, {'@': 258}), 67: (1, {'@': 258}), 68: (1, {'@': 258}), 69: (1, {'@': 258}), 95: (1, {'@': 258}), 70: (1, {'@': 258}), 71: (1, {'@': 258}), 25: (1, {'@': 258}), 72: (1, {'@': 258}), 73: (1, {'@': 258}), 26: (1, {'@': 258}), 27: (1, {'@': 258}), 1: (1, {'@': 258}), 28: (1, {'@': 258}), 30: (1, {'@': 258}), 74: (1, {'@': 258}), 75: (1, {'@': 258}), 76: (1, {'@': 258}), 101: (1, {'@': 258}), 77: (1, {'@': 258}), 78: (1, {'@': 258}), 79: (1, {'@': 258}), 80: (1, {'@': 258}), 81: (1, {'@': 258}), 4: (1, {'@': 258}), 5: (1, {'@': 258}), 82: (1, {'@': 258}), 6: (1, {'@': 258}), 83: (1, {'@': 258}), 7: (1, {'@': 258}), 102: (1, {'@': 258}), 84: (1, {'@': 258}), 10: (1, {'@': 258}), 97: (1, {'@': 258}), 14: (1, {'@': 258}), 85: (1, {'@': 258}), 18: (1, {'@': 258}), 19: (1, {'@': 258}), 86: (1, {'@': 258}), 20: (1, {'@': 258}), 104: (1, {'@': 258}), 21: (1, {'@': 258}), 87: (1, {'@': 258}), 23: (1, {'@': 258}), 22: (1, {'@': 258}), 24: (1, {'@': 258}), 51: (1, {'@': 258}), 88: (1, {'@': 258}), 98: (1, {'@': 258}), 89: (1, {'@': 258}), 90: (1, {'@': 258}), 91: (1, {'@': 258}), 92: (1, {'@': 258}), 29: (1, {'@': 258}), 0: (1, {'@': 258}), 31: (1, {'@': 258}), 93: (1, {'@': 258}), 96: (1, {'@': 258})}, 244: {126: (0, 171), 24: (0, 80), 131: (0, 45), 88: (0, 78)}, 245: {52: (0, 307), 21: (0, 620), 1: (0, 544), 83: (1, {'@': 240}), 92: (1, {'@': 240}), 55: (1, {'@': 240}), 65: (1, {'@': 240}), 67: (1, {'@': 240}), 61: (1, {'@': 240}), 76: (1, {'@': 240}), 72: (1, {'@': 240}), 78: (1, {'@': 240}), 79: (1, {'@': 240})}, 246: {32: (0, 559), 16: (0, 524), 154: (0, 522), 13: (0, 600), 110: (0, 594), 0: (0, 107), 17: (0, 585), 109: (0, 579), 155: (0, 415), 22: (0, 633), 38: (0, 569), 29: (0, 587), 9: (0, 530), 6: (0, 570), 25: (0, 511), 156: (0, 546), 18: (0, 651), 10: (0, 663), 8: (0, 500), 27: (0, 576), 157: (0, 656), 21: (0, 631), 4: (0, 556), 5: (0, 642), 36: (0, 550), 158: (0, 659), 44: (0, 584), 19: (0, 523), 159: (0, 601), 31: (0, 310), 45: (0, 6), 160: (0, 112), 47: (0, 243), 48: (0, 238), 161: (0, 172), 49: (0, 259), 23: (0, 134), 33: (0, 260), 28: (0, 315), 37: (0, 308), 11: (0, 35), 26: (0, 20), 34: (0, 13), 35: (0, 8), 162: (0, 2), 30: (0, 44), 39: (0, 126), 12: (0, 79), 40: (0, 38), 3: (0, 211), 15: (0, 56), 41: (0, 91), 163: (0, 108), 42: (0, 168), 20: (0, 95), 164: (0, 176), 7: (0, 139), 14: (0, 204), 165: (0, 147), 43: (0, 33), 46: (0, 188), 2: (0, 48), 24: (0, 10), 50: (0, 102)}, 247: {5: (0, 246), 113: (0, 250), 88: (1, {'@': 355}), 24: (1, {'@': 355})}, 248: {3: (1, {'@': 328}), 4: (1, {'@': 328}), 5: (1, {'@': 328}), 6: (1, {'@': 328}), 7: (1, {'@': 328}), 8: (1, {'@': 328}), 9: (1, {'@': 328}), 14: (1, {'@': 328}), 17: (1, {'@': 328}), 18: (1, {'@': 328}), 19: (1, {'@': 328}), 20: (1, {'@': 328}), 21: (1, {'@': 328}), 22: (1, {'@': 328}), 23: (1, {'@': 328}), 26: (1, {'@': 328}), 28: (1, {'@': 328}), 29: (1, {'@': 328}), 30: (1, {'@': 328}), 0: (1, {'@': 328})}, 249: {1: (1, {'@': 404}), 79: (1, {'@': 404}), 53: (1, {'@': 404}), 54: (1, {'@': 404}), 56: (1, {'@': 404}), 2: (1, {'@': 404}), 3: (1, {'@': 404}), 57: (1, {'@': 404}), 58: (1, {'@': 404}), 59: (1, {'@': 404}), 8: (1, {'@': 404}), 60: (1, {'@': 404}), 9: (1, {'@': 404}), 11: (1, {'@': 404}), 12: (1, {'@': 404}), 13: (1, {'@': 404}), 62: (1, {'@': 404}), 63: (1, {'@': 404}), 15: (1, {'@': 404}), 64: (1, {'@': 404}), 16: (1, {'@': 404}), 17: (1, {'@': 404}), 66: (1, {'@': 404}), 68: (1, {'@': 404}), 69: (1, {'@': 404}), 70: (1, {'@': 404}), 71: (1, {'@': 404}), 25: (1, {'@': 404}), 73: (1, {'@': 404}), 26: (1, {'@': 404}), 27: (1, {'@': 404}), 28: (1, {'@': 404}), 30: (1, {'@': 404}), 74: (1, {'@': 404}), 75: (1, {'@': 404}), 77: (1, {'@': 404}), 80: (1, {'@': 404}), 81: (1, {'@': 404}), 4: (1, {'@': 404}), 5: (1, {'@': 404}), 82: (1, {'@': 404}), 6: (1, {'@': 404}), 7: (1, {'@': 404}), 84: (1, {'@': 404}), 10: (1, {'@': 404}), 14: (1, {'@': 404}), 85: (1, {'@': 404}), 18: (1, {'@': 404}), 19: (1, {'@': 404}), 86: (1, {'@': 404}), 20: (1, {'@': 404}), 21: (1, {'@': 404}), 87: (1, {'@': 404}), 22: (1, {'@': 404}), 23: (1, {'@': 404}), 24: (1, {'@': 404}), 51: (1, {'@': 404}), 88: (1, {'@': 404}), 89: (1, {'@': 404}), 90: (1, {'@': 404}), 91: (1, {'@': 404}), 29: (1, {'@': 404}), 0: (1, {'@': 404}), 31: (1, {'@': 404}), 93: (1, {'@': 404})}, 250: {77: (1, {'@': 149}), 53: (1, {'@': 149}), 54: (1, {'@': 149}), 80: (1, {'@': 149}), 81: (1, {'@': 149}), 86: (1, {'@': 149}), 4: (1, {'@': 149}), 71: (1, {'@': 149}), 88: (1, {'@': 149}), 7: (1, {'@': 149}), 58: (1, {'@': 149}), 73: (1, {'@': 149}), 89: (1, {'@': 149}), 60: (1, {'@': 149}), 74: (1, {'@': 149}), 63: (1, {'@': 149}), 14: (1, {'@': 149}), 93: (1, {'@': 149}), 24: (1, {'@': 149})}, 251: {83: (0, 135), 115: (0, 447), 1: (0, 660), 92: (1, {'@': 236}), 55: (1, {'@': 236}), 65: (1, {'@': 236}), 67: (1, {'@': 236}), 61: (1, {'@': 236}), 76: (1, {'@': 236}), 72: (1, {'@': 236}), 78: (1, {'@': 236}), 79: (1, {'@': 236})}, 252: {0: (0, 387)}, 253: {22: (0, 464)}, 254: {23: (1, {'@': 181}), 108: (1, {'@': 181}), 51: (1, {'@': 181}), 1: (1, {'@': 181}), 77: (1, {'@': 181}), 53: (1, {'@': 181}), 54: (1, {'@': 181}), 80: (1, {'@': 181}), 81: (1, {'@': 181}), 86: (1, {'@': 181}), 4: (1, {'@': 181}), 71: (1, {'@': 181}), 88: (1, {'@': 181}), 7: (1, {'@': 181}), 58: (1, {'@': 181}), 73: (1, {'@': 181}), 89: (1, {'@': 181}), 60: (1, {'@': 181}), 74: (1, {'@': 181}), 63: (1, {'@': 181}), 14: (1, {'@': 181}), 93: (1, {'@': 181}), 24: (1, {'@': 181}), 29: (1, {'@': 181}), 5: (1, {'@': 181})}, 255: {8: (0, 627)}, 256: {5: (0, 397)}, 257: {151: (0, 341), 92: (0, 434), 1: (0, 30), 55: (1, {'@': 232}), 65: (1, {'@': 232}), 67: (1, {'@': 232}), 61: (1, {'@': 232}), 76: (1, {'@': 232}), 72: (1, {'@': 232}), 78: (1, {'@': 232}), 79: (1, {'@': 232})}, 258: {0: (0, 562), 166: (0, 325)}, 259: {53: (1, {'@': 256}), 54: (1, {'@': 256}), 55: (1, {'@': 256}), 56: (1, {'@': 256}), 2: (1, {'@': 256}), 3: (1, {'@': 256}), 57: (1, {'@': 256}), 58: (1, {'@': 256}), 59: (1, {'@': 256}), 8: (1, {'@': 256}), 60: (1, {'@': 256}), 9: (1, {'@': 256}), 11: (1, {'@': 256}), 12: (1, {'@': 256}), 61: (1, {'@': 256}), 13: (1, {'@': 256}), 62: (1, {'@': 256}), 63: (1, {'@': 256}), 94: (1, {'@': 256}), 15: (1, {'@': 256}), 64: (1, {'@': 256}), 16: (1, {'@': 256}), 17: (1, {'@': 256}), 99: (1, {'@': 256}), 65: (1, {'@': 256}), 66: (1, {'@': 256}), 67: (1, {'@': 256}), 68: (1, {'@': 256}), 69: (1, {'@': 256}), 95: (1, {'@': 256}), 70: (1, {'@': 256}), 71: (1, {'@': 256}), 25: (1, {'@': 256}), 72: (1, {'@': 256}), 73: (1, {'@': 256}), 26: (1, {'@': 256}), 27: (1, {'@': 256}), 1: (1, {'@': 256}), 28: (1, {'@': 256}), 30: (1, {'@': 256}), 74: (1, {'@': 256}), 75: (1, {'@': 256}), 76: (1, {'@': 256}), 101: (1, {'@': 256}), 77: (1, {'@': 256}), 78: (1, {'@': 256}), 79: (1, {'@': 256}), 80: (1, {'@': 256}), 81: (1, {'@': 256}), 4: (1, {'@': 256}), 5: (1, {'@': 256}), 82: (1, {'@': 256}), 6: (1, {'@': 256}), 83: (1, {'@': 256}), 7: (1, {'@': 256}), 102: (1, {'@': 256}), 84: (1, {'@': 256}), 10: (1, {'@': 256}), 97: (1, {'@': 256}), 14: (1, {'@': 256}), 85: (1, {'@': 256}), 18: (1, {'@': 256}), 19: (1, {'@': 256}), 86: (1, {'@': 256}), 20: (1, {'@': 256}), 104: (1, {'@': 256}), 21: (1, {'@': 256}), 87: (1, {'@': 256}), 23: (1, {'@': 256}), 22: (1, {'@': 256}), 24: (1, {'@': 256}), 51: (1, {'@': 256}), 88: (1, {'@': 256}), 98: (1, {'@': 256}), 89: (1, {'@': 256}), 90: (1, {'@': 256}), 91: (1, {'@': 256}), 92: (1, {'@': 256}), 29: (1, {'@': 256}), 0: (1, {'@': 256}), 31: (1, {'@': 256}), 93: (1, {'@': 256})}, 260: {167: (0, 284), 3: (0, 96), 168: (0, 289), 20: (0, 109), 53: (1, {'@': 248}), 54: (1, {'@': 248}), 55: (1, {'@': 248}), 56: (1, {'@': 248}), 2: (1, {'@': 248}), 57: (1, {'@': 248}), 58: (1, {'@': 248}), 59: (1, {'@': 248}), 8: (1, {'@': 248}), 60: (1, {'@': 248}), 9: (1, {'@': 248}), 11: (1, {'@': 248}), 12: (1, {'@': 248}), 61: (1, {'@': 248}), 13: (1, {'@': 248}), 62: (1, {'@': 248}), 63: (1, {'@': 248}), 15: (1, {'@': 248}), 64: (1, {'@': 248}), 16: (1, {'@': 248}), 17: (1, {'@': 248}), 65: (1, {'@': 248}), 66: (1, {'@': 248}), 67: (1, {'@': 248}), 68: (1, {'@': 248}), 69: (1, {'@': 248}), 95: (1, {'@': 248}), 70: (1, {'@': 248}), 71: (1, {'@': 248}), 25: (1, {'@': 248}), 72: (1, {'@': 248}), 73: (1, {'@': 248}), 26: (1, {'@': 248}), 27: (1, {'@': 248}), 1: (1, {'@': 248}), 28: (1, {'@': 248}), 30: (1, {'@': 248}), 74: (1, {'@': 248}), 75: (1, {'@': 248}), 76: (1, {'@': 248}), 101: (1, {'@': 248}), 77: (1, {'@': 248}), 78: (1, {'@': 248}), 79: (1, {'@': 248}), 80: (1, {'@': 248}), 81: (1, {'@': 248}), 4: (1, {'@': 248}), 5: (1, {'@': 248}), 82: (1, {'@': 248}), 6: (1, {'@': 248}), 83: (1, {'@': 248}), 7: (1, {'@': 248}), 84: (1, {'@': 248}), 10: (1, {'@': 248}), 14: (1, {'@': 248}), 85: (1, {'@': 248}), 18: (1, {'@': 248}), 19: (1, {'@': 248}), 86: (1, {'@': 248}), 104: (1, {'@': 248}), 21: (1, {'@': 248}), 87: (1, {'@': 248}), 22: (1, {'@': 248}), 23: (1, {'@': 248}), 24: (1, {'@': 248}), 51: (1, {'@': 248}), 88: (1, {'@': 248}), 89: (1, {'@': 248}), 90: (1, {'@': 248}), 91: (1, {'@': 248}), 92: (1, {'@': 248}), 29: (1, {'@': 248}), 0: (1, {'@': 248}), 31: (1, {'@': 248}), 93: (1, {'@': 248})}, 261: {1: (0, 445)}, 262: {169: (0, 28), 21: (0, 222), 48: (0, 363), 34: (0, 342), 23: (0, 311), 170: (0, 336), 171: (0, 366), 0: (0, 309), 152: (0, 169), 42: (0, 282), 172: (0, 253), 6: (0, 262), 32: (0, 485), 114: (0, 477), 173: (0, 471), 22: (0, 667), 18: (0, 425), 44: (0, 498), 8: (0, 429), 174: (0, 501), 4: (0, 556), 5: (0, 642), 175: (0, 463), 7: (0, 139), 14: (0, 204), 54: (0, 461), 176: (0, 393), 35: (0, 406), 148: (0, 405), 60: (0, 417), 177: (0, 254), 178: (0, 234), 179: (0, 228)}, 263: {24: (0, 83)}, 264: {16: (1, {'@': 323}), 17: (1, {'@': 323}), 18: (1, {'@': 323}), 2: (1, {'@': 323}), 19: (1, {'@': 323}), 3: (1, {'@': 323}), 4: (1, {'@': 323}), 20: (1, {'@': 323}), 21: (1, {'@': 323}), 22: (1, {'@': 323}), 5: (1, {'@': 323}), 23: (1, {'@': 323}), 24: (1, {'@': 323}), 6: (1, {'@': 323}), 25: (1, {'@': 323}), 7: (1, {'@': 323}), 8: (1, {'@': 323}), 9: (1, {'@': 323}), 26: (1, {'@': 323}), 27: (1, {'@': 323}), 10: (1, {'@': 323}), 11: (1, {'@': 323}), 28: (1, {'@': 323}), 29: (1, {'@': 323}), 30: (1, {'@': 323}), 12: (1, {'@': 323}), 0: (1, {'@': 323}), 13: (1, {'@': 323}), 31: (1, {'@': 323}), 14: (1, {'@': 323}), 15: (1, {'@': 323})}, 265: {22: (0, 667), 48: (0, 448)}, 266: {122: (0, 496)}, 267: {24: (0, 19), 180: (0, 244), 126: (0, 247), 131: (0, 318), 88: (0, 78)}, 268: {51: (1, {'@': 222}), 24: (1, {'@': 222}), 2: (1, {'@': 222}), 3: (1, {'@': 222}), 4: (1, {'@': 222}), 5: (1, {'@': 222}), 6: (1, {'@': 222}), 7: (1, {'@': 222}), 8: (1, {'@': 222}), 9: (1, {'@': 222}), 10: (1, {'@': 222}), 11: (1, {'@': 222}), 12: (1, {'@': 222}), 13: (1, {'@': 222}), 14: (1, {'@': 222}), 15: (1, {'@': 222}), 16: (1, {'@': 222}), 17: (1, {'@': 222}), 18: (1, {'@': 222}), 19: (1, {'@': 222}), 20: (1, {'@': 222}), 21: (1, {'@': 222}), 22: (1, {'@': 222}), 23: (1, {'@': 222}), 25: (1, {'@': 222}), 26: (1, {'@': 222}), 27: (1, {'@': 222}), 28: (1, {'@': 222}), 29: (1, {'@': 222}), 30: (1, {'@': 222}), 0: (1, {'@': 222}), 31: (1, {'@': 222}), 1: (1, {'@': 222}), 56: (1, {'@': 222}), 82: (1, {'@': 222}), 57: (1, {'@': 222}), 59: (1, {'@': 222}), 84: (1, {'@': 222}), 62: (1, {'@': 222}), 64: (1, {'@': 222}), 85: (1, {'@': 222}), 66: (1, {'@': 222}), 68: (1, {'@': 222}), 87: (1, {'@': 222}), 69: (1, {'@': 222}), 70: (1, {'@': 222}), 90: (1, {'@': 222}), 91: (1, {'@': 222}), 75: (1, {'@': 222}), 77: (1, {'@': 222}), 53: (1, {'@': 222}), 54: (1, {'@': 222}), 80: (1, {'@': 222}), 81: (1, {'@': 222}), 86: (1, {'@': 222}), 71: (1, {'@': 222}), 88: (1, {'@': 222}), 58: (1, {'@': 222}), 73: (1, {'@': 222}), 89: (1, {'@': 222}), 60: (1, {'@': 222}), 74: (1, {'@': 222}), 63: (1, {'@': 222}), 93: (1, {'@': 222})}, 269: {53: (1, {'@': 265}), 54: (1, {'@': 265}), 55: (1, {'@': 265}), 56: (1, {'@': 265}), 2: (1, {'@': 265}), 3: (1, {'@': 265}), 57: (1, {'@': 265}), 58: (1, {'@': 265}), 59: (1, {'@': 265}), 8: (1, {'@': 265}), 60: (1, {'@': 265}), 9: (1, {'@': 265}), 11: (1, {'@': 265}), 12: (1, {'@': 265}), 61: (1, {'@': 265}), 13: (1, {'@': 265}), 62: (1, {'@': 265}), 63: (1, {'@': 265}), 94: (1, {'@': 265}), 15: (1, {'@': 265}), 64: (1, {'@': 265}), 16: (1, {'@': 265}), 17: (1, {'@': 265}), 99: (1, {'@': 265}), 65: (1, {'@': 265}), 66: (1, {'@': 265}), 67: (1, {'@': 265}), 68: (1, {'@': 265}), 69: (1, {'@': 265}), 95: (1, {'@': 265}), 70: (1, {'@': 265}), 71: (1, {'@': 265}), 96: (1, {'@': 265}), 25: (1, {'@': 265}), 72: (1, {'@': 265}), 73: (1, {'@': 265}), 26: (1, {'@': 265}), 27: (1, {'@': 265}), 1: (1, {'@': 265}), 28: (1, {'@': 265}), 30: (1, {'@': 265}), 74: (1, {'@': 265}), 75: (1, {'@': 265}), 76: (1, {'@': 265}), 101: (1, {'@': 265}), 77: (1, {'@': 265}), 78: (1, {'@': 265}), 79: (1, {'@': 265}), 80: (1, {'@': 265}), 81: (1, {'@': 265}), 4: (1, {'@': 265}), 5: (1, {'@': 265}), 82: (1, {'@': 265}), 6: (1, {'@': 265}), 83: (1, {'@': 265}), 7: (1, {'@': 265}), 102: (1, {'@': 265}), 84: (1, {'@': 265}), 10: (1, {'@': 265}), 103: (1, {'@': 265}), 97: (1, {'@': 265}), 14: (1, {'@': 265}), 85: (1, {'@': 265}), 18: (1, {'@': 265}), 19: (1, {'@': 265}), 86: (1, {'@': 265}), 20: (1, {'@': 265}), 104: (1, {'@': 265}), 21: (1, {'@': 265}), 87: (1, {'@': 265}), 22: (1, {'@': 265}), 23: (1, {'@': 265}), 24: (1, {'@': 265}), 51: (1, {'@': 265}), 88: (1, {'@': 265}), 98: (1, {'@': 265}), 89: (1, {'@': 265}), 90: (1, {'@': 265}), 91: (1, {'@': 265}), 92: (1, {'@': 265}), 29: (1, {'@': 265}), 0: (1, {'@': 265}), 31: (1, {'@': 265}), 93: (1, {'@': 265}), 100: (1, {'@': 265})}, 270: {24: (0, 113)}, 271: {32: (0, 559), 42: (0, 168), 4: (0, 556), 22: (0, 442), 36: (0, 468), 28: (0, 315), 5: (0, 642), 0: (0, 306), 1: (0, 560), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 141: (0, 582), 17: (0, 585), 44: (0, 584), 9: (0, 530), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 48: (0, 238), 18: (0, 651), 146: (0, 85), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 272: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 109: (0, 58), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 273: {2: (1, {'@': 440}), 3: (1, {'@': 440}), 4: (1, {'@': 440}), 5: (1, {'@': 440}), 6: (1, {'@': 440}), 7: (1, {'@': 440}), 8: (1, {'@': 440}), 9: (1, {'@': 440}), 10: (1, {'@': 440}), 11: (1, {'@': 440}), 12: (1, {'@': 440}), 13: (1, {'@': 440}), 14: (1, {'@': 440}), 15: (1, {'@': 440}), 16: (1, {'@': 440}), 17: (1, {'@': 440}), 18: (1, {'@': 440}), 19: (1, {'@': 440}), 20: (1, {'@': 440}), 21: (1, {'@': 440}), 22: (1, {'@': 440}), 23: (1, {'@': 440}), 24: (1, {'@': 440}), 25: (1, {'@': 440}), 26: (1, {'@': 440}), 27: (1, {'@': 440}), 28: (1, {'@': 440}), 29: (1, {'@': 440}), 30: (1, {'@': 440}), 0: (1, {'@': 440}), 31: (1, {'@': 440})}, 274: {6: (0, 262), 148: (0, 431)}, 275: {32: (0, 559), 42: (0, 168), 20: (0, 95), 4: (0, 556), 36: (0, 550), 28: (0, 315), 5: (0, 642), 22: (0, 100), 41: (0, 91), 0: (0, 107), 26: (0, 20), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 33: (0, 371), 21: (0, 631), 6: (0, 570), 3: (0, 211), 47: (0, 243), 48: (0, 238), 18: (0, 651), 49: (0, 259), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 276: {3: (1, {'@': 339}), 4: (1, {'@': 339}), 5: (1, {'@': 339}), 6: (1, {'@': 339}), 7: (1, {'@': 339}), 8: (1, {'@': 339}), 9: (1, {'@': 339}), 14: (1, {'@': 339}), 17: (1, {'@': 339}), 18: (1, {'@': 339}), 19: (1, {'@': 339}), 20: (1, {'@': 339}), 21: (1, {'@': 339}), 22: (1, {'@': 339}), 23: (1, {'@': 339}), 26: (1, {'@': 339}), 28: (1, {'@': 339}), 29: (1, {'@': 339}), 30: (1, {'@': 339}), 0: (1, {'@': 339})}, 277: {22: (0, 667), 48: (0, 605)}, 278: {53: (1, {'@': 269}), 54: (1, {'@': 269}), 55: (1, {'@': 269}), 56: (1, {'@': 269}), 2: (1, {'@': 269}), 3: (1, {'@': 269}), 57: (1, {'@': 269}), 58: (1, {'@': 269}), 59: (1, {'@': 269}), 8: (1, {'@': 269}), 60: (1, {'@': 269}), 9: (1, {'@': 269}), 11: (1, {'@': 269}), 12: (1, {'@': 269}), 61: (1, {'@': 269}), 13: (1, {'@': 269}), 62: (1, {'@': 269}), 63: (1, {'@': 269}), 94: (1, {'@': 269}), 15: (1, {'@': 269}), 64: (1, {'@': 269}), 16: (1, {'@': 269}), 17: (1, {'@': 269}), 99: (1, {'@': 269}), 65: (1, {'@': 269}), 66: (1, {'@': 269}), 67: (1, {'@': 269}), 68: (1, {'@': 269}), 69: (1, {'@': 269}), 95: (1, {'@': 269}), 70: (1, {'@': 269}), 71: (1, {'@': 269}), 96: (1, {'@': 269}), 25: (1, {'@': 269}), 72: (1, {'@': 269}), 73: (1, {'@': 269}), 26: (1, {'@': 269}), 27: (1, {'@': 269}), 1: (1, {'@': 269}), 28: (1, {'@': 269}), 30: (1, {'@': 269}), 74: (1, {'@': 269}), 75: (1, {'@': 269}), 76: (1, {'@': 269}), 101: (1, {'@': 269}), 77: (1, {'@': 269}), 78: (1, {'@': 269}), 79: (1, {'@': 269}), 80: (1, {'@': 269}), 81: (1, {'@': 269}), 4: (1, {'@': 269}), 5: (1, {'@': 269}), 82: (1, {'@': 269}), 6: (1, {'@': 269}), 83: (1, {'@': 269}), 7: (1, {'@': 269}), 102: (1, {'@': 269}), 84: (1, {'@': 269}), 10: (1, {'@': 269}), 103: (1, {'@': 269}), 97: (1, {'@': 269}), 14: (1, {'@': 269}), 85: (1, {'@': 269}), 18: (1, {'@': 269}), 19: (1, {'@': 269}), 86: (1, {'@': 269}), 20: (1, {'@': 269}), 104: (1, {'@': 269}), 21: (1, {'@': 269}), 87: (1, {'@': 269}), 22: (1, {'@': 269}), 23: (1, {'@': 269}), 24: (1, {'@': 269}), 51: (1, {'@': 269}), 88: (1, {'@': 269}), 98: (1, {'@': 269}), 89: (1, {'@': 269}), 90: (1, {'@': 269}), 91: (1, {'@': 269}), 92: (1, {'@': 269}), 29: (1, {'@': 269}), 0: (1, {'@': 269}), 31: (1, {'@': 269}), 93: (1, {'@': 269}), 100: (1, {'@': 269})}, 279: {56: (1, {'@': 352}), 54: (1, {'@': 352}), 2: (1, {'@': 352}), 3: (1, {'@': 352}), 57: (1, {'@': 352}), 58: (1, {'@': 352}), 59: (1, {'@': 352}), 8: (1, {'@': 352}), 60: (1, {'@': 352}), 9: (1, {'@': 352}), 12: (1, {'@': 352}), 13: (1, {'@': 352}), 94: (1, {'@': 352}), 64: (1, {'@': 352}), 65: (1, {'@': 352}), 67: (1, {'@': 352}), 95: (1, {'@': 352}), 70: (1, {'@': 352}), 96: (1, {'@': 352}), 25: (1, {'@': 352}), 72: (1, {'@': 352}), 73: (1, {'@': 352}), 1: (1, {'@': 352}), 28: (1, {'@': 352}), 30: (1, {'@': 352}), 76: (1, {'@': 352}), 78: (1, {'@': 352}), 79: (1, {'@': 352}), 4: (1, {'@': 352}), 5: (1, {'@': 352}), 7: (1, {'@': 352}), 84: (1, {'@': 352}), 97: (1, {'@': 352}), 86: (1, {'@': 352}), 20: (1, {'@': 352}), 87: (1, {'@': 352}), 23: (1, {'@': 352}), 88: (1, {'@': 352}), 98: (1, {'@': 352}), 89: (1, {'@': 352}), 91: (1, {'@': 352}), 29: (1, {'@': 352}), 0: (1, {'@': 352}), 31: (1, {'@': 352}), 53: (1, {'@': 352}), 55: (1, {'@': 352}), 120: (1, {'@': 352}), 11: (1, {'@': 352}), 61: (1, {'@': 352}), 62: (1, {'@': 352}), 63: (1, {'@': 352}), 15: (1, {'@': 352}), 16: (1, {'@': 352}), 17: (1, {'@': 352}), 99: (1, {'@': 352}), 66: (1, {'@': 352}), 68: (1, {'@': 352}), 100: (1, {'@': 352}), 69: (1, {'@': 352}), 71: (1, {'@': 352}), 26: (1, {'@': 352}), 27: (1, {'@': 352}), 75: (1, {'@': 352}), 74: (1, {'@': 352}), 101: (1, {'@': 352}), 121: (1, {'@': 352}), 77: (1, {'@': 352}), 80: (1, {'@': 352}), 81: (1, {'@': 352}), 82: (1, {'@': 352}), 6: (1, {'@': 352}), 83: (1, {'@': 352}), 102: (1, {'@': 352}), 10: (1, {'@': 352}), 103: (1, {'@': 352}), 108: (1, {'@': 352}), 14: (1, {'@': 352}), 85: (1, {'@': 352}), 18: (1, {'@': 352}), 19: (1, {'@': 352}), 104: (1, {'@': 352}), 21: (1, {'@': 352}), 22: (1, {'@': 352}), 24: (1, {'@': 352}), 51: (1, {'@': 352}), 90: (1, {'@': 352}), 92: (1, {'@': 352}), 93: (1, {'@': 352})}, 280: {3: (1, {'@': 332}), 4: (1, {'@': 332}), 5: (1, {'@': 332}), 6: (1, {'@': 332}), 7: (1, {'@': 332}), 8: (1, {'@': 332}), 9: (1, {'@': 332}), 14: (1, {'@': 332}), 17: (1, {'@': 332}), 18: (1, {'@': 332}), 19: (1, {'@': 332}), 20: (1, {'@': 332}), 21: (1, {'@': 332}), 22: (1, {'@': 332}), 23: (1, {'@': 332}), 26: (1, {'@': 332}), 28: (1, {'@': 332}), 29: (1, {'@': 332}), 30: (1, {'@': 332}), 0: (1, {'@': 332})}, 281: {32: (0, 559), 33: (0, 260), 22: (0, 444), 28: (0, 315), 37: (0, 308), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 110: (0, 592), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 282: {120: (0, 513), 22: (0, 286)}, 283: {152: (0, 564), 42: (0, 573), 18: (0, 425), 8: (0, 429), 0: (0, 107)}, 284: {20: (0, 109), 168: (0, 275), 3: (0, 96), 53: (1, {'@': 247}), 54: (1, {'@': 247}), 55: (1, {'@': 247}), 56: (1, {'@': 247}), 2: (1, {'@': 247}), 57: (1, {'@': 247}), 58: (1, {'@': 247}), 59: (1, {'@': 247}), 8: (1, {'@': 247}), 60: (1, {'@': 247}), 9: (1, {'@': 247}), 11: (1, {'@': 247}), 12: (1, {'@': 247}), 61: (1, {'@': 247}), 13: (1, {'@': 247}), 62: (1, {'@': 247}), 63: (1, {'@': 247}), 15: (1, {'@': 247}), 64: (1, {'@': 247}), 16: (1, {'@': 247}), 17: (1, {'@': 247}), 65: (1, {'@': 247}), 66: (1, {'@': 247}), 67: (1, {'@': 247}), 68: (1, {'@': 247}), 69: (1, {'@': 247}), 95: (1, {'@': 247}), 70: (1, {'@': 247}), 71: (1, {'@': 247}), 25: (1, {'@': 247}), 72: (1, {'@': 247}), 73: (1, {'@': 247}), 26: (1, {'@': 247}), 27: (1, {'@': 247}), 1: (1, {'@': 247}), 28: (1, {'@': 247}), 30: (1, {'@': 247}), 74: (1, {'@': 247}), 75: (1, {'@': 247}), 76: (1, {'@': 247}), 101: (1, {'@': 247}), 77: (1, {'@': 247}), 78: (1, {'@': 247}), 79: (1, {'@': 247}), 80: (1, {'@': 247}), 81: (1, {'@': 247}), 4: (1, {'@': 247}), 5: (1, {'@': 247}), 82: (1, {'@': 247}), 6: (1, {'@': 247}), 83: (1, {'@': 247}), 7: (1, {'@': 247}), 84: (1, {'@': 247}), 10: (1, {'@': 247}), 14: (1, {'@': 247}), 85: (1, {'@': 247}), 18: (1, {'@': 247}), 19: (1, {'@': 247}), 86: (1, {'@': 247}), 104: (1, {'@': 247}), 21: (1, {'@': 247}), 87: (1, {'@': 247}), 22: (1, {'@': 247}), 23: (1, {'@': 247}), 24: (1, {'@': 247}), 51: (1, {'@': 247}), 88: (1, {'@': 247}), 89: (1, {'@': 247}), 90: (1, {'@': 247}), 91: (1, {'@': 247}), 92: (1, {'@': 247}), 29: (1, {'@': 247}), 0: (1, {'@': 247}), 31: (1, {'@': 247}), 93: (1, {'@': 247})}, 285: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 109: (0, 349), 50: (0, 102)}, 286: {169: (0, 28), 21: (0, 222), 48: (0, 363), 34: (0, 342), 23: (0, 311), 170: (0, 336), 171: (0, 366), 0: (0, 309), 152: (0, 169), 42: (0, 282), 172: (0, 253), 6: (0, 262), 32: (0, 485), 114: (0, 477), 173: (0, 471), 22: (0, 667), 18: (0, 425), 175: (0, 567), 44: (0, 498), 8: (0, 396), 174: (0, 501), 4: (0, 556), 5: (0, 642), 7: (0, 139), 14: (0, 204), 54: (0, 461), 176: (0, 393), 35: (0, 406), 148: (0, 405), 60: (0, 417), 177: (0, 254), 178: (0, 234), 179: (0, 228), 181: (0, 549)}, 287: {16: (1, {'@': 311}), 17: (1, {'@': 311}), 18: (1, {'@': 311}), 2: (1, {'@': 311}), 19: (1, {'@': 311}), 3: (1, {'@': 311}), 4: (1, {'@': 311}), 20: (1, {'@': 311}), 21: (1, {'@': 311}), 22: (1, {'@': 311}), 5: (1, {'@': 311}), 23: (1, {'@': 311}), 24: (1, {'@': 311}), 6: (1, {'@': 311}), 25: (1, {'@': 311}), 7: (1, {'@': 311}), 8: (1, {'@': 311}), 9: (1, {'@': 311}), 26: (1, {'@': 311}), 27: (1, {'@': 311}), 10: (1, {'@': 311}), 11: (1, {'@': 311}), 28: (1, {'@': 311}), 29: (1, {'@': 311}), 30: (1, {'@': 311}), 12: (1, {'@': 311}), 0: (1, {'@': 311}), 13: (1, {'@': 311}), 31: (1, {'@': 311}), 14: (1, {'@': 311}), 15: (1, {'@': 311})}, 288: {48: (0, 648), 22: (0, 667)}, 289: {32: (0, 559), 42: (0, 168), 20: (0, 95), 4: (0, 556), 36: (0, 550), 28: (0, 315), 5: (0, 642), 22: (0, 100), 41: (0, 91), 0: (0, 107), 26: (0, 20), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 3: (0, 211), 33: (0, 374), 47: (0, 243), 48: (0, 238), 18: (0, 651), 49: (0, 259), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 290: {23: (1, {'@': 177}), 108: (1, {'@': 177}), 51: (1, {'@': 177}), 1: (1, {'@': 177}), 77: (1, {'@': 177}), 53: (1, {'@': 177}), 54: (1, {'@': 177}), 80: (1, {'@': 177}), 81: (1, {'@': 177}), 86: (1, {'@': 177}), 4: (1, {'@': 177}), 71: (1, {'@': 177}), 88: (1, {'@': 177}), 7: (1, {'@': 177}), 58: (1, {'@': 177}), 73: (1, {'@': 177}), 89: (1, {'@': 177}), 60: (1, {'@': 177}), 74: (1, {'@': 177}), 63: (1, {'@': 177}), 14: (1, {'@': 177}), 93: (1, {'@': 177}), 24: (1, {'@': 177}), 29: (1, {'@': 177}), 5: (1, {'@': 177})}, 291: {120: (0, 513), 22: (0, 255)}, 292: {121: (0, 29), 103: (0, 0), 53: (1, {'@': 102}), 54: (1, {'@': 102}), 55: (1, {'@': 102}), 56: (1, {'@': 102}), 2: (1, {'@': 102}), 3: (1, {'@': 102}), 57: (1, {'@': 102}), 58: (1, {'@': 102}), 59: (1, {'@': 102}), 8: (1, {'@': 102}), 60: (1, {'@': 102}), 9: (1, {'@': 102}), 11: (1, {'@': 102}), 12: (1, {'@': 102}), 61: (1, {'@': 102}), 13: (1, {'@': 102}), 62: (1, {'@': 102}), 63: (1, {'@': 102}), 94: (1, {'@': 102}), 15: (1, {'@': 102}), 64: (1, {'@': 102}), 16: (1, {'@': 102}), 17: (1, {'@': 102}), 99: (1, {'@': 102}), 65: (1, {'@': 102}), 66: (1, {'@': 102}), 67: (1, {'@': 102}), 68: (1, {'@': 102}), 69: (1, {'@': 102}), 95: (1, {'@': 102}), 70: (1, {'@': 102}), 71: (1, {'@': 102}), 96: (1, {'@': 102}), 25: (1, {'@': 102}), 72: (1, {'@': 102}), 73: (1, {'@': 102}), 26: (1, {'@': 102}), 27: (1, {'@': 102}), 1: (1, {'@': 102}), 28: (1, {'@': 102}), 30: (1, {'@': 102}), 74: (1, {'@': 102}), 75: (1, {'@': 102}), 76: (1, {'@': 102}), 101: (1, {'@': 102}), 77: (1, {'@': 102}), 78: (1, {'@': 102}), 79: (1, {'@': 102}), 80: (1, {'@': 102}), 81: (1, {'@': 102}), 4: (1, {'@': 102}), 5: (1, {'@': 102}), 82: (1, {'@': 102}), 6: (1, {'@': 102}), 83: (1, {'@': 102}), 7: (1, {'@': 102}), 102: (1, {'@': 102}), 84: (1, {'@': 102}), 10: (1, {'@': 102}), 97: (1, {'@': 102}), 14: (1, {'@': 102}), 85: (1, {'@': 102}), 18: (1, {'@': 102}), 19: (1, {'@': 102}), 86: (1, {'@': 102}), 20: (1, {'@': 102}), 104: (1, {'@': 102}), 21: (1, {'@': 102}), 87: (1, {'@': 102}), 22: (1, {'@': 102}), 23: (1, {'@': 102}), 24: (1, {'@': 102}), 51: (1, {'@': 102}), 88: (1, {'@': 102}), 98: (1, {'@': 102}), 89: (1, {'@': 102}), 90: (1, {'@': 102}), 91: (1, {'@': 102}), 92: (1, {'@': 102}), 29: (1, {'@': 102}), 0: (1, {'@': 102}), 31: (1, {'@': 102}), 93: (1, {'@': 102}), 100: (1, {'@': 102}), 108: (1, {'@': 102}), 120: (1, {'@': 102})}, 293: {5: (1, {'@': 160}), 77: (1, {'@': 160}), 53: (1, {'@': 160}), 54: (1, {'@': 160}), 80: (1, {'@': 160}), 81: (1, {'@': 160}), 86: (1, {'@': 160}), 4: (1, {'@': 160}), 71: (1, {'@': 160}), 88: (1, {'@': 160}), 7: (1, {'@': 160}), 58: (1, {'@': 160}), 73: (1, {'@': 160}), 89: (1, {'@': 160}), 60: (1, {'@': 160}), 74: (1, {'@': 160}), 63: (1, {'@': 160}), 14: (1, {'@': 160}), 93: (1, {'@': 160}), 108: (1, {'@': 160}), 23: (1, {'@': 160}), 24: (1, {'@': 160}), 51: (1, {'@': 160}), 1: (1, {'@': 160}), 29: (1, {'@': 160})}, 294: {77: (1, {'@': 203}), 53: (1, {'@': 203}), 54: (1, {'@': 203}), 80: (1, {'@': 203}), 81: (1, {'@': 203}), 86: (1, {'@': 203}), 4: (1, {'@': 203}), 71: (1, {'@': 203}), 88: (1, {'@': 203}), 7: (1, {'@': 203}), 58: (1, {'@': 203}), 73: (1, {'@': 203}), 89: (1, {'@': 203}), 60: (1, {'@': 203}), 74: (1, {'@': 203}), 63: (1, {'@': 203}), 14: (1, {'@': 203}), 93: (1, {'@': 203})}, 295: {32: (0, 559), 42: (0, 168), 20: (0, 95), 4: (0, 556), 36: (0, 550), 28: (0, 315), 5: (0, 642), 22: (0, 271), 0: (0, 107), 26: (0, 20), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 49: (0, 410), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 3: (0, 211), 47: (0, 243), 48: (0, 238), 18: (0, 651), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 296: {5: (1, {'@': 161}), 77: (1, {'@': 161}), 53: (1, {'@': 161}), 54: (1, {'@': 161}), 80: (1, {'@': 161}), 81: (1, {'@': 161}), 86: (1, {'@': 161}), 4: (1, {'@': 161}), 71: (1, {'@': 161}), 88: (1, {'@': 161}), 7: (1, {'@': 161}), 58: (1, {'@': 161}), 73: (1, {'@': 161}), 89: (1, {'@': 161}), 60: (1, {'@': 161}), 74: (1, {'@': 161}), 63: (1, {'@': 161}), 14: (1, {'@': 161}), 93: (1, {'@': 161}), 108: (1, {'@': 161}), 23: (1, {'@': 161}), 24: (1, {'@': 161}), 51: (1, {'@': 161}), 1: (1, {'@': 161}), 29: (1, {'@': 161})}, 297: {5: (1, {'@': 145}), 77: (1, {'@': 145}), 53: (1, {'@': 145}), 54: (1, {'@': 145}), 80: (1, {'@': 145}), 81: (1, {'@': 145}), 86: (1, {'@': 145}), 4: (1, {'@': 145}), 71: (1, {'@': 145}), 88: (1, {'@': 145}), 7: (1, {'@': 145}), 58: (1, {'@': 145}), 73: (1, {'@': 145}), 89: (1, {'@': 145}), 60: (1, {'@': 145}), 74: (1, {'@': 145}), 63: (1, {'@': 145}), 14: (1, {'@': 145}), 93: (1, {'@': 145}), 23: (1, {'@': 145}), 108: (1, {'@': 145}), 24: (1, {'@': 145}), 51: (1, {'@': 145}), 1: (1, {'@': 145}), 29: (1, {'@': 145})}, 298: {77: (1, {'@': 153}), 53: (1, {'@': 153}), 54: (1, {'@': 153}), 80: (1, {'@': 153}), 81: (1, {'@': 153}), 4: (1, {'@': 153}), 5: (1, {'@': 153}), 7: (1, {'@': 153}), 58: (1, {'@': 153}), 60: (1, {'@': 153}), 63: (1, {'@': 153}), 108: (1, {'@': 153}), 14: (1, {'@': 153}), 86: (1, {'@': 153}), 23: (1, {'@': 153}), 24: (1, {'@': 153}), 51: (1, {'@': 153}), 71: (1, {'@': 153}), 88: (1, {'@': 153}), 73: (1, {'@': 153}), 89: (1, {'@': 153}), 1: (1, {'@': 153}), 29: (1, {'@': 153}), 74: (1, {'@': 153}), 93: (1, {'@': 153})}, 299: {32: (0, 559), 33: (0, 260), 28: (0, 315), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 22: (0, 450), 36: (0, 550), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 46: (0, 611), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 300: {72: (0, 312), 61: (0, 280), 119: (0, 66), 55: (0, 136), 67: (0, 248), 65: (0, 148), 76: (0, 337), 53: (1, {'@': 227}), 54: (1, {'@': 227}), 56: (1, {'@': 227}), 2: (1, {'@': 227}), 3: (1, {'@': 227}), 57: (1, {'@': 227}), 58: (1, {'@': 227}), 59: (1, {'@': 227}), 8: (1, {'@': 227}), 60: (1, {'@': 227}), 9: (1, {'@': 227}), 11: (1, {'@': 227}), 12: (1, {'@': 227}), 13: (1, {'@': 227}), 62: (1, {'@': 227}), 63: (1, {'@': 227}), 15: (1, {'@': 227}), 64: (1, {'@': 227}), 16: (1, {'@': 227}), 17: (1, {'@': 227}), 66: (1, {'@': 227}), 68: (1, {'@': 227}), 69: (1, {'@': 227}), 70: (1, {'@': 227}), 71: (1, {'@': 227}), 25: (1, {'@': 227}), 73: (1, {'@': 227}), 26: (1, {'@': 227}), 27: (1, {'@': 227}), 1: (1, {'@': 227}), 28: (1, {'@': 227}), 30: (1, {'@': 227}), 74: (1, {'@': 227}), 75: (1, {'@': 227}), 77: (1, {'@': 227}), 78: (1, {'@': 227}), 79: (1, {'@': 227}), 80: (1, {'@': 227}), 81: (1, {'@': 227}), 4: (1, {'@': 227}), 5: (1, {'@': 227}), 82: (1, {'@': 227}), 6: (1, {'@': 227}), 7: (1, {'@': 227}), 84: (1, {'@': 227}), 10: (1, {'@': 227}), 14: (1, {'@': 227}), 85: (1, {'@': 227}), 18: (1, {'@': 227}), 19: (1, {'@': 227}), 86: (1, {'@': 227}), 20: (1, {'@': 227}), 21: (1, {'@': 227}), 87: (1, {'@': 227}), 22: (1, {'@': 227}), 23: (1, {'@': 227}), 24: (1, {'@': 227}), 51: (1, {'@': 227}), 88: (1, {'@': 227}), 89: (1, {'@': 227}), 90: (1, {'@': 227}), 91: (1, {'@': 227}), 29: (1, {'@': 227}), 0: (1, {'@': 227}), 31: (1, {'@': 227}), 93: (1, {'@': 227})}, 301: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 109: (0, 671), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 302: {169: (0, 28), 21: (0, 222), 48: (0, 363), 34: (0, 342), 23: (0, 311), 170: (0, 336), 171: (0, 366), 0: (0, 309), 152: (0, 169), 42: (0, 282), 172: (0, 253), 6: (0, 262), 32: (0, 485), 114: (0, 477), 173: (0, 471), 22: (0, 667), 18: (0, 425), 44: (0, 498), 8: (0, 429), 174: (0, 501), 4: (0, 556), 5: (0, 642), 7: (0, 139), 14: (0, 204), 54: (0, 461), 176: (0, 393), 35: (0, 406), 148: (0, 405), 60: (0, 417), 175: (0, 355), 177: (0, 254), 178: (0, 234), 179: (0, 228)}, 303: {77: (1, {'@': 138}), 53: (1, {'@': 138}), 54: (1, {'@': 138}), 80: (1, {'@': 138}), 81: (1, {'@': 138}), 86: (1, {'@': 138}), 4: (1, {'@': 138}), 71: (1, {'@': 138}), 88: (1, {'@': 138}), 7: (1, {'@': 138}), 58: (1, {'@': 138}), 73: (1, {'@': 138}), 89: (1, {'@': 138}), 60: (1, {'@': 138}), 74: (1, {'@': 138}), 63: (1, {'@': 138}), 14: (1, {'@': 138}), 93: (1, {'@': 138}), 5: (1, {'@': 138}), 108: (1, {'@': 138}), 23: (1, {'@': 138}), 24: (1, {'@': 138}), 51: (1, {'@': 138}), 1: (1, {'@': 138}), 29: (1, {'@': 138})}, 304: {169: (0, 28), 21: (0, 222), 48: (0, 363), 34: (0, 342), 23: (0, 311), 170: (0, 336), 171: (0, 366), 0: (0, 309), 152: (0, 169), 42: (0, 282), 172: (0, 253), 175: (0, 606), 6: (0, 262), 32: (0, 485), 114: (0, 477), 173: (0, 471), 22: (0, 667), 18: (0, 425), 44: (0, 498), 8: (0, 429), 174: (0, 501), 4: (0, 556), 5: (0, 642), 7: (0, 139), 14: (0, 204), 54: (0, 461), 176: (0, 393), 35: (0, 406), 148: (0, 405), 60: (0, 417), 177: (0, 254), 178: (0, 234), 179: (0, 228)}, 305: {5: (0, 246), 113: (0, 250)}, 306: {103: (0, 252), 147: (0, 292), 121: (0, 327), 122: (0, 304), 102: (1, {'@': 103}), 99: (1, {'@': 103}), 1: (1, {'@': 103}), 97: (1, {'@': 103}), 22: (1, {'@': 103}), 5: (1, {'@': 103}), 23: (1, {'@': 103}), 94: (1, {'@': 103}), 6: (1, {'@': 103}), 96: (1, {'@': 103}), 98: (1, {'@': 103}), 3: (1, {'@': 103}), 20: (1, {'@': 103}), 104: (1, {'@': 103}), 21: (1, {'@': 103}), 95: (1, {'@': 103}), 83: (1, {'@': 103}), 92: (1, {'@': 103}), 101: (1, {'@': 103}), 55: (1, {'@': 103}), 65: (1, {'@': 103}), 67: (1, {'@': 103}), 76: (1, {'@': 103}), 72: (1, {'@': 103}), 61: (1, {'@': 103}), 78: (1, {'@': 103}), 79: (1, {'@': 103})}, 307: {21: (0, 324), 1: (0, 577), 83: (1, {'@': 239}), 92: (1, {'@': 239}), 55: (1, {'@': 239}), 65: (1, {'@': 239}), 67: (1, {'@': 239}), 61: (1, {'@': 239}), 76: (1, {'@': 239}), 72: (1, {'@': 239}), 78: (1, {'@': 239}), 79: (1, {'@': 239})}, 308: {78: (0, 3), 149: (0, 170), 51: (1, {'@': 224}), 24: (1, {'@': 224}), 79: (1, {'@': 224}), 2: (1, {'@': 224}), 3: (1, {'@': 224}), 4: (1, {'@': 224}), 5: (1, {'@': 224}), 6: (1, {'@': 224}), 7: (1, {'@': 224}), 8: (1, {'@': 224}), 9: (1, {'@': 224}), 10: (1, {'@': 224}), 11: (1, {'@': 224}), 12: (1, {'@': 224}), 13: (1, {'@': 224}), 14: (1, {'@': 224}), 15: (1, {'@': 224}), 16: (1, {'@': 224}), 17: (1, {'@': 224}), 18: (1, {'@': 224}), 19: (1, {'@': 224}), 20: (1, {'@': 224}), 21: (1, {'@': 224}), 22: (1, {'@': 224}), 23: (1, {'@': 224}), 25: (1, {'@': 224}), 26: (1, {'@': 224}), 27: (1, {'@': 224}), 28: (1, {'@': 224}), 29: (1, {'@': 224}), 30: (1, {'@': 224}), 0: (1, {'@': 224}), 31: (1, {'@': 224}), 1: (1, {'@': 224}), 53: (1, {'@': 224}), 54: (1, {'@': 224}), 56: (1, {'@': 224}), 57: (1, {'@': 224}), 58: (1, {'@': 224}), 59: (1, {'@': 224}), 60: (1, {'@': 224}), 62: (1, {'@': 224}), 63: (1, {'@': 224}), 64: (1, {'@': 224}), 66: (1, {'@': 224}), 68: (1, {'@': 224}), 69: (1, {'@': 224}), 70: (1, {'@': 224}), 71: (1, {'@': 224}), 73: (1, {'@': 224}), 74: (1, {'@': 224}), 75: (1, {'@': 224}), 77: (1, {'@': 224}), 80: (1, {'@': 224}), 81: (1, {'@': 224}), 82: (1, {'@': 224}), 84: (1, {'@': 224}), 85: (1, {'@': 224}), 86: (1, {'@': 224}), 87: (1, {'@': 224}), 88: (1, {'@': 224}), 89: (1, {'@': 224}), 90: (1, {'@': 224}), 91: (1, {'@': 224}), 93: (1, {'@': 224})}, 309: {103: (0, 252), 147: (0, 292), 121: (0, 327), 77: (1, {'@': 97}), 53: (1, {'@': 97}), 54: (1, {'@': 97}), 80: (1, {'@': 97}), 81: (1, {'@': 97}), 4: (1, {'@': 97}), 5: (1, {'@': 97}), 7: (1, {'@': 97}), 58: (1, {'@': 97}), 60: (1, {'@': 97}), 63: (1, {'@': 97}), 108: (1, {'@': 97}), 14: (1, {'@': 97}), 86: (1, {'@': 97}), 24: (1, {'@': 97}), 23: (1, {'@': 97}), 51: (1, {'@': 97}), 71: (1, {'@': 97}), 88: (1, {'@': 97}), 73: (1, {'@': 97}), 89: (1, {'@': 97}), 1: (1, {'@': 97}), 29: (1, {'@': 97}), 74: (1, {'@': 97}), 93: (1, {'@': 97}), 22: (1, {'@': 103}), 120: (1, {'@': 103})}, 310: {22: (0, 658)}, 311: {5: (0, 642), 152: (0, 236), 42: (0, 291), 8: (0, 429), 0: (0, 309), 6: (0, 262), 114: (0, 354), 148: (0, 331), 35: (0, 360), 18: (0, 425)}, 312: {3: (1, {'@': 331}), 4: (1, {'@': 331}), 5: (1, {'@': 331}), 6: (1, {'@': 331}), 7: (1, {'@': 331}), 8: (1, {'@': 331}), 9: (1, {'@': 331}), 14: (1, {'@': 331}), 17: (1, {'@': 331}), 18: (1, {'@': 331}), 19: (1, {'@': 331}), 20: (1, {'@': 331}), 21: (1, {'@': 331}), 22: (1, {'@': 331}), 23: (1, {'@': 331}), 26: (1, {'@': 331}), 28: (1, {'@': 331}), 29: (1, {'@': 331}), 30: (1, {'@': 331}), 0: (1, {'@': 331})}, 313: {29: (0, 71), 23: (1, {'@': 106}), 108: (1, {'@': 106}), 51: (1, {'@': 106}), 1: (1, {'@': 106}), 77: (1, {'@': 106}), 53: (1, {'@': 106}), 54: (1, {'@': 106}), 80: (1, {'@': 106}), 81: (1, {'@': 106}), 86: (1, {'@': 106}), 4: (1, {'@': 106}), 71: (1, {'@': 106}), 88: (1, {'@': 106}), 7: (1, {'@': 106}), 58: (1, {'@': 106}), 73: (1, {'@': 106}), 89: (1, {'@': 106}), 60: (1, {'@': 106}), 74: (1, {'@': 106}), 63: (1, {'@': 106}), 14: (1, {'@': 106}), 93: (1, {'@': 106}), 24: (1, {'@': 106}), 122: (1, {'@': 106}), 5: (1, {'@': 106})}, 314: {32: (0, 559), 41: (0, 201), 33: (0, 398), 40: (0, 251), 28: (0, 315), 36: (0, 230), 0: (0, 306), 1: (0, 560), 39: (0, 31), 26: (0, 20), 34: (0, 13), 35: (0, 8), 22: (0, 450), 141: (0, 582), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 45: (0, 245), 6: (0, 570), 21: (0, 631), 3: (0, 211), 18: (0, 651), 146: (0, 85), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 46: (0, 646), 50: (0, 102)}, 315: {53: (1, {'@': 272}), 54: (1, {'@': 272}), 55: (1, {'@': 272}), 56: (1, {'@': 272}), 2: (1, {'@': 272}), 3: (1, {'@': 272}), 57: (1, {'@': 272}), 58: (1, {'@': 272}), 59: (1, {'@': 272}), 8: (1, {'@': 272}), 60: (1, {'@': 272}), 9: (1, {'@': 272}), 11: (1, {'@': 272}), 12: (1, {'@': 272}), 61: (1, {'@': 272}), 13: (1, {'@': 272}), 62: (1, {'@': 272}), 63: (1, {'@': 272}), 94: (1, {'@': 272}), 15: (1, {'@': 272}), 64: (1, {'@': 272}), 16: (1, {'@': 272}), 17: (1, {'@': 272}), 99: (1, {'@': 272}), 65: (1, {'@': 272}), 66: (1, {'@': 272}), 67: (1, {'@': 272}), 68: (1, {'@': 272}), 69: (1, {'@': 272}), 95: (1, {'@': 272}), 70: (1, {'@': 272}), 71: (1, {'@': 272}), 96: (1, {'@': 272}), 25: (1, {'@': 272}), 72: (1, {'@': 272}), 73: (1, {'@': 272}), 26: (1, {'@': 272}), 27: (1, {'@': 272}), 1: (1, {'@': 272}), 28: (1, {'@': 272}), 30: (1, {'@': 272}), 74: (1, {'@': 272}), 75: (1, {'@': 272}), 76: (1, {'@': 272}), 101: (1, {'@': 272}), 77: (1, {'@': 272}), 78: (1, {'@': 272}), 79: (1, {'@': 272}), 80: (1, {'@': 272}), 81: (1, {'@': 272}), 4: (1, {'@': 272}), 5: (1, {'@': 272}), 82: (1, {'@': 272}), 6: (1, {'@': 272}), 83: (1, {'@': 272}), 7: (1, {'@': 272}), 102: (1, {'@': 272}), 84: (1, {'@': 272}), 10: (1, {'@': 272}), 103: (1, {'@': 272}), 97: (1, {'@': 272}), 14: (1, {'@': 272}), 85: (1, {'@': 272}), 18: (1, {'@': 272}), 19: (1, {'@': 272}), 86: (1, {'@': 272}), 20: (1, {'@': 272}), 104: (1, {'@': 272}), 21: (1, {'@': 272}), 87: (1, {'@': 272}), 22: (1, {'@': 272}), 23: (1, {'@': 272}), 24: (1, {'@': 272}), 51: (1, {'@': 272}), 88: (1, {'@': 272}), 98: (1, {'@': 272}), 89: (1, {'@': 272}), 90: (1, {'@': 272}), 91: (1, {'@': 272}), 92: (1, {'@': 272}), 29: (1, {'@': 272}), 0: (1, {'@': 272}), 31: (1, {'@': 272}), 93: (1, {'@': 272}), 100: (1, {'@': 272})}, 316: {29: (0, 557), 23: (1, {'@': 169}), 108: (1, {'@': 169}), 51: (1, {'@': 169}), 1: (1, {'@': 169}), 77: (1, {'@': 169}), 53: (1, {'@': 169}), 54: (1, {'@': 169}), 80: (1, {'@': 169}), 81: (1, {'@': 169}), 86: (1, {'@': 169}), 4: (1, {'@': 169}), 71: (1, {'@': 169}), 88: (1, {'@': 169}), 7: (1, {'@': 169}), 58: (1, {'@': 169}), 73: (1, {'@': 169}), 89: (1, {'@': 169}), 60: (1, {'@': 169}), 74: (1, {'@': 169}), 63: (1, {'@': 169}), 14: (1, {'@': 169}), 93: (1, {'@': 169}), 24: (1, {'@': 169}), 5: (1, {'@': 169})}, 317: {16: (1, {'@': 317}), 17: (1, {'@': 317}), 18: (1, {'@': 317}), 2: (1, {'@': 317}), 19: (1, {'@': 317}), 3: (1, {'@': 317}), 4: (1, {'@': 317}), 20: (1, {'@': 317}), 21: (1, {'@': 317}), 22: (1, {'@': 317}), 5: (1, {'@': 317}), 23: (1, {'@': 317}), 24: (1, {'@': 317}), 6: (1, {'@': 317}), 25: (1, {'@': 317}), 7: (1, {'@': 317}), 8: (1, {'@': 317}), 9: (1, {'@': 317}), 26: (1, {'@': 317}), 27: (1, {'@': 317}), 10: (1, {'@': 317}), 11: (1, {'@': 317}), 28: (1, {'@': 317}), 29: (1, {'@': 317}), 30: (1, {'@': 317}), 12: (1, {'@': 317}), 0: (1, {'@': 317}), 13: (1, {'@': 317}), 31: (1, {'@': 317}), 14: (1, {'@': 317}), 15: (1, {'@': 317})}, 318: {88: (1, {'@': 354}), 24: (1, {'@': 354})}, 319: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 109: (0, 130), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 320: {5: (0, 588)}, 321: {32: (0, 559), 41: (0, 201), 33: (0, 398), 40: (0, 251), 28: (0, 315), 36: (0, 230), 0: (0, 306), 1: (0, 560), 39: (0, 31), 26: (0, 20), 34: (0, 13), 35: (0, 8), 22: (0, 314), 141: (0, 582), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 45: (0, 245), 6: (0, 570), 21: (0, 631), 3: (0, 211), 18: (0, 651), 146: (0, 85), 8: (0, 500), 38: (0, 526), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 257), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 322: {}, 323: {169: (0, 28), 21: (0, 222), 48: (0, 363), 34: (0, 342), 23: (0, 311), 170: (0, 336), 171: (0, 366), 0: (0, 309), 152: (0, 169), 42: (0, 282), 172: (0, 253), 6: (0, 262), 32: (0, 485), 114: (0, 477), 173: (0, 471), 22: (0, 667), 18: (0, 425), 44: (0, 498), 8: (0, 429), 174: (0, 501), 4: (0, 556), 5: (0, 642), 7: (0, 139), 14: (0, 204), 54: (0, 461), 175: (0, 213), 176: (0, 393), 35: (0, 406), 148: (0, 405), 60: (0, 417), 177: (0, 254), 178: (0, 234), 179: (0, 228)}, 324: {32: (0, 559), 33: (0, 260), 20: (0, 95), 42: (0, 168), 36: (0, 550), 28: (0, 315), 5: (0, 642), 4: (0, 556), 22: (0, 465), 41: (0, 91), 26: (0, 20), 34: (0, 13), 0: (0, 107), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 39: (0, 126), 45: (0, 388), 21: (0, 631), 6: (0, 570), 3: (0, 211), 47: (0, 243), 48: (0, 238), 18: (0, 651), 49: (0, 259), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 325: {24: (0, 69)}, 326: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 109: (0, 89), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 327: {0: (0, 59)}, 328: {5: (1, {'@': 111}), 23: (1, {'@': 111}), 108: (1, {'@': 111}), 51: (1, {'@': 111}), 1: (1, {'@': 111}), 77: (1, {'@': 111}), 53: (1, {'@': 111}), 54: (1, {'@': 111}), 80: (1, {'@': 111}), 81: (1, {'@': 111}), 86: (1, {'@': 111}), 4: (1, {'@': 111}), 71: (1, {'@': 111}), 88: (1, {'@': 111}), 7: (1, {'@': 111}), 58: (1, {'@': 111}), 73: (1, {'@': 111}), 89: (1, {'@': 111}), 60: (1, {'@': 111}), 74: (1, {'@': 111}), 63: (1, {'@': 111}), 14: (1, {'@': 111}), 93: (1, {'@': 111}), 24: (1, {'@': 111}), 29: (1, {'@': 111})}, 329: {182: (0, 322), 183: (0, 339), 184: (0, 357)}, 330: {16: (1, {'@': 303}), 17: (1, {'@': 303}), 18: (1, {'@': 303}), 2: (1, {'@': 303}), 19: (1, {'@': 303}), 3: (1, {'@': 303}), 4: (1, {'@': 303}), 20: (1, {'@': 303}), 21: (1, {'@': 303}), 22: (1, {'@': 303}), 5: (1, {'@': 303}), 23: (1, {'@': 303}), 24: (1, {'@': 303}), 6: (1, {'@': 303}), 25: (1, {'@': 303}), 7: (1, {'@': 303}), 8: (1, {'@': 303}), 9: (1, {'@': 303}), 26: (1, {'@': 303}), 27: (1, {'@': 303}), 10: (1, {'@': 303}), 11: (1, {'@': 303}), 28: (1, {'@': 303}), 29: (1, {'@': 303}), 30: (1, {'@': 303}), 12: (1, {'@': 303}), 0: (1, {'@': 303}), 13: (1, {'@': 303}), 31: (1, {'@': 303}), 14: (1, {'@': 303}), 15: (1, {'@': 303})}, 331: {23: (1, {'@': 166}), 108: (1, {'@': 166}), 51: (1, {'@': 166}), 1: (1, {'@': 166}), 77: (1, {'@': 166}), 53: (1, {'@': 166}), 54: (1, {'@': 166}), 80: (1, {'@': 166}), 81: (1, {'@': 166}), 86: (1, {'@': 166}), 4: (1, {'@': 166}), 71: (1, {'@': 166}), 88: (1, {'@': 166}), 7: (1, {'@': 166}), 58: (1, {'@': 166}), 73: (1, {'@': 166}), 89: (1, {'@': 166}), 60: (1, {'@': 166}), 74: (1, {'@': 166}), 63: (1, {'@': 166}), 14: (1, {'@': 166}), 93: (1, {'@': 166}), 24: (1, {'@': 166}), 29: (1, {'@': 166}), 5: (1, {'@': 166})}, 332: {120: (0, 513), 22: (0, 470)}, 333: {16: (1, {'@': 320}), 17: (1, {'@': 320}), 18: (1, {'@': 320}), 2: (1, {'@': 320}), 19: (1, {'@': 320}), 3: (1, {'@': 320}), 4: (1, {'@': 320}), 20: (1, {'@': 320}), 21: (1, {'@': 320}), 22: (1, {'@': 320}), 5: (1, {'@': 320}), 23: (1, {'@': 320}), 24: (1, {'@': 320}), 6: (1, {'@': 320}), 25: (1, {'@': 320}), 7: (1, {'@': 320}), 8: (1, {'@': 320}), 9: (1, {'@': 320}), 26: (1, {'@': 320}), 27: (1, {'@': 320}), 10: (1, {'@': 320}), 11: (1, {'@': 320}), 28: (1, {'@': 320}), 29: (1, {'@': 320}), 30: (1, {'@': 320}), 12: (1, {'@': 320}), 0: (1, {'@': 320}), 13: (1, {'@': 320}), 31: (1, {'@': 320}), 14: (1, {'@': 320}), 15: (1, {'@': 320})}, 334: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 109: (0, 191), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 335: {88: (1, {'@': 362}), 24: (1, {'@': 362})}, 336: {23: (1, {'@': 183}), 108: (1, {'@': 183}), 51: (1, {'@': 183}), 1: (1, {'@': 183}), 77: (1, {'@': 183}), 53: (1, {'@': 183}), 54: (1, {'@': 183}), 80: (1, {'@': 183}), 81: (1, {'@': 183}), 86: (1, {'@': 183}), 4: (1, {'@': 183}), 71: (1, {'@': 183}), 88: (1, {'@': 183}), 7: (1, {'@': 183}), 58: (1, {'@': 183}), 73: (1, {'@': 183}), 89: (1, {'@': 183}), 60: (1, {'@': 183}), 74: (1, {'@': 183}), 63: (1, {'@': 183}), 14: (1, {'@': 183}), 93: (1, {'@': 183}), 24: (1, {'@': 183}), 29: (1, {'@': 183}), 5: (1, {'@': 183})}, 337: {3: (1, {'@': 330}), 4: (1, {'@': 330}), 5: (1, {'@': 330}), 6: (1, {'@': 330}), 7: (1, {'@': 330}), 8: (1, {'@': 330}), 9: (1, {'@': 330}), 14: (1, {'@': 330}), 17: (1, {'@': 330}), 18: (1, {'@': 330}), 19: (1, {'@': 330}), 20: (1, {'@': 330}), 21: (1, {'@': 330}), 22: (1, {'@': 330}), 23: (1, {'@': 330}), 26: (1, {'@': 330}), 28: (1, {'@': 330}), 29: (1, {'@': 330}), 30: (1, {'@': 330}), 0: (1, {'@': 330})}, 338: {29: (0, 290), 23: (1, {'@': 178}), 108: (1, {'@': 178}), 51: (1, {'@': 178}), 1: (1, {'@': 178}), 77: (1, {'@': 178}), 53: (1, {'@': 178}), 54: (1, {'@': 178}), 80: (1, {'@': 178}), 81: (1, {'@': 178}), 86: (1, {'@': 178}), 4: (1, {'@': 178}), 71: (1, {'@': 178}), 88: (1, {'@': 178}), 7: (1, {'@': 178}), 58: (1, {'@': 178}), 73: (1, {'@': 178}), 89: (1, {'@': 178}), 60: (1, {'@': 178}), 74: (1, {'@': 178}), 63: (1, {'@': 178}), 14: (1, {'@': 178}), 93: (1, {'@': 178}), 24: (1, {'@': 178}), 5: (1, {'@': 178})}, 339: {73: (0, 140), 74: (0, 106), 139: (0, 82), 185: (0, 65), 127: (0, 146), 129: (0, 143), 124: (0, 131), 130: (0, 111), 89: (0, 72), 138: (0, 17), 133: (0, 16), 58: (0, 114), 135: (0, 116), 140: (0, 90), 132: (0, 76), 131: (0, 34), 136: (0, 18), 71: (0, 133), 53: (0, 120), 137: (0, 122), 77: (0, 98), 80: (0, 4), 134: (0, 123), 14: (0, 138), 54: (0, 105), 123: (0, 54), 93: (0, 60), 88: (0, 78), 60: (0, 32), 7: (0, 101), 63: (0, 64), 4: (0, 42), 128: (0, 22), 86: (0, 7), 125: (0, 9), 126: (0, 235), 81: (1, {'@': 209})}, 340: {24: (0, 369), 126: (0, 305), 131: (0, 21), 88: (0, 78)}, 341: {92: (0, 299), 1: (0, 593), 55: (1, {'@': 231}), 65: (1, {'@': 231}), 67: (1, {'@': 231}), 61: (1, {'@': 231}), 76: (1, {'@': 231}), 72: (1, {'@': 231}), 78: (1, {'@': 231}), 79: (1, {'@': 231})}, 342: {23: (1, {'@': 185}), 108: (1, {'@': 185}), 51: (1, {'@': 185}), 1: (1, {'@': 185}), 77: (1, {'@': 185}), 53: (1, {'@': 185}), 54: (1, {'@': 185}), 80: (1, {'@': 185}), 81: (1, {'@': 185}), 86: (1, {'@': 185}), 4: (1, {'@': 185}), 71: (1, {'@': 185}), 88: (1, {'@': 185}), 7: (1, {'@': 185}), 58: (1, {'@': 185}), 73: (1, {'@': 185}), 89: (1, {'@': 185}), 60: (1, {'@': 185}), 74: (1, {'@': 185}), 63: (1, {'@': 185}), 14: (1, {'@': 185}), 93: (1, {'@': 185}), 24: (1, {'@': 185}), 29: (1, {'@': 185}), 5: (1, {'@': 185})}, 343: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 109: (0, 151), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 344: {53: (1, {'@': 250}), 54: (1, {'@': 250}), 55: (1, {'@': 250}), 56: (1, {'@': 250}), 2: (1, {'@': 250}), 3: (1, {'@': 250}), 57: (1, {'@': 250}), 58: (1, {'@': 250}), 59: (1, {'@': 250}), 8: (1, {'@': 250}), 60: (1, {'@': 250}), 9: (1, {'@': 250}), 11: (1, {'@': 250}), 12: (1, {'@': 250}), 61: (1, {'@': 250}), 13: (1, {'@': 250}), 62: (1, {'@': 250}), 63: (1, {'@': 250}), 15: (1, {'@': 250}), 64: (1, {'@': 250}), 16: (1, {'@': 250}), 17: (1, {'@': 250}), 65: (1, {'@': 250}), 66: (1, {'@': 250}), 67: (1, {'@': 250}), 68: (1, {'@': 250}), 69: (1, {'@': 250}), 95: (1, {'@': 250}), 70: (1, {'@': 250}), 71: (1, {'@': 250}), 25: (1, {'@': 250}), 72: (1, {'@': 250}), 73: (1, {'@': 250}), 26: (1, {'@': 250}), 27: (1, {'@': 250}), 1: (1, {'@': 250}), 28: (1, {'@': 250}), 30: (1, {'@': 250}), 74: (1, {'@': 250}), 75: (1, {'@': 250}), 76: (1, {'@': 250}), 101: (1, {'@': 250}), 77: (1, {'@': 250}), 78: (1, {'@': 250}), 79: (1, {'@': 250}), 80: (1, {'@': 250}), 81: (1, {'@': 250}), 4: (1, {'@': 250}), 5: (1, {'@': 250}), 82: (1, {'@': 250}), 6: (1, {'@': 250}), 83: (1, {'@': 250}), 7: (1, {'@': 250}), 84: (1, {'@': 250}), 10: (1, {'@': 250}), 14: (1, {'@': 250}), 85: (1, {'@': 250}), 18: (1, {'@': 250}), 19: (1, {'@': 250}), 86: (1, {'@': 250}), 20: (1, {'@': 250}), 104: (1, {'@': 250}), 21: (1, {'@': 250}), 87: (1, {'@': 250}), 22: (1, {'@': 250}), 23: (1, {'@': 250}), 24: (1, {'@': 250}), 51: (1, {'@': 250}), 88: (1, {'@': 250}), 89: (1, {'@': 250}), 90: (1, {'@': 250}), 91: (1, {'@': 250}), 92: (1, {'@': 250}), 29: (1, {'@': 250}), 0: (1, {'@': 250}), 31: (1, {'@': 250}), 93: (1, {'@': 250})}, 345: {141: (0, 582), 146: (0, 263), 0: (0, 177)}, 346: {32: (0, 559), 109: (0, 365), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 116: (0, 540), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 1: (0, 404), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 347: {79: (0, 281), 51: (1, {'@': 219}), 24: (1, {'@': 219}), 2: (1, {'@': 219}), 3: (1, {'@': 219}), 4: (1, {'@': 219}), 5: (1, {'@': 219}), 6: (1, {'@': 219}), 7: (1, {'@': 219}), 8: (1, {'@': 219}), 9: (1, {'@': 219}), 10: (1, {'@': 219}), 11: (1, {'@': 219}), 12: (1, {'@': 219}), 13: (1, {'@': 219}), 14: (1, {'@': 219}), 15: (1, {'@': 219}), 16: (1, {'@': 219}), 17: (1, {'@': 219}), 18: (1, {'@': 219}), 19: (1, {'@': 219}), 20: (1, {'@': 219}), 21: (1, {'@': 219}), 22: (1, {'@': 219}), 23: (1, {'@': 219}), 25: (1, {'@': 219}), 26: (1, {'@': 219}), 27: (1, {'@': 219}), 28: (1, {'@': 219}), 29: (1, {'@': 219}), 30: (1, {'@': 219}), 0: (1, {'@': 219}), 31: (1, {'@': 219}), 1: (1, {'@': 219}), 56: (1, {'@': 219}), 82: (1, {'@': 219}), 57: (1, {'@': 219}), 59: (1, {'@': 219}), 84: (1, {'@': 219}), 62: (1, {'@': 219}), 64: (1, {'@': 219}), 85: (1, {'@': 219}), 66: (1, {'@': 219}), 68: (1, {'@': 219}), 87: (1, {'@': 219}), 69: (1, {'@': 219}), 70: (1, {'@': 219}), 90: (1, {'@': 219}), 91: (1, {'@': 219}), 75: (1, {'@': 219}), 77: (1, {'@': 219}), 53: (1, {'@': 219}), 54: (1, {'@': 219}), 80: (1, {'@': 219}), 81: (1, {'@': 219}), 86: (1, {'@': 219}), 71: (1, {'@': 219}), 88: (1, {'@': 219}), 58: (1, {'@': 219}), 73: (1, {'@': 219}), 89: (1, {'@': 219}), 60: (1, {'@': 219}), 74: (1, {'@': 219}), 63: (1, {'@': 219}), 93: (1, {'@': 219})}, 348: {100: (0, 303)}, 349: {16: (1, {'@': 315}), 17: (1, {'@': 315}), 18: (1, {'@': 315}), 2: (1, {'@': 315}), 19: (1, {'@': 315}), 3: (1, {'@': 315}), 4: (1, {'@': 315}), 20: (1, {'@': 315}), 21: (1, {'@': 315}), 22: (1, {'@': 315}), 5: (1, {'@': 315}), 23: (1, {'@': 315}), 24: (1, {'@': 315}), 6: (1, {'@': 315}), 25: (1, {'@': 315}), 7: (1, {'@': 315}), 8: (1, {'@': 315}), 9: (1, {'@': 315}), 26: (1, {'@': 315}), 27: (1, {'@': 315}), 10: (1, {'@': 315}), 11: (1, {'@': 315}), 28: (1, {'@': 315}), 29: (1, {'@': 315}), 30: (1, {'@': 315}), 12: (1, {'@': 315}), 0: (1, {'@': 315}), 13: (1, {'@': 315}), 31: (1, {'@': 315}), 14: (1, {'@': 315}), 15: (1, {'@': 315})}, 350: {32: (0, 559), 109: (0, 365), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 116: (0, 376), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 351: {29: (0, 208), 23: (1, {'@': 174}), 108: (1, {'@': 174}), 51: (1, {'@': 174}), 1: (1, {'@': 174}), 77: (1, {'@': 174}), 53: (1, {'@': 174}), 54: (1, {'@': 174}), 80: (1, {'@': 174}), 81: (1, {'@': 174}), 86: (1, {'@': 174}), 4: (1, {'@': 174}), 71: (1, {'@': 174}), 88: (1, {'@': 174}), 7: (1, {'@': 174}), 58: (1, {'@': 174}), 73: (1, {'@': 174}), 89: (1, {'@': 174}), 60: (1, {'@': 174}), 74: (1, {'@': 174}), 63: (1, {'@': 174}), 14: (1, {'@': 174}), 93: (1, {'@': 174}), 24: (1, {'@': 174}), 5: (1, {'@': 174})}, 352: {53: (1, {'@': 268}), 54: (1, {'@': 268}), 55: (1, {'@': 268}), 56: (1, {'@': 268}), 2: (1, {'@': 268}), 3: (1, {'@': 268}), 57: (1, {'@': 268}), 58: (1, {'@': 268}), 59: (1, {'@': 268}), 8: (1, {'@': 268}), 60: (1, {'@': 268}), 9: (1, {'@': 268}), 11: (1, {'@': 268}), 12: (1, {'@': 268}), 61: (1, {'@': 268}), 13: (1, {'@': 268}), 62: (1, {'@': 268}), 63: (1, {'@': 268}), 94: (1, {'@': 268}), 15: (1, {'@': 268}), 64: (1, {'@': 268}), 16: (1, {'@': 268}), 17: (1, {'@': 268}), 99: (1, {'@': 268}), 65: (1, {'@': 268}), 66: (1, {'@': 268}), 67: (1, {'@': 268}), 68: (1, {'@': 268}), 69: (1, {'@': 268}), 95: (1, {'@': 268}), 70: (1, {'@': 268}), 71: (1, {'@': 268}), 96: (1, {'@': 268}), 25: (1, {'@': 268}), 72: (1, {'@': 268}), 73: (1, {'@': 268}), 26: (1, {'@': 268}), 27: (1, {'@': 268}), 1: (1, {'@': 268}), 28: (1, {'@': 268}), 30: (1, {'@': 268}), 74: (1, {'@': 268}), 75: (1, {'@': 268}), 76: (1, {'@': 268}), 101: (1, {'@': 268}), 77: (1, {'@': 268}), 78: (1, {'@': 268}), 79: (1, {'@': 268}), 80: (1, {'@': 268}), 81: (1, {'@': 268}), 4: (1, {'@': 268}), 5: (1, {'@': 268}), 82: (1, {'@': 268}), 6: (1, {'@': 268}), 83: (1, {'@': 268}), 7: (1, {'@': 268}), 102: (1, {'@': 268}), 84: (1, {'@': 268}), 10: (1, {'@': 268}), 103: (1, {'@': 268}), 97: (1, {'@': 268}), 14: (1, {'@': 268}), 85: (1, {'@': 268}), 18: (1, {'@': 268}), 19: (1, {'@': 268}), 86: (1, {'@': 268}), 20: (1, {'@': 268}), 104: (1, {'@': 268}), 21: (1, {'@': 268}), 87: (1, {'@': 268}), 22: (1, {'@': 268}), 23: (1, {'@': 268}), 24: (1, {'@': 268}), 51: (1, {'@': 268}), 88: (1, {'@': 268}), 98: (1, {'@': 268}), 89: (1, {'@': 268}), 90: (1, {'@': 268}), 91: (1, {'@': 268}), 92: (1, {'@': 268}), 29: (1, {'@': 268}), 0: (1, {'@': 268}), 31: (1, {'@': 268}), 93: (1, {'@': 268}), 100: (1, {'@': 268})}, 353: {20: (0, 109), 1: (0, 503), 168: (0, 275), 3: (0, 96), 83: (1, {'@': 247}), 92: (1, {'@': 247}), 104: (1, {'@': 247}), 21: (1, {'@': 247}), 95: (1, {'@': 247}), 101: (1, {'@': 247}), 55: (1, {'@': 247}), 65: (1, {'@': 247}), 67: (1, {'@': 247}), 61: (1, {'@': 247}), 76: (1, {'@': 247}), 72: (1, {'@': 247}), 78: (1, {'@': 247}), 79: (1, {'@': 247})}, 354: {23: (1, {'@': 105}), 108: (1, {'@': 105}), 51: (1, {'@': 105}), 1: (1, {'@': 105}), 77: (1, {'@': 105}), 53: (1, {'@': 105}), 54: (1, {'@': 105}), 80: (1, {'@': 105}), 81: (1, {'@': 105}), 86: (1, {'@': 105}), 4: (1, {'@': 105}), 71: (1, {'@': 105}), 88: (1, {'@': 105}), 7: (1, {'@': 105}), 58: (1, {'@': 105}), 73: (1, {'@': 105}), 89: (1, {'@': 105}), 60: (1, {'@': 105}), 74: (1, {'@': 105}), 63: (1, {'@': 105}), 14: (1, {'@': 105}), 93: (1, {'@': 105}), 24: (1, {'@': 105}), 122: (1, {'@': 105}), 5: (1, {'@': 105}), 29: (1, {'@': 105})}, 355: {77: (1, {'@': 202}), 53: (1, {'@': 202}), 54: (1, {'@': 202}), 80: (1, {'@': 202}), 81: (1, {'@': 202}), 86: (1, {'@': 202}), 4: (1, {'@': 202}), 71: (1, {'@': 202}), 88: (1, {'@': 202}), 7: (1, {'@': 202}), 58: (1, {'@': 202}), 73: (1, {'@': 202}), 89: (1, {'@': 202}), 60: (1, {'@': 202}), 74: (1, {'@': 202}), 63: (1, {'@': 202}), 14: (1, {'@': 202}), 93: (1, {'@': 202})}, 356: {18: (0, 634)}, 357: {42: (0, 12), 0: (0, 107)}, 358: {23: (1, {'@': 116}), 108: (1, {'@': 116}), 51: (1, {'@': 116}), 1: (1, {'@': 116}), 77: (1, {'@': 116}), 53: (1, {'@': 116}), 54: (1, {'@': 116}), 80: (1, {'@': 116}), 81: (1, {'@': 116}), 86: (1, {'@': 116}), 4: (1, {'@': 116}), 71: (1, {'@': 116}), 88: (1, {'@': 116}), 7: (1, {'@': 116}), 58: (1, {'@': 116}), 73: (1, {'@': 116}), 89: (1, {'@': 116}), 60: (1, {'@': 116}), 74: (1, {'@': 116}), 63: (1, {'@': 116}), 14: (1, {'@': 116}), 93: (1, {'@': 116}), 24: (1, {'@': 116}), 29: (1, {'@': 116}), 5: (1, {'@': 116})}, 359: {24: (0, 88)}, 360: {23: (1, {'@': 175}), 108: (1, {'@': 175}), 51: (1, {'@': 175}), 1: (1, {'@': 175}), 77: (1, {'@': 175}), 53: (1, {'@': 175}), 54: (1, {'@': 175}), 80: (1, {'@': 175}), 81: (1, {'@': 175}), 86: (1, {'@': 175}), 4: (1, {'@': 175}), 71: (1, {'@': 175}), 88: (1, {'@': 175}), 7: (1, {'@': 175}), 58: (1, {'@': 175}), 73: (1, {'@': 175}), 89: (1, {'@': 175}), 60: (1, {'@': 175}), 74: (1, {'@': 175}), 63: (1, {'@': 175}), 14: (1, {'@': 175}), 93: (1, {'@': 175}), 24: (1, {'@': 175}), 29: (1, {'@': 175}), 5: (1, {'@': 175})}, 361: {32: (0, 559), 33: (0, 260), 28: (0, 315), 0: (0, 107), 26: (0, 20), 34: (0, 13), 22: (0, 314), 35: (0, 8), 36: (0, 550), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 45: (0, 6), 46: (0, 188), 47: (0, 243), 48: (0, 238), 49: (0, 259), 38: (0, 449), 23: (0, 134), 50: (0, 102)}, 362: {99: (0, 276), 1: (0, 543), 23: (0, 125), 97: (0, 195), 145: (0, 552), 102: (0, 129), 101: (1, {'@': 251}), 92: (1, {'@': 251}), 3: (1, {'@': 251}), 20: (1, {'@': 251}), 104: (1, {'@': 251}), 21: (1, {'@': 251}), 95: (1, {'@': 251}), 83: (1, {'@': 251}), 55: (1, {'@': 251}), 65: (1, {'@': 251}), 67: (1, {'@': 251}), 72: (1, {'@': 251}), 61: (1, {'@': 251}), 76: (1, {'@': 251}), 78: (1, {'@': 251}), 79: (1, {'@': 251})}, 363: {23: (1, {'@': 170}), 108: (1, {'@': 170}), 51: (1, {'@': 170}), 1: (1, {'@': 170}), 77: (1, {'@': 170}), 53: (1, {'@': 170}), 54: (1, {'@': 170}), 80: (1, {'@': 170}), 81: (1, {'@': 170}), 86: (1, {'@': 170}), 4: (1, {'@': 170}), 71: (1, {'@': 170}), 88: (1, {'@': 170}), 7: (1, {'@': 170}), 58: (1, {'@': 170}), 73: (1, {'@': 170}), 89: (1, {'@': 170}), 60: (1, {'@': 170}), 74: (1, {'@': 170}), 63: (1, {'@': 170}), 14: (1, {'@': 170}), 93: (1, {'@': 170}), 24: (1, {'@': 170}), 29: (1, {'@': 170}), 5: (1, {'@': 170})}, 364: {32: (0, 559), 109: (0, 365), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 116: (0, 662), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 365: {186: (0, 608), 51: (0, 408), 24: (1, {'@': 211}), 1: (1, {'@': 211})}, 366: {23: (1, {'@': 137}), 108: (1, {'@': 137}), 51: (1, {'@': 137}), 1: (1, {'@': 137}), 77: (1, {'@': 137}), 53: (1, {'@': 137}), 54: (1, {'@': 137}), 80: (1, {'@': 137}), 81: (1, {'@': 137}), 86: (1, {'@': 137}), 4: (1, {'@': 137}), 71: (1, {'@': 137}), 88: (1, {'@': 137}), 7: (1, {'@': 137}), 58: (1, {'@': 137}), 73: (1, {'@': 137}), 89: (1, {'@': 137}), 60: (1, {'@': 137}), 74: (1, {'@': 137}), 63: (1, {'@': 137}), 14: (1, {'@': 137}), 93: (1, {'@': 137}), 24: (1, {'@': 137}), 29: (1, {'@': 137}), 5: (1, {'@': 137})}, 367: {53: (1, {'@': 254}), 54: (1, {'@': 254}), 55: (1, {'@': 254}), 56: (1, {'@': 254}), 2: (1, {'@': 254}), 3: (1, {'@': 254}), 57: (1, {'@': 254}), 58: (1, {'@': 254}), 59: (1, {'@': 254}), 8: (1, {'@': 254}), 60: (1, {'@': 254}), 9: (1, {'@': 254}), 11: (1, {'@': 254}), 12: (1, {'@': 254}), 61: (1, {'@': 254}), 13: (1, {'@': 254}), 62: (1, {'@': 254}), 63: (1, {'@': 254}), 15: (1, {'@': 254}), 64: (1, {'@': 254}), 16: (1, {'@': 254}), 17: (1, {'@': 254}), 65: (1, {'@': 254}), 66: (1, {'@': 254}), 67: (1, {'@': 254}), 68: (1, {'@': 254}), 69: (1, {'@': 254}), 95: (1, {'@': 254}), 70: (1, {'@': 254}), 71: (1, {'@': 254}), 25: (1, {'@': 254}), 72: (1, {'@': 254}), 73: (1, {'@': 254}), 26: (1, {'@': 254}), 27: (1, {'@': 254}), 1: (1, {'@': 254}), 28: (1, {'@': 254}), 30: (1, {'@': 254}), 74: (1, {'@': 254}), 75: (1, {'@': 254}), 76: (1, {'@': 254}), 101: (1, {'@': 254}), 77: (1, {'@': 254}), 78: (1, {'@': 254}), 79: (1, {'@': 254}), 80: (1, {'@': 254}), 81: (1, {'@': 254}), 4: (1, {'@': 254}), 5: (1, {'@': 254}), 82: (1, {'@': 254}), 6: (1, {'@': 254}), 83: (1, {'@': 254}), 7: (1, {'@': 254}), 84: (1, {'@': 254}), 10: (1, {'@': 254}), 14: (1, {'@': 254}), 85: (1, {'@': 254}), 18: (1, {'@': 254}), 19: (1, {'@': 254}), 86: (1, {'@': 254}), 20: (1, {'@': 254}), 104: (1, {'@': 254}), 21: (1, {'@': 254}), 87: (1, {'@': 254}), 22: (1, {'@': 254}), 23: (1, {'@': 254}), 24: (1, {'@': 254}), 51: (1, {'@': 254}), 88: (1, {'@': 254}), 89: (1, {'@': 254}), 90: (1, {'@': 254}), 91: (1, {'@': 254}), 92: (1, {'@': 254}), 29: (1, {'@': 254}), 0: (1, {'@': 254}), 31: (1, {'@': 254}), 93: (1, {'@': 254})}, 368: {16: (1, {'@': 288}), 17: (1, {'@': 288}), 18: (1, {'@': 288}), 2: (1, {'@': 288}), 19: (1, {'@': 288}), 3: (1, {'@': 288}), 4: (1, {'@': 288}), 20: (1, {'@': 288}), 21: (1, {'@': 288}), 22: (1, {'@': 288}), 5: (1, {'@': 288}), 23: (1, {'@': 288}), 24: (1, {'@': 288}), 6: (1, {'@': 288}), 25: (1, {'@': 288}), 7: (1, {'@': 288}), 8: (1, {'@': 288}), 9: (1, {'@': 288}), 26: (1, {'@': 288}), 27: (1, {'@': 288}), 10: (1, {'@': 288}), 11: (1, {'@': 288}), 28: (1, {'@': 288}), 29: (1, {'@': 288}), 30: (1, {'@': 288}), 12: (1, {'@': 288}), 0: (1, {'@': 288}), 13: (1, {'@': 288}), 31: (1, {'@': 288}), 14: (1, {'@': 288}), 15: (1, {'@': 288})}, 369: {77: (1, {'@': 206}), 53: (1, {'@': 206}), 54: (1, {'@': 206}), 80: (1, {'@': 206}), 81: (1, {'@': 206}), 86: (1, {'@': 206}), 4: (1, {'@': 206}), 71: (1, {'@': 206}), 88: (1, {'@': 206}), 7: (1, {'@': 206}), 58: (1, {'@': 206}), 73: (1, {'@': 206}), 89: (1, {'@': 206}), 60: (1, {'@': 206}), 74: (1, {'@': 206}), 63: (1, {'@': 206}), 14: (1, {'@': 206}), 93: (1, {'@': 206})}, 370: {16: (1, {'@': 289}), 17: (1, {'@': 289}), 18: (1, {'@': 289}), 2: (1, {'@': 289}), 19: (1, {'@': 289}), 3: (1, {'@': 289}), 4: (1, {'@': 289}), 20: (1, {'@': 289}), 21: (1, {'@': 289}), 22: (1, {'@': 289}), 5: (1, {'@': 289}), 23: (1, {'@': 289}), 24: (1, {'@': 289}), 6: (1, {'@': 289}), 25: (1, {'@': 289}), 7: (1, {'@': 289}), 8: (1, {'@': 289}), 9: (1, {'@': 289}), 26: (1, {'@': 289}), 27: (1, {'@': 289}), 10: (1, {'@': 289}), 11: (1, {'@': 289}), 28: (1, {'@': 289}), 29: (1, {'@': 289}), 30: (1, {'@': 289}), 12: (1, {'@': 289}), 0: (1, {'@': 289}), 13: (1, {'@': 289}), 31: (1, {'@': 289}), 14: (1, {'@': 289}), 15: (1, {'@': 289})}, 371: {56: (1, {'@': 419}), 54: (1, {'@': 419}), 2: (1, {'@': 419}), 3: (1, {'@': 419}), 57: (1, {'@': 419}), 58: (1, {'@': 419}), 59: (1, {'@': 419}), 8: (1, {'@': 419}), 60: (1, {'@': 419}), 9: (1, {'@': 419}), 12: (1, {'@': 419}), 13: (1, {'@': 419}), 64: (1, {'@': 419}), 65: (1, {'@': 419}), 67: (1, {'@': 419}), 95: (1, {'@': 419}), 70: (1, {'@': 419}), 25: (1, {'@': 419}), 72: (1, {'@': 419}), 73: (1, {'@': 419}), 1: (1, {'@': 419}), 28: (1, {'@': 419}), 30: (1, {'@': 419}), 76: (1, {'@': 419}), 78: (1, {'@': 419}), 79: (1, {'@': 419}), 4: (1, {'@': 419}), 5: (1, {'@': 419}), 7: (1, {'@': 419}), 84: (1, {'@': 419}), 86: (1, {'@': 419}), 20: (1, {'@': 419}), 87: (1, {'@': 419}), 23: (1, {'@': 419}), 88: (1, {'@': 419}), 89: (1, {'@': 419}), 91: (1, {'@': 419}), 29: (1, {'@': 419}), 0: (1, {'@': 419}), 31: (1, {'@': 419}), 53: (1, {'@': 419}), 55: (1, {'@': 419}), 11: (1, {'@': 419}), 61: (1, {'@': 419}), 62: (1, {'@': 419}), 63: (1, {'@': 419}), 15: (1, {'@': 419}), 16: (1, {'@': 419}), 17: (1, {'@': 419}), 66: (1, {'@': 419}), 68: (1, {'@': 419}), 69: (1, {'@': 419}), 71: (1, {'@': 419}), 26: (1, {'@': 419}), 27: (1, {'@': 419}), 75: (1, {'@': 419}), 74: (1, {'@': 419}), 101: (1, {'@': 419}), 77: (1, {'@': 419}), 80: (1, {'@': 419}), 81: (1, {'@': 419}), 82: (1, {'@': 419}), 6: (1, {'@': 419}), 83: (1, {'@': 419}), 10: (1, {'@': 419}), 14: (1, {'@': 419}), 85: (1, {'@': 419}), 18: (1, {'@': 419}), 19: (1, {'@': 419}), 104: (1, {'@': 419}), 21: (1, {'@': 419}), 22: (1, {'@': 419}), 24: (1, {'@': 419}), 51: (1, {'@': 419}), 90: (1, {'@': 419}), 92: (1, {'@': 419}), 93: (1, {'@': 419})}, 372: {1: (0, 383), 29: (0, 428)}, 373: {16: (1, {'@': 301}), 17: (1, {'@': 301}), 18: (1, {'@': 301}), 2: (1, {'@': 301}), 19: (1, {'@': 301}), 3: (1, {'@': 301}), 4: (1, {'@': 301}), 20: (1, {'@': 301}), 21: (1, {'@': 301}), 22: (1, {'@': 301}), 5: (1, {'@': 301}), 23: (1, {'@': 301}), 24: (1, {'@': 301}), 6: (1, {'@': 301}), 25: (1, {'@': 301}), 7: (1, {'@': 301}), 8: (1, {'@': 301}), 9: (1, {'@': 301}), 26: (1, {'@': 301}), 27: (1, {'@': 301}), 10: (1, {'@': 301}), 11: (1, {'@': 301}), 28: (1, {'@': 301}), 29: (1, {'@': 301}), 30: (1, {'@': 301}), 12: (1, {'@': 301}), 0: (1, {'@': 301}), 13: (1, {'@': 301}), 31: (1, {'@': 301}), 14: (1, {'@': 301}), 15: (1, {'@': 301})}, 374: {56: (1, {'@': 418}), 54: (1, {'@': 418}), 2: (1, {'@': 418}), 3: (1, {'@': 418}), 57: (1, {'@': 418}), 58: (1, {'@': 418}), 59: (1, {'@': 418}), 8: (1, {'@': 418}), 60: (1, {'@': 418}), 9: (1, {'@': 418}), 12: (1, {'@': 418}), 13: (1, {'@': 418}), 64: (1, {'@': 418}), 65: (1, {'@': 418}), 67: (1, {'@': 418}), 95: (1, {'@': 418}), 70: (1, {'@': 418}), 25: (1, {'@': 418}), 72: (1, {'@': 418}), 73: (1, {'@': 418}), 1: (1, {'@': 418}), 28: (1, {'@': 418}), 30: (1, {'@': 418}), 76: (1, {'@': 418}), 78: (1, {'@': 418}), 79: (1, {'@': 418}), 4: (1, {'@': 418}), 5: (1, {'@': 418}), 7: (1, {'@': 418}), 84: (1, {'@': 418}), 86: (1, {'@': 418}), 20: (1, {'@': 418}), 87: (1, {'@': 418}), 23: (1, {'@': 418}), 88: (1, {'@': 418}), 89: (1, {'@': 418}), 91: (1, {'@': 418}), 29: (1, {'@': 418}), 0: (1, {'@': 418}), 31: (1, {'@': 418}), 53: (1, {'@': 418}), 55: (1, {'@': 418}), 11: (1, {'@': 418}), 61: (1, {'@': 418}), 62: (1, {'@': 418}), 63: (1, {'@': 418}), 15: (1, {'@': 418}), 16: (1, {'@': 418}), 17: (1, {'@': 418}), 66: (1, {'@': 418}), 68: (1, {'@': 418}), 69: (1, {'@': 418}), 71: (1, {'@': 418}), 26: (1, {'@': 418}), 27: (1, {'@': 418}), 75: (1, {'@': 418}), 74: (1, {'@': 418}), 101: (1, {'@': 418}), 77: (1, {'@': 418}), 80: (1, {'@': 418}), 81: (1, {'@': 418}), 82: (1, {'@': 418}), 6: (1, {'@': 418}), 83: (1, {'@': 418}), 10: (1, {'@': 418}), 14: (1, {'@': 418}), 85: (1, {'@': 418}), 18: (1, {'@': 418}), 19: (1, {'@': 418}), 104: (1, {'@': 418}), 21: (1, {'@': 418}), 22: (1, {'@': 418}), 24: (1, {'@': 418}), 51: (1, {'@': 418}), 90: (1, {'@': 418}), 92: (1, {'@': 418}), 93: (1, {'@': 418})}, 375: {1: (0, 645)}, 376: {24: (0, 516)}, 377: {0: (0, 517), 24: (1, {'@': 218})}, 378: {16: (1, {'@': 300}), 17: (1, {'@': 300}), 18: (1, {'@': 300}), 2: (1, {'@': 300}), 19: (1, {'@': 300}), 3: (1, {'@': 300}), 4: (1, {'@': 300}), 20: (1, {'@': 300}), 21: (1, {'@': 300}), 22: (1, {'@': 300}), 5: (1, {'@': 300}), 23: (1, {'@': 300}), 24: (1, {'@': 300}), 6: (1, {'@': 300}), 25: (1, {'@': 300}), 7: (1, {'@': 300}), 8: (1, {'@': 300}), 9: (1, {'@': 300}), 26: (1, {'@': 300}), 27: (1, {'@': 300}), 10: (1, {'@': 300}), 11: (1, {'@': 300}), 28: (1, {'@': 300}), 29: (1, {'@': 300}), 30: (1, {'@': 300}), 12: (1, {'@': 300}), 0: (1, {'@': 300}), 13: (1, {'@': 300}), 31: (1, {'@': 300}), 14: (1, {'@': 300}), 15: (1, {'@': 300})}, 379: {23: (1, {'@': 113}), 108: (1, {'@': 113}), 51: (1, {'@': 113}), 1: (1, {'@': 113}), 77: (1, {'@': 113}), 53: (1, {'@': 113}), 54: (1, {'@': 113}), 80: (1, {'@': 113}), 81: (1, {'@': 113}), 86: (1, {'@': 113}), 4: (1, {'@': 113}), 71: (1, {'@': 113}), 88: (1, {'@': 113}), 7: (1, {'@': 113}), 58: (1, {'@': 113}), 73: (1, {'@': 113}), 89: (1, {'@': 113}), 60: (1, {'@': 113}), 74: (1, {'@': 113}), 63: (1, {'@': 113}), 14: (1, {'@': 113}), 93: (1, {'@': 113}), 24: (1, {'@': 113}), 29: (1, {'@': 113}), 5: (1, {'@': 113})}, 380: {1: (0, 394)}, 381: {24: (0, 81)}, 382: {83: (0, 179), 1: (0, 574)}, 383: {29: (0, 520), 23: (1, {'@': 126}), 108: (1, {'@': 126}), 51: (1, {'@': 126}), 1: (1, {'@': 126}), 77: (1, {'@': 126}), 53: (1, {'@': 126}), 54: (1, {'@': 126}), 80: (1, {'@': 126}), 81: (1, {'@': 126}), 86: (1, {'@': 126}), 4: (1, {'@': 126}), 71: (1, {'@': 126}), 88: (1, {'@': 126}), 7: (1, {'@': 126}), 58: (1, {'@': 126}), 73: (1, {'@': 126}), 89: (1, {'@': 126}), 60: (1, {'@': 126}), 74: (1, {'@': 126}), 63: (1, {'@': 126}), 14: (1, {'@': 126}), 93: (1, {'@': 126}), 24: (1, {'@': 126}), 5: (1, {'@': 126})}, 384: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 109: (0, 474), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 385: {88: (0, 78), 126: (0, 305), 24: (0, 478), 187: (0, 476), 131: (0, 335)}, 386: {122: (0, 416)}, 387: {56: (1, {'@': 350}), 54: (1, {'@': 350}), 2: (1, {'@': 350}), 3: (1, {'@': 350}), 57: (1, {'@': 350}), 58: (1, {'@': 350}), 59: (1, {'@': 350}), 8: (1, {'@': 350}), 60: (1, {'@': 350}), 9: (1, {'@': 350}), 12: (1, {'@': 350}), 13: (1, {'@': 350}), 94: (1, {'@': 350}), 64: (1, {'@': 350}), 65: (1, {'@': 350}), 67: (1, {'@': 350}), 95: (1, {'@': 350}), 70: (1, {'@': 350}), 96: (1, {'@': 350}), 25: (1, {'@': 350}), 72: (1, {'@': 350}), 73: (1, {'@': 350}), 1: (1, {'@': 350}), 28: (1, {'@': 350}), 30: (1, {'@': 350}), 76: (1, {'@': 350}), 78: (1, {'@': 350}), 79: (1, {'@': 350}), 4: (1, {'@': 350}), 5: (1, {'@': 350}), 7: (1, {'@': 350}), 84: (1, {'@': 350}), 97: (1, {'@': 350}), 86: (1, {'@': 350}), 20: (1, {'@': 350}), 87: (1, {'@': 350}), 23: (1, {'@': 350}), 88: (1, {'@': 350}), 98: (1, {'@': 350}), 89: (1, {'@': 350}), 91: (1, {'@': 350}), 29: (1, {'@': 350}), 0: (1, {'@': 350}), 31: (1, {'@': 350}), 53: (1, {'@': 350}), 55: (1, {'@': 350}), 120: (1, {'@': 350}), 11: (1, {'@': 350}), 61: (1, {'@': 350}), 62: (1, {'@': 350}), 63: (1, {'@': 350}), 15: (1, {'@': 350}), 16: (1, {'@': 350}), 17: (1, {'@': 350}), 99: (1, {'@': 350}), 66: (1, {'@': 350}), 68: (1, {'@': 350}), 100: (1, {'@': 350}), 69: (1, {'@': 350}), 71: (1, {'@': 350}), 26: (1, {'@': 350}), 27: (1, {'@': 350}), 75: (1, {'@': 350}), 74: (1, {'@': 350}), 101: (1, {'@': 350}), 121: (1, {'@': 350}), 77: (1, {'@': 350}), 80: (1, {'@': 350}), 81: (1, {'@': 350}), 82: (1, {'@': 350}), 6: (1, {'@': 350}), 83: (1, {'@': 350}), 102: (1, {'@': 350}), 10: (1, {'@': 350}), 103: (1, {'@': 350}), 108: (1, {'@': 350}), 14: (1, {'@': 350}), 85: (1, {'@': 350}), 18: (1, {'@': 350}), 19: (1, {'@': 350}), 104: (1, {'@': 350}), 21: (1, {'@': 350}), 22: (1, {'@': 350}), 24: (1, {'@': 350}), 51: (1, {'@': 350}), 90: (1, {'@': 350}), 92: (1, {'@': 350}), 93: (1, {'@': 350})}, 388: {53: (1, {'@': 415}), 54: (1, {'@': 415}), 55: (1, {'@': 415}), 56: (1, {'@': 415}), 2: (1, {'@': 415}), 3: (1, {'@': 415}), 57: (1, {'@': 415}), 58: (1, {'@': 415}), 59: (1, {'@': 415}), 8: (1, {'@': 415}), 60: (1, {'@': 415}), 9: (1, {'@': 415}), 11: (1, {'@': 415}), 12: (1, {'@': 415}), 61: (1, {'@': 415}), 13: (1, {'@': 415}), 62: (1, {'@': 415}), 63: (1, {'@': 415}), 15: (1, {'@': 415}), 64: (1, {'@': 415}), 16: (1, {'@': 415}), 17: (1, {'@': 415}), 65: (1, {'@': 415}), 66: (1, {'@': 415}), 67: (1, {'@': 415}), 68: (1, {'@': 415}), 69: (1, {'@': 415}), 70: (1, {'@': 415}), 71: (1, {'@': 415}), 25: (1, {'@': 415}), 72: (1, {'@': 415}), 73: (1, {'@': 415}), 26: (1, {'@': 415}), 27: (1, {'@': 415}), 1: (1, {'@': 415}), 28: (1, {'@': 415}), 30: (1, {'@': 415}), 74: (1, {'@': 415}), 75: (1, {'@': 415}), 76: (1, {'@': 415}), 77: (1, {'@': 415}), 78: (1, {'@': 415}), 79: (1, {'@': 415}), 80: (1, {'@': 415}), 81: (1, {'@': 415}), 4: (1, {'@': 415}), 5: (1, {'@': 415}), 82: (1, {'@': 415}), 6: (1, {'@': 415}), 83: (1, {'@': 415}), 7: (1, {'@': 415}), 84: (1, {'@': 415}), 10: (1, {'@': 415}), 14: (1, {'@': 415}), 85: (1, {'@': 415}), 18: (1, {'@': 415}), 19: (1, {'@': 415}), 86: (1, {'@': 415}), 20: (1, {'@': 415}), 21: (1, {'@': 415}), 87: (1, {'@': 415}), 22: (1, {'@': 415}), 23: (1, {'@': 415}), 24: (1, {'@': 415}), 51: (1, {'@': 415}), 88: (1, {'@': 415}), 89: (1, {'@': 415}), 90: (1, {'@': 415}), 91: (1, {'@': 415}), 92: (1, {'@': 415}), 29: (1, {'@': 415}), 0: (1, {'@': 415}), 31: (1, {'@': 415}), 93: (1, {'@': 415})}, 389: {23: (1, {'@': 119}), 108: (1, {'@': 119}), 51: (1, {'@': 119}), 1: (1, {'@': 119}), 77: (1, {'@': 119}), 53: (1, {'@': 119}), 54: (1, {'@': 119}), 80: (1, {'@': 119}), 81: (1, {'@': 119}), 86: (1, {'@': 119}), 4: (1, {'@': 119}), 71: (1, {'@': 119}), 88: (1, {'@': 119}), 7: (1, {'@': 119}), 58: (1, {'@': 119}), 73: (1, {'@': 119}), 89: (1, {'@': 119}), 60: (1, {'@': 119}), 74: (1, {'@': 119}), 63: (1, {'@': 119}), 14: (1, {'@': 119}), 93: (1, {'@': 119}), 24: (1, {'@': 119}), 29: (1, {'@': 119}), 5: (1, {'@': 119})}, 390: {22: (0, 15), 1: (1, {'@': 152})}, 391: {24: (0, 183)}, 392: {22: (0, 400), 1: (1, {'@': 156})}, 393: {23: (1, {'@': 110}), 108: (1, {'@': 110}), 51: (1, {'@': 110}), 1: (1, {'@': 110}), 77: (1, {'@': 110}), 53: (1, {'@': 110}), 54: (1, {'@': 110}), 80: (1, {'@': 110}), 81: (1, {'@': 110}), 86: (1, {'@': 110}), 4: (1, {'@': 110}), 71: (1, {'@': 110}), 88: (1, {'@': 110}), 7: (1, {'@': 110}), 58: (1, {'@': 110}), 73: (1, {'@': 110}), 89: (1, {'@': 110}), 60: (1, {'@': 110}), 74: (1, {'@': 110}), 63: (1, {'@': 110}), 14: (1, {'@': 110}), 93: (1, {'@': 110}), 24: (1, {'@': 110}), 5: (1, {'@': 110}), 29: (1, {'@': 110})}, 394: {5: (1, {'@': 135}), 23: (1, {'@': 135}), 108: (1, {'@': 135}), 51: (1, {'@': 135}), 1: (1, {'@': 135}), 77: (1, {'@': 135}), 53: (1, {'@': 135}), 54: (1, {'@': 135}), 80: (1, {'@': 135}), 81: (1, {'@': 135}), 86: (1, {'@': 135}), 4: (1, {'@': 135}), 71: (1, {'@': 135}), 88: (1, {'@': 135}), 7: (1, {'@': 135}), 58: (1, {'@': 135}), 73: (1, {'@': 135}), 89: (1, {'@': 135}), 60: (1, {'@': 135}), 74: (1, {'@': 135}), 63: (1, {'@': 135}), 14: (1, {'@': 135}), 93: (1, {'@': 135}), 24: (1, {'@': 135}), 29: (1, {'@': 135})}, 395: {106: (1, {'@': 425}), 24: (1, {'@': 425}), 105: (1, {'@': 425})}, 396: {120: (0, 127), 1: (0, 489)}, 397: {141: (0, 582), 0: (0, 177), 24: (0, 221), 146: (0, 359)}, 398: {168: (0, 289), 20: (0, 109), 1: (0, 344), 167: (0, 353), 3: (0, 96), 83: (1, {'@': 248}), 92: (1, {'@': 248}), 104: (1, {'@': 248}), 21: (1, {'@': 248}), 95: (1, {'@': 248}), 101: (1, {'@': 248}), 55: (1, {'@': 248}), 65: (1, {'@': 248}), 67: (1, {'@': 248}), 61: (1, {'@': 248}), 76: (1, {'@': 248}), 72: (1, {'@': 248}), 78: (1, {'@': 248}), 79: (1, {'@': 248})}, 399: {77: (1, {'@': 164}), 53: (1, {'@': 164}), 54: (1, {'@': 164}), 80: (1, {'@': 164}), 81: (1, {'@': 164}), 86: (1, {'@': 164}), 4: (1, {'@': 164}), 71: (1, {'@': 164}), 88: (1, {'@': 164}), 7: (1, {'@': 164}), 58: (1, {'@': 164}), 73: (1, {'@': 164}), 89: (1, {'@': 164}), 60: (1, {'@': 164}), 74: (1, {'@': 164}), 63: (1, {'@': 164}), 14: (1, {'@': 164}), 93: (1, {'@': 164})}, 400: {8: (0, 375)}, 401: {41: (0, 201), 32: (0, 559), 28: (0, 315), 36: (0, 230), 0: (0, 306), 1: (0, 560), 26: (0, 20), 34: (0, 13), 35: (0, 8), 33: (0, 618), 141: (0, 582), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 22: (0, 100), 21: (0, 631), 6: (0, 570), 3: (0, 211), 18: (0, 651), 146: (0, 85), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 402: {53: (1, {'@': 245}), 54: (1, {'@': 245}), 55: (1, {'@': 245}), 56: (1, {'@': 245}), 2: (1, {'@': 245}), 3: (1, {'@': 245}), 57: (1, {'@': 245}), 58: (1, {'@': 245}), 59: (1, {'@': 245}), 8: (1, {'@': 245}), 60: (1, {'@': 245}), 9: (1, {'@': 245}), 11: (1, {'@': 245}), 12: (1, {'@': 245}), 61: (1, {'@': 245}), 13: (1, {'@': 245}), 62: (1, {'@': 245}), 63: (1, {'@': 245}), 15: (1, {'@': 245}), 64: (1, {'@': 245}), 16: (1, {'@': 245}), 17: (1, {'@': 245}), 65: (1, {'@': 245}), 66: (1, {'@': 245}), 67: (1, {'@': 245}), 68: (1, {'@': 245}), 69: (1, {'@': 245}), 70: (1, {'@': 245}), 71: (1, {'@': 245}), 25: (1, {'@': 245}), 72: (1, {'@': 245}), 73: (1, {'@': 245}), 26: (1, {'@': 245}), 27: (1, {'@': 245}), 1: (1, {'@': 245}), 28: (1, {'@': 245}), 30: (1, {'@': 245}), 74: (1, {'@': 245}), 75: (1, {'@': 245}), 76: (1, {'@': 245}), 77: (1, {'@': 245}), 78: (1, {'@': 245}), 79: (1, {'@': 245}), 80: (1, {'@': 245}), 81: (1, {'@': 245}), 4: (1, {'@': 245}), 5: (1, {'@': 245}), 82: (1, {'@': 245}), 6: (1, {'@': 245}), 83: (1, {'@': 245}), 7: (1, {'@': 245}), 84: (1, {'@': 245}), 10: (1, {'@': 245}), 14: (1, {'@': 245}), 85: (1, {'@': 245}), 18: (1, {'@': 245}), 19: (1, {'@': 245}), 86: (1, {'@': 245}), 20: (1, {'@': 245}), 21: (1, {'@': 245}), 87: (1, {'@': 245}), 22: (1, {'@': 245}), 23: (1, {'@': 245}), 24: (1, {'@': 245}), 51: (1, {'@': 245}), 88: (1, {'@': 245}), 89: (1, {'@': 245}), 90: (1, {'@': 245}), 91: (1, {'@': 245}), 92: (1, {'@': 245}), 29: (1, {'@': 245}), 0: (1, {'@': 245}), 31: (1, {'@': 245}), 93: (1, {'@': 245})}, 403: {16: (1, {'@': 292}), 17: (1, {'@': 292}), 18: (1, {'@': 292}), 2: (1, {'@': 292}), 19: (1, {'@': 292}), 3: (1, {'@': 292}), 4: (1, {'@': 292}), 20: (1, {'@': 292}), 21: (1, {'@': 292}), 22: (1, {'@': 292}), 5: (1, {'@': 292}), 23: (1, {'@': 292}), 24: (1, {'@': 292}), 6: (1, {'@': 292}), 25: (1, {'@': 292}), 7: (1, {'@': 292}), 8: (1, {'@': 292}), 9: (1, {'@': 292}), 26: (1, {'@': 292}), 27: (1, {'@': 292}), 10: (1, {'@': 292}), 11: (1, {'@': 292}), 28: (1, {'@': 292}), 29: (1, {'@': 292}), 30: (1, {'@': 292}), 12: (1, {'@': 292}), 0: (1, {'@': 292}), 13: (1, {'@': 292}), 31: (1, {'@': 292}), 14: (1, {'@': 292}), 15: (1, {'@': 292})}, 404: {53: (1, {'@': 263}), 54: (1, {'@': 263}), 55: (1, {'@': 263}), 56: (1, {'@': 263}), 2: (1, {'@': 263}), 3: (1, {'@': 263}), 57: (1, {'@': 263}), 58: (1, {'@': 263}), 59: (1, {'@': 263}), 8: (1, {'@': 263}), 60: (1, {'@': 263}), 9: (1, {'@': 263}), 11: (1, {'@': 263}), 12: (1, {'@': 263}), 61: (1, {'@': 263}), 13: (1, {'@': 263}), 62: (1, {'@': 263}), 63: (1, {'@': 263}), 94: (1, {'@': 263}), 15: (1, {'@': 263}), 64: (1, {'@': 263}), 16: (1, {'@': 263}), 17: (1, {'@': 263}), 99: (1, {'@': 263}), 65: (1, {'@': 263}), 66: (1, {'@': 263}), 67: (1, {'@': 263}), 68: (1, {'@': 263}), 69: (1, {'@': 263}), 95: (1, {'@': 263}), 70: (1, {'@': 263}), 71: (1, {'@': 263}), 96: (1, {'@': 263}), 25: (1, {'@': 263}), 72: (1, {'@': 263}), 73: (1, {'@': 263}), 26: (1, {'@': 263}), 27: (1, {'@': 263}), 1: (1, {'@': 263}), 28: (1, {'@': 263}), 30: (1, {'@': 263}), 74: (1, {'@': 263}), 75: (1, {'@': 263}), 76: (1, {'@': 263}), 101: (1, {'@': 263}), 77: (1, {'@': 263}), 78: (1, {'@': 263}), 79: (1, {'@': 263}), 80: (1, {'@': 263}), 81: (1, {'@': 263}), 4: (1, {'@': 263}), 5: (1, {'@': 263}), 82: (1, {'@': 263}), 6: (1, {'@': 263}), 83: (1, {'@': 263}), 7: (1, {'@': 263}), 102: (1, {'@': 263}), 84: (1, {'@': 263}), 10: (1, {'@': 263}), 103: (1, {'@': 263}), 97: (1, {'@': 263}), 14: (1, {'@': 263}), 85: (1, {'@': 263}), 18: (1, {'@': 263}), 19: (1, {'@': 263}), 86: (1, {'@': 263}), 20: (1, {'@': 263}), 104: (1, {'@': 263}), 21: (1, {'@': 263}), 87: (1, {'@': 263}), 22: (1, {'@': 263}), 23: (1, {'@': 263}), 24: (1, {'@': 263}), 51: (1, {'@': 263}), 88: (1, {'@': 263}), 98: (1, {'@': 263}), 89: (1, {'@': 263}), 90: (1, {'@': 263}), 91: (1, {'@': 263}), 92: (1, {'@': 263}), 29: (1, {'@': 263}), 0: (1, {'@': 263}), 31: (1, {'@': 263}), 93: (1, {'@': 263}), 100: (1, {'@': 263})}, 405: {23: (1, {'@': 167}), 108: (1, {'@': 167}), 51: (1, {'@': 167}), 1: (1, {'@': 167}), 77: (1, {'@': 167}), 53: (1, {'@': 167}), 54: (1, {'@': 167}), 80: (1, {'@': 167}), 81: (1, {'@': 167}), 86: (1, {'@': 167}), 4: (1, {'@': 167}), 71: (1, {'@': 167}), 88: (1, {'@': 167}), 7: (1, {'@': 167}), 58: (1, {'@': 167}), 73: (1, {'@': 167}), 89: (1, {'@': 167}), 60: (1, {'@': 167}), 74: (1, {'@': 167}), 63: (1, {'@': 167}), 14: (1, {'@': 167}), 93: (1, {'@': 167}), 24: (1, {'@': 167}), 29: (1, {'@': 167}), 5: (1, {'@': 167})}, 406: {23: (1, {'@': 176}), 108: (1, {'@': 176}), 51: (1, {'@': 176}), 1: (1, {'@': 176}), 77: (1, {'@': 176}), 53: (1, {'@': 176}), 54: (1, {'@': 176}), 80: (1, {'@': 176}), 81: (1, {'@': 176}), 86: (1, {'@': 176}), 4: (1, {'@': 176}), 71: (1, {'@': 176}), 88: (1, {'@': 176}), 7: (1, {'@': 176}), 58: (1, {'@': 176}), 73: (1, {'@': 176}), 89: (1, {'@': 176}), 60: (1, {'@': 176}), 74: (1, {'@': 176}), 63: (1, {'@': 176}), 14: (1, {'@': 176}), 93: (1, {'@': 176}), 24: (1, {'@': 176}), 29: (1, {'@': 176}), 5: (1, {'@': 176})}, 407: {1: (0, 433)}, 408: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 109: (0, 451), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102), 24: (1, {'@': 214}), 1: (1, {'@': 214})}, 409: {120: (0, 513), 5: (0, 437), 78: (1, {'@': 287}), 79: (1, {'@': 287}), 55: (1, {'@': 287}), 99: (1, {'@': 287}), 65: (1, {'@': 287}), 3: (1, {'@': 287}), 20: (1, {'@': 287}), 67: (1, {'@': 287}), 104: (1, {'@': 287}), 21: (1, {'@': 287}), 22: (1, {'@': 287}), 23: (1, {'@': 287}), 95: (1, {'@': 287}), 6: (1, {'@': 287}), 83: (1, {'@': 287}), 96: (1, {'@': 287}), 98: (1, {'@': 287}), 72: (1, {'@': 287}), 102: (1, {'@': 287}), 1: (1, {'@': 287}), 92: (1, {'@': 287}), 103: (1, {'@': 287}), 97: (1, {'@': 287}), 61: (1, {'@': 287}), 94: (1, {'@': 287}), 76: (1, {'@': 287}), 101: (1, {'@': 287})}, 410: {78: (1, {'@': 423}), 79: (1, {'@': 423}), 55: (1, {'@': 423}), 3: (1, {'@': 423}), 83: (1, {'@': 423}), 102: (1, {'@': 423}), 97: (1, {'@': 423}), 61: (1, {'@': 423}), 94: (1, {'@': 423}), 99: (1, {'@': 423}), 65: (1, {'@': 423}), 67: (1, {'@': 423}), 20: (1, {'@': 423}), 104: (1, {'@': 423}), 21: (1, {'@': 423}), 23: (1, {'@': 423}), 95: (1, {'@': 423}), 96: (1, {'@': 423}), 98: (1, {'@': 423}), 72: (1, {'@': 423}), 1: (1, {'@': 423}), 92: (1, {'@': 423}), 76: (1, {'@': 423}), 101: (1, {'@': 423}), 53: (1, {'@': 423}), 56: (1, {'@': 423}), 54: (1, {'@': 423}), 2: (1, {'@': 423}), 57: (1, {'@': 423}), 58: (1, {'@': 423}), 59: (1, {'@': 423}), 8: (1, {'@': 423}), 60: (1, {'@': 423}), 9: (1, {'@': 423}), 11: (1, {'@': 423}), 12: (1, {'@': 423}), 13: (1, {'@': 423}), 62: (1, {'@': 423}), 63: (1, {'@': 423}), 64: (1, {'@': 423}), 15: (1, {'@': 423}), 16: (1, {'@': 423}), 17: (1, {'@': 423}), 66: (1, {'@': 423}), 68: (1, {'@': 423}), 69: (1, {'@': 423}), 70: (1, {'@': 423}), 71: (1, {'@': 423}), 25: (1, {'@': 423}), 73: (1, {'@': 423}), 26: (1, {'@': 423}), 27: (1, {'@': 423}), 28: (1, {'@': 423}), 30: (1, {'@': 423}), 75: (1, {'@': 423}), 74: (1, {'@': 423}), 77: (1, {'@': 423}), 80: (1, {'@': 423}), 81: (1, {'@': 423}), 4: (1, {'@': 423}), 5: (1, {'@': 423}), 82: (1, {'@': 423}), 6: (1, {'@': 423}), 7: (1, {'@': 423}), 84: (1, {'@': 423}), 10: (1, {'@': 423}), 14: (1, {'@': 423}), 85: (1, {'@': 423}), 18: (1, {'@': 423}), 19: (1, {'@': 423}), 86: (1, {'@': 423}), 87: (1, {'@': 423}), 22: (1, {'@': 423}), 24: (1, {'@': 423}), 51: (1, {'@': 423}), 88: (1, {'@': 423}), 89: (1, {'@': 423}), 90: (1, {'@': 423}), 91: (1, {'@': 423}), 29: (1, {'@': 423}), 0: (1, {'@': 423}), 31: (1, {'@': 423}), 93: (1, {'@': 423})}, 411: {120: (0, 636), 78: (1, {'@': 273}), 79: (1, {'@': 273}), 55: (1, {'@': 273}), 99: (1, {'@': 273}), 65: (1, {'@': 273}), 3: (1, {'@': 273}), 20: (1, {'@': 273}), 67: (1, {'@': 273}), 104: (1, {'@': 273}), 21: (1, {'@': 273}), 22: (1, {'@': 273}), 23: (1, {'@': 273}), 95: (1, {'@': 273}), 6: (1, {'@': 273}), 83: (1, {'@': 273}), 96: (1, {'@': 273}), 98: (1, {'@': 273}), 72: (1, {'@': 273}), 102: (1, {'@': 273}), 1: (1, {'@': 273}), 92: (1, {'@': 273}), 103: (1, {'@': 273}), 97: (1, {'@': 273}), 61: (1, {'@': 273}), 94: (1, {'@': 273}), 76: (1, {'@': 273}), 101: (1, {'@': 273})}, 412: {106: (1, {'@': 298}), 24: (1, {'@': 298}), 105: (1, {'@': 298})}, 413: {120: (0, 602), 78: (1, {'@': 274}), 79: (1, {'@': 274}), 55: (1, {'@': 274}), 99: (1, {'@': 274}), 65: (1, {'@': 274}), 3: (1, {'@': 274}), 20: (1, {'@': 274}), 67: (1, {'@': 274}), 104: (1, {'@': 274}), 21: (1, {'@': 274}), 22: (1, {'@': 274}), 23: (1, {'@': 274}), 95: (1, {'@': 274}), 6: (1, {'@': 274}), 83: (1, {'@': 274}), 96: (1, {'@': 274}), 98: (1, {'@': 274}), 72: (1, {'@': 274}), 102: (1, {'@': 274}), 1: (1, {'@': 274}), 92: (1, {'@': 274}), 103: (1, {'@': 274}), 97: (1, {'@': 274}), 61: (1, {'@': 274}), 94: (1, {'@': 274}), 76: (1, {'@': 274}), 101: (1, {'@': 274})}, 414: {1: (0, 566)}, 415: {2: (1, {'@': 436}), 3: (1, {'@': 436}), 4: (1, {'@': 436}), 5: (1, {'@': 436}), 6: (1, {'@': 436}), 7: (1, {'@': 436}), 8: (1, {'@': 436}), 9: (1, {'@': 436}), 10: (1, {'@': 436}), 11: (1, {'@': 436}), 12: (1, {'@': 436}), 13: (1, {'@': 436}), 14: (1, {'@': 436}), 15: (1, {'@': 436}), 16: (1, {'@': 436}), 17: (1, {'@': 436}), 18: (1, {'@': 436}), 19: (1, {'@': 436}), 20: (1, {'@': 436}), 21: (1, {'@': 436}), 22: (1, {'@': 436}), 23: (1, {'@': 436}), 24: (1, {'@': 436}), 25: (1, {'@': 436}), 26: (1, {'@': 436}), 27: (1, {'@': 436}), 28: (1, {'@': 436}), 29: (1, {'@': 436}), 30: (1, {'@': 436}), 0: (1, {'@': 436}), 31: (1, {'@': 436})}, 416: {42: (0, 460), 0: (0, 107)}, 417: {22: (0, 667), 48: (0, 358)}, 418: {72: (0, 312), 61: (0, 280), 119: (0, 66), 55: (0, 136), 67: (0, 248), 1: (0, 581), 65: (0, 148), 76: (0, 337)}, 419: {141: (0, 582), 0: (0, 177), 146: (0, 270)}, 420: {78: (1, {'@': 416}), 79: (1, {'@': 416}), 55: (1, {'@': 416}), 65: (1, {'@': 416}), 67: (1, {'@': 416}), 104: (1, {'@': 416}), 21: (1, {'@': 416}), 95: (1, {'@': 416}), 83: (1, {'@': 416}), 72: (1, {'@': 416}), 1: (1, {'@': 416}), 92: (1, {'@': 416}), 61: (1, {'@': 416}), 76: (1, {'@': 416}), 101: (1, {'@': 416}), 53: (1, {'@': 416}), 56: (1, {'@': 416}), 54: (1, {'@': 416}), 2: (1, {'@': 416}), 3: (1, {'@': 416}), 57: (1, {'@': 416}), 58: (1, {'@': 416}), 59: (1, {'@': 416}), 8: (1, {'@': 416}), 60: (1, {'@': 416}), 9: (1, {'@': 416}), 11: (1, {'@': 416}), 12: (1, {'@': 416}), 13: (1, {'@': 416}), 62: (1, {'@': 416}), 63: (1, {'@': 416}), 15: (1, {'@': 416}), 64: (1, {'@': 416}), 16: (1, {'@': 416}), 17: (1, {'@': 416}), 66: (1, {'@': 416}), 68: (1, {'@': 416}), 69: (1, {'@': 416}), 70: (1, {'@': 416}), 71: (1, {'@': 416}), 25: (1, {'@': 416}), 73: (1, {'@': 416}), 26: (1, {'@': 416}), 27: (1, {'@': 416}), 28: (1, {'@': 416}), 30: (1, {'@': 416}), 75: (1, {'@': 416}), 74: (1, {'@': 416}), 77: (1, {'@': 416}), 80: (1, {'@': 416}), 81: (1, {'@': 416}), 4: (1, {'@': 416}), 5: (1, {'@': 416}), 82: (1, {'@': 416}), 6: (1, {'@': 416}), 7: (1, {'@': 416}), 84: (1, {'@': 416}), 10: (1, {'@': 416}), 14: (1, {'@': 416}), 85: (1, {'@': 416}), 18: (1, {'@': 416}), 19: (1, {'@': 416}), 86: (1, {'@': 416}), 20: (1, {'@': 416}), 87: (1, {'@': 416}), 22: (1, {'@': 416}), 23: (1, {'@': 416}), 24: (1, {'@': 416}), 51: (1, {'@': 416}), 88: (1, {'@': 416}), 89: (1, {'@': 416}), 90: (1, {'@': 416}), 91: (1, {'@': 416}), 29: (1, {'@': 416}), 0: (1, {'@': 416}), 31: (1, {'@': 416}), 93: (1, {'@': 416})}, 421: {23: (1, {'@': 123}), 108: (1, {'@': 123}), 51: (1, {'@': 123}), 1: (1, {'@': 123}), 77: (1, {'@': 123}), 53: (1, {'@': 123}), 54: (1, {'@': 123}), 80: (1, {'@': 123}), 81: (1, {'@': 123}), 86: (1, {'@': 123}), 4: (1, {'@': 123}), 71: (1, {'@': 123}), 88: (1, {'@': 123}), 7: (1, {'@': 123}), 58: (1, {'@': 123}), 73: (1, {'@': 123}), 89: (1, {'@': 123}), 60: (1, {'@': 123}), 74: (1, {'@': 123}), 63: (1, {'@': 123}), 14: (1, {'@': 123}), 93: (1, {'@': 123}), 24: (1, {'@': 123}), 29: (1, {'@': 123}), 5: (1, {'@': 123})}, 422: {78: (1, {'@': 409}), 79: (1, {'@': 409}), 55: (1, {'@': 409}), 1: (1, {'@': 409}), 65: (1, {'@': 409}), 67: (1, {'@': 409}), 61: (1, {'@': 409}), 76: (1, {'@': 409}), 72: (1, {'@': 409}), 53: (1, {'@': 409}), 54: (1, {'@': 409}), 56: (1, {'@': 409}), 2: (1, {'@': 409}), 3: (1, {'@': 409}), 57: (1, {'@': 409}), 58: (1, {'@': 409}), 59: (1, {'@': 409}), 8: (1, {'@': 409}), 60: (1, {'@': 409}), 9: (1, {'@': 409}), 11: (1, {'@': 409}), 12: (1, {'@': 409}), 13: (1, {'@': 409}), 62: (1, {'@': 409}), 63: (1, {'@': 409}), 15: (1, {'@': 409}), 64: (1, {'@': 409}), 16: (1, {'@': 409}), 17: (1, {'@': 409}), 66: (1, {'@': 409}), 68: (1, {'@': 409}), 69: (1, {'@': 409}), 70: (1, {'@': 409}), 71: (1, {'@': 409}), 25: (1, {'@': 409}), 73: (1, {'@': 409}), 26: (1, {'@': 409}), 27: (1, {'@': 409}), 28: (1, {'@': 409}), 30: (1, {'@': 409}), 74: (1, {'@': 409}), 75: (1, {'@': 409}), 77: (1, {'@': 409}), 80: (1, {'@': 409}), 81: (1, {'@': 409}), 4: (1, {'@': 409}), 5: (1, {'@': 409}), 82: (1, {'@': 409}), 6: (1, {'@': 409}), 7: (1, {'@': 409}), 84: (1, {'@': 409}), 10: (1, {'@': 409}), 14: (1, {'@': 409}), 85: (1, {'@': 409}), 18: (1, {'@': 409}), 19: (1, {'@': 409}), 86: (1, {'@': 409}), 20: (1, {'@': 409}), 21: (1, {'@': 409}), 87: (1, {'@': 409}), 22: (1, {'@': 409}), 23: (1, {'@': 409}), 24: (1, {'@': 409}), 51: (1, {'@': 409}), 88: (1, {'@': 409}), 89: (1, {'@': 409}), 90: (1, {'@': 409}), 91: (1, {'@': 409}), 29: (1, {'@': 409}), 0: (1, {'@': 409}), 31: (1, {'@': 409}), 93: (1, {'@': 409})}, 423: {29: (0, 421), 23: (1, {'@': 124}), 108: (1, {'@': 124}), 51: (1, {'@': 124}), 1: (1, {'@': 124}), 77: (1, {'@': 124}), 53: (1, {'@': 124}), 54: (1, {'@': 124}), 80: (1, {'@': 124}), 81: (1, {'@': 124}), 86: (1, {'@': 124}), 4: (1, {'@': 124}), 71: (1, {'@': 124}), 88: (1, {'@': 124}), 7: (1, {'@': 124}), 58: (1, {'@': 124}), 73: (1, {'@': 124}), 89: (1, {'@': 124}), 60: (1, {'@': 124}), 74: (1, {'@': 124}), 63: (1, {'@': 124}), 14: (1, {'@': 124}), 93: (1, {'@': 124}), 24: (1, {'@': 124}), 5: (1, {'@': 124})}, 424: {107: (0, 670), 16: (1, {'@': 290}), 17: (1, {'@': 290}), 18: (1, {'@': 290}), 2: (1, {'@': 290}), 19: (1, {'@': 290}), 3: (1, {'@': 290}), 4: (1, {'@': 290}), 20: (1, {'@': 290}), 21: (1, {'@': 290}), 22: (1, {'@': 290}), 5: (1, {'@': 290}), 23: (1, {'@': 290}), 24: (1, {'@': 290}), 6: (1, {'@': 290}), 25: (1, {'@': 290}), 7: (1, {'@': 290}), 8: (1, {'@': 290}), 9: (1, {'@': 290}), 26: (1, {'@': 290}), 27: (1, {'@': 290}), 10: (1, {'@': 290}), 11: (1, {'@': 290}), 28: (1, {'@': 290}), 29: (1, {'@': 290}), 30: (1, {'@': 290}), 12: (1, {'@': 290}), 0: (1, {'@': 290}), 13: (1, {'@': 290}), 31: (1, {'@': 290}), 14: (1, {'@': 290}), 15: (1, {'@': 290})}, 425: {120: (0, 572)}, 426: {188: (0, 612), 105: (0, 599), 189: (0, 603), 106: (0, 598), 190: (0, 596)}, 427: {24: (0, 628), 106: (0, 598), 189: (0, 632), 191: (0, 395), 105: (0, 621)}, 428: {1: (0, 423)}, 429: {120: (0, 127)}, 430: {106: (1, {'@': 294}), 24: (1, {'@': 294}), 105: (1, {'@': 294})}, 431: {77: (1, {'@': 112}), 53: (1, {'@': 112}), 54: (1, {'@': 112}), 80: (1, {'@': 112}), 81: (1, {'@': 112}), 86: (1, {'@': 112}), 4: (1, {'@': 112}), 71: (1, {'@': 112}), 88: (1, {'@': 112}), 7: (1, {'@': 112}), 58: (1, {'@': 112}), 73: (1, {'@': 112}), 89: (1, {'@': 112}), 60: (1, {'@': 112}), 74: (1, {'@': 112}), 63: (1, {'@': 112}), 14: (1, {'@': 112}), 93: (1, {'@': 112})}, 432: {114: (0, 488), 0: (0, 118), 1: (1, {'@': 99})}, 433: {29: (0, 453), 23: (1, {'@': 128}), 108: (1, {'@': 128}), 51: (1, {'@': 128}), 1: (1, {'@': 128}), 77: (1, {'@': 128}), 53: (1, {'@': 128}), 54: (1, {'@': 128}), 80: (1, {'@': 128}), 81: (1, {'@': 128}), 86: (1, {'@': 128}), 4: (1, {'@': 128}), 71: (1, {'@': 128}), 88: (1, {'@': 128}), 7: (1, {'@': 128}), 58: (1, {'@': 128}), 73: (1, {'@': 128}), 89: (1, {'@': 128}), 60: (1, {'@': 128}), 74: (1, {'@': 128}), 63: (1, {'@': 128}), 14: (1, {'@': 128}), 93: (1, {'@': 128}), 24: (1, {'@': 128}), 5: (1, {'@': 128})}, 434: {32: (0, 559), 33: (0, 260), 28: (0, 315), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 22: (0, 450), 36: (0, 550), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 46: (0, 547), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 435: {98: (0, 541), 143: (0, 504), 1: (0, 367), 97: (0, 195), 94: (0, 239), 99: (0, 276), 23: (0, 125), 144: (0, 137), 145: (0, 189), 102: (0, 129)}, 436: {95: (0, 115), 1: (0, 402), 104: (0, 193), 111: (0, 610), 101: (0, 149)}, 437: {32: (0, 559), 109: (0, 365), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 116: (0, 381), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 438: {29: (0, 590), 23: (1, {'@': 190}), 108: (1, {'@': 190}), 51: (1, {'@': 190}), 1: (1, {'@': 190}), 77: (1, {'@': 190}), 53: (1, {'@': 190}), 54: (1, {'@': 190}), 80: (1, {'@': 190}), 81: (1, {'@': 190}), 86: (1, {'@': 190}), 4: (1, {'@': 190}), 71: (1, {'@': 190}), 88: (1, {'@': 190}), 7: (1, {'@': 190}), 58: (1, {'@': 190}), 73: (1, {'@': 190}), 89: (1, {'@': 190}), 60: (1, {'@': 190}), 74: (1, {'@': 190}), 63: (1, {'@': 190}), 14: (1, {'@': 190}), 93: (1, {'@': 190}), 24: (1, {'@': 190}), 5: (1, {'@': 190})}, 439: {169: (0, 28), 21: (0, 222), 48: (0, 363), 34: (0, 342), 23: (0, 311), 181: (0, 490), 170: (0, 336), 171: (0, 366), 0: (0, 309), 152: (0, 169), 42: (0, 282), 172: (0, 253), 6: (0, 262), 32: (0, 485), 114: (0, 477), 173: (0, 471), 22: (0, 667), 18: (0, 425), 175: (0, 567), 44: (0, 498), 8: (0, 396), 174: (0, 501), 4: (0, 556), 5: (0, 642), 7: (0, 139), 14: (0, 204), 54: (0, 461), 176: (0, 393), 35: (0, 406), 148: (0, 405), 60: (0, 417), 177: (0, 254), 178: (0, 234), 179: (0, 228)}, 440: {23: (1, {'@': 129}), 108: (1, {'@': 129}), 51: (1, {'@': 129}), 1: (1, {'@': 129}), 77: (1, {'@': 129}), 53: (1, {'@': 129}), 54: (1, {'@': 129}), 80: (1, {'@': 129}), 81: (1, {'@': 129}), 86: (1, {'@': 129}), 4: (1, {'@': 129}), 71: (1, {'@': 129}), 88: (1, {'@': 129}), 7: (1, {'@': 129}), 58: (1, {'@': 129}), 73: (1, {'@': 129}), 89: (1, {'@': 129}), 60: (1, {'@': 129}), 74: (1, {'@': 129}), 63: (1, {'@': 129}), 14: (1, {'@': 129}), 93: (1, {'@': 129}), 24: (1, {'@': 129}), 29: (1, {'@': 129}), 5: (1, {'@': 129})}, 441: {88: (0, 78), 24: (0, 154), 126: (0, 305), 187: (0, 340), 131: (0, 335)}, 442: {32: (0, 559), 42: (0, 168), 4: (0, 556), 22: (0, 442), 36: (0, 536), 28: (0, 315), 5: (0, 642), 0: (0, 306), 1: (0, 560), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 141: (0, 582), 17: (0, 585), 44: (0, 584), 9: (0, 530), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 48: (0, 238), 18: (0, 651), 146: (0, 85), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 443: {20: (0, 109), 1: (0, 503), 168: (0, 275), 3: (0, 96)}, 444: {32: (0, 559), 41: (0, 201), 33: (0, 398), 40: (0, 251), 28: (0, 315), 36: (0, 230), 0: (0, 306), 1: (0, 560), 39: (0, 31), 26: (0, 20), 34: (0, 13), 35: (0, 8), 22: (0, 321), 141: (0, 582), 17: (0, 585), 38: (0, 55), 9: (0, 530), 29: (0, 587), 30: (0, 44), 45: (0, 245), 6: (0, 570), 21: (0, 631), 3: (0, 211), 18: (0, 651), 146: (0, 85), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 257), 47: (0, 243), 48: (0, 238), 49: (0, 259), 37: (0, 186), 23: (0, 134), 50: (0, 102)}, 445: {5: (1, {'@': 131}), 23: (1, {'@': 131}), 108: (1, {'@': 131}), 51: (1, {'@': 131}), 1: (1, {'@': 131}), 77: (1, {'@': 131}), 53: (1, {'@': 131}), 54: (1, {'@': 131}), 80: (1, {'@': 131}), 81: (1, {'@': 131}), 86: (1, {'@': 131}), 4: (1, {'@': 131}), 71: (1, {'@': 131}), 88: (1, {'@': 131}), 7: (1, {'@': 131}), 58: (1, {'@': 131}), 73: (1, {'@': 131}), 89: (1, {'@': 131}), 60: (1, {'@': 131}), 74: (1, {'@': 131}), 63: (1, {'@': 131}), 14: (1, {'@': 131}), 93: (1, {'@': 131}), 24: (1, {'@': 131}), 29: (1, {'@': 131})}, 446: {1: (0, 379)}, 447: {83: (0, 179), 1: (0, 574), 92: (1, {'@': 235}), 55: (1, {'@': 235}), 65: (1, {'@': 235}), 67: (1, {'@': 235}), 61: (1, {'@': 235}), 76: (1, {'@': 235}), 72: (1, {'@': 235}), 78: (1, {'@': 235}), 79: (1, {'@': 235})}, 448: {77: (1, {'@': 117}), 53: (1, {'@': 117}), 54: (1, {'@': 117}), 80: (1, {'@': 117}), 81: (1, {'@': 117}), 86: (1, {'@': 117}), 4: (1, {'@': 117}), 71: (1, {'@': 117}), 88: (1, {'@': 117}), 7: (1, {'@': 117}), 58: (1, {'@': 117}), 73: (1, {'@': 117}), 89: (1, {'@': 117}), 60: (1, {'@': 117}), 74: (1, {'@': 117}), 63: (1, {'@': 117}), 14: (1, {'@': 117}), 93: (1, {'@': 117})}, 449: {78: (1, {'@': 408}), 79: (1, {'@': 408}), 55: (1, {'@': 408}), 1: (1, {'@': 408}), 65: (1, {'@': 408}), 67: (1, {'@': 408}), 61: (1, {'@': 408}), 76: (1, {'@': 408}), 72: (1, {'@': 408}), 53: (1, {'@': 408}), 54: (1, {'@': 408}), 56: (1, {'@': 408}), 2: (1, {'@': 408}), 3: (1, {'@': 408}), 57: (1, {'@': 408}), 58: (1, {'@': 408}), 59: (1, {'@': 408}), 8: (1, {'@': 408}), 60: (1, {'@': 408}), 9: (1, {'@': 408}), 11: (1, {'@': 408}), 12: (1, {'@': 408}), 13: (1, {'@': 408}), 62: (1, {'@': 408}), 63: (1, {'@': 408}), 15: (1, {'@': 408}), 64: (1, {'@': 408}), 16: (1, {'@': 408}), 17: (1, {'@': 408}), 66: (1, {'@': 408}), 68: (1, {'@': 408}), 69: (1, {'@': 408}), 70: (1, {'@': 408}), 71: (1, {'@': 408}), 25: (1, {'@': 408}), 73: (1, {'@': 408}), 26: (1, {'@': 408}), 27: (1, {'@': 408}), 28: (1, {'@': 408}), 30: (1, {'@': 408}), 74: (1, {'@': 408}), 75: (1, {'@': 408}), 77: (1, {'@': 408}), 80: (1, {'@': 408}), 81: (1, {'@': 408}), 4: (1, {'@': 408}), 5: (1, {'@': 408}), 82: (1, {'@': 408}), 6: (1, {'@': 408}), 7: (1, {'@': 408}), 84: (1, {'@': 408}), 10: (1, {'@': 408}), 14: (1, {'@': 408}), 85: (1, {'@': 408}), 18: (1, {'@': 408}), 19: (1, {'@': 408}), 86: (1, {'@': 408}), 20: (1, {'@': 408}), 21: (1, {'@': 408}), 87: (1, {'@': 408}), 22: (1, {'@': 408}), 23: (1, {'@': 408}), 24: (1, {'@': 408}), 51: (1, {'@': 408}), 88: (1, {'@': 408}), 89: (1, {'@': 408}), 90: (1, {'@': 408}), 91: (1, {'@': 408}), 29: (1, {'@': 408}), 0: (1, {'@': 408}), 31: (1, {'@': 408}), 93: (1, {'@': 408})}, 450: {41: (0, 201), 32: (0, 559), 33: (0, 398), 40: (0, 657), 28: (0, 315), 36: (0, 230), 0: (0, 306), 1: (0, 560), 39: (0, 31), 26: (0, 20), 34: (0, 13), 35: (0, 8), 22: (0, 512), 141: (0, 582), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 45: (0, 245), 21: (0, 631), 6: (0, 570), 3: (0, 211), 18: (0, 651), 146: (0, 85), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 451: {51: (1, {'@': 400}), 1: (1, {'@': 400}), 24: (1, {'@': 400})}, 452: {141: (0, 582), 0: (0, 177), 146: (0, 380)}, 453: {23: (1, {'@': 127}), 108: (1, {'@': 127}), 51: (1, {'@': 127}), 1: (1, {'@': 127}), 77: (1, {'@': 127}), 53: (1, {'@': 127}), 54: (1, {'@': 127}), 80: (1, {'@': 127}), 81: (1, {'@': 127}), 86: (1, {'@': 127}), 4: (1, {'@': 127}), 71: (1, {'@': 127}), 88: (1, {'@': 127}), 7: (1, {'@': 127}), 58: (1, {'@': 127}), 73: (1, {'@': 127}), 89: (1, {'@': 127}), 60: (1, {'@': 127}), 74: (1, {'@': 127}), 63: (1, {'@': 127}), 14: (1, {'@': 127}), 93: (1, {'@': 127}), 24: (1, {'@': 127}), 29: (1, {'@': 127}), 5: (1, {'@': 127})}, 454: {1: (0, 571), 79: (0, 281)}, 455: {111: (0, 181), 112: (0, 436), 95: (0, 115), 1: (0, 75), 104: (0, 193), 101: (0, 149)}, 456: {0: (0, 107), 42: (0, 614)}, 457: {5: (0, 642), 152: (0, 351), 8: (0, 429), 0: (0, 107), 42: (0, 332), 35: (0, 338), 6: (0, 262), 148: (0, 316), 18: (0, 425)}, 458: {77: (1, {'@': 210}), 53: (1, {'@': 210}), 54: (1, {'@': 210}), 80: (1, {'@': 210}), 81: (1, {'@': 210}), 4: (1, {'@': 210}), 5: (1, {'@': 210}), 7: (1, {'@': 210}), 58: (1, {'@': 210}), 60: (1, {'@': 210}), 63: (1, {'@': 210}), 108: (1, {'@': 210}), 14: (1, {'@': 210}), 86: (1, {'@': 210}), 24: (1, {'@': 210}), 23: (1, {'@': 210}), 51: (1, {'@': 210}), 71: (1, {'@': 210}), 88: (1, {'@': 210}), 73: (1, {'@': 210}), 89: (1, {'@': 210}), 1: (1, {'@': 210}), 29: (1, {'@': 210}), 74: (1, {'@': 210}), 93: (1, {'@': 210})}, 459: {113: (0, 430), 5: (0, 246)}, 460: {1: (0, 508)}, 461: {22: (0, 667), 48: (0, 14)}, 462: {16: (1, {'@': 295}), 17: (1, {'@': 295}), 18: (1, {'@': 295}), 2: (1, {'@': 295}), 19: (1, {'@': 295}), 3: (1, {'@': 295}), 4: (1, {'@': 295}), 20: (1, {'@': 295}), 21: (1, {'@': 295}), 22: (1, {'@': 295}), 5: (1, {'@': 295}), 23: (1, {'@': 295}), 24: (1, {'@': 295}), 6: (1, {'@': 295}), 25: (1, {'@': 295}), 7: (1, {'@': 295}), 8: (1, {'@': 295}), 9: (1, {'@': 295}), 26: (1, {'@': 295}), 27: (1, {'@': 295}), 10: (1, {'@': 295}), 11: (1, {'@': 295}), 28: (1, {'@': 295}), 29: (1, {'@': 295}), 30: (1, {'@': 295}), 12: (1, {'@': 295}), 0: (1, {'@': 295}), 13: (1, {'@': 295}), 31: (1, {'@': 295}), 14: (1, {'@': 295}), 15: (1, {'@': 295})}, 463: {23: (0, 27), 108: (0, 348)}, 464: {21: (0, 457), 48: (0, 363), 34: (0, 342), 170: (0, 336), 171: (0, 366), 0: (0, 107), 23: (0, 518), 152: (0, 169), 42: (0, 519), 172: (0, 253), 6: (0, 262), 32: (0, 485), 173: (0, 471), 22: (0, 667), 18: (0, 425), 169: (0, 528), 44: (0, 498), 8: (0, 429), 174: (0, 501), 4: (0, 556), 5: (0, 642), 7: (0, 139), 14: (0, 204), 54: (0, 461), 35: (0, 406), 148: (0, 405), 60: (0, 417), 177: (0, 254), 178: (0, 234), 179: (0, 228)}, 465: {41: (0, 201), 32: (0, 559), 33: (0, 398), 28: (0, 315), 36: (0, 230), 0: (0, 306), 1: (0, 560), 39: (0, 455), 26: (0, 20), 34: (0, 13), 35: (0, 8), 141: (0, 582), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 22: (0, 401), 21: (0, 631), 6: (0, 570), 3: (0, 211), 18: (0, 651), 146: (0, 85), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 466: {1: (0, 551)}, 467: {53: (1, {'@': 412}), 56: (1, {'@': 412}), 55: (1, {'@': 412}), 54: (1, {'@': 412}), 2: (1, {'@': 412}), 3: (1, {'@': 412}), 57: (1, {'@': 412}), 58: (1, {'@': 412}), 59: (1, {'@': 412}), 8: (1, {'@': 412}), 60: (1, {'@': 412}), 9: (1, {'@': 412}), 11: (1, {'@': 412}), 12: (1, {'@': 412}), 61: (1, {'@': 412}), 13: (1, {'@': 412}), 62: (1, {'@': 412}), 63: (1, {'@': 412}), 15: (1, {'@': 412}), 64: (1, {'@': 412}), 16: (1, {'@': 412}), 17: (1, {'@': 412}), 65: (1, {'@': 412}), 66: (1, {'@': 412}), 67: (1, {'@': 412}), 68: (1, {'@': 412}), 69: (1, {'@': 412}), 70: (1, {'@': 412}), 71: (1, {'@': 412}), 25: (1, {'@': 412}), 72: (1, {'@': 412}), 73: (1, {'@': 412}), 26: (1, {'@': 412}), 27: (1, {'@': 412}), 1: (1, {'@': 412}), 28: (1, {'@': 412}), 30: (1, {'@': 412}), 75: (1, {'@': 412}), 74: (1, {'@': 412}), 76: (1, {'@': 412}), 77: (1, {'@': 412}), 78: (1, {'@': 412}), 79: (1, {'@': 412}), 80: (1, {'@': 412}), 81: (1, {'@': 412}), 4: (1, {'@': 412}), 5: (1, {'@': 412}), 82: (1, {'@': 412}), 6: (1, {'@': 412}), 83: (1, {'@': 412}), 7: (1, {'@': 412}), 84: (1, {'@': 412}), 10: (1, {'@': 412}), 14: (1, {'@': 412}), 85: (1, {'@': 412}), 18: (1, {'@': 412}), 19: (1, {'@': 412}), 86: (1, {'@': 412}), 20: (1, {'@': 412}), 21: (1, {'@': 412}), 87: (1, {'@': 412}), 22: (1, {'@': 412}), 23: (1, {'@': 412}), 24: (1, {'@': 412}), 51: (1, {'@': 412}), 88: (1, {'@': 412}), 89: (1, {'@': 412}), 90: (1, {'@': 412}), 91: (1, {'@': 412}), 92: (1, {'@': 412}), 29: (1, {'@': 412}), 0: (1, {'@': 412}), 31: (1, {'@': 412}), 93: (1, {'@': 412})}, 468: {22: (0, 346), 153: (0, 554), 96: (0, 537), 103: (0, 666), 6: (0, 561), 1: (0, 278)}, 469: {100: (0, 534)}, 470: {8: (0, 649)}, 471: {23: (1, {'@': 180}), 108: (1, {'@': 180}), 51: (1, {'@': 180}), 1: (1, {'@': 180}), 77: (1, {'@': 180}), 53: (1, {'@': 180}), 54: (1, {'@': 180}), 80: (1, {'@': 180}), 81: (1, {'@': 180}), 86: (1, {'@': 180}), 4: (1, {'@': 180}), 71: (1, {'@': 180}), 88: (1, {'@': 180}), 7: (1, {'@': 180}), 58: (1, {'@': 180}), 73: (1, {'@': 180}), 89: (1, {'@': 180}), 60: (1, {'@': 180}), 74: (1, {'@': 180}), 63: (1, {'@': 180}), 14: (1, {'@': 180}), 93: (1, {'@': 180}), 24: (1, {'@': 180}), 29: (1, {'@': 180}), 5: (1, {'@': 180})}, 472: {21: (0, 37), 23: (0, 165), 0: (0, 118), 114: (0, 477), 176: (0, 68)}, 473: {1: (1, {'@': 407}), 78: (1, {'@': 407}), 79: (1, {'@': 407}), 53: (1, {'@': 407}), 54: (1, {'@': 407}), 56: (1, {'@': 407}), 2: (1, {'@': 407}), 3: (1, {'@': 407}), 57: (1, {'@': 407}), 58: (1, {'@': 407}), 59: (1, {'@': 407}), 8: (1, {'@': 407}), 60: (1, {'@': 407}), 9: (1, {'@': 407}), 11: (1, {'@': 407}), 12: (1, {'@': 407}), 13: (1, {'@': 407}), 62: (1, {'@': 407}), 63: (1, {'@': 407}), 15: (1, {'@': 407}), 64: (1, {'@': 407}), 16: (1, {'@': 407}), 17: (1, {'@': 407}), 66: (1, {'@': 407}), 68: (1, {'@': 407}), 69: (1, {'@': 407}), 70: (1, {'@': 407}), 71: (1, {'@': 407}), 25: (1, {'@': 407}), 73: (1, {'@': 407}), 26: (1, {'@': 407}), 27: (1, {'@': 407}), 28: (1, {'@': 407}), 30: (1, {'@': 407}), 74: (1, {'@': 407}), 75: (1, {'@': 407}), 77: (1, {'@': 407}), 80: (1, {'@': 407}), 81: (1, {'@': 407}), 4: (1, {'@': 407}), 5: (1, {'@': 407}), 82: (1, {'@': 407}), 6: (1, {'@': 407}), 7: (1, {'@': 407}), 84: (1, {'@': 407}), 10: (1, {'@': 407}), 14: (1, {'@': 407}), 85: (1, {'@': 407}), 18: (1, {'@': 407}), 19: (1, {'@': 407}), 86: (1, {'@': 407}), 20: (1, {'@': 407}), 21: (1, {'@': 407}), 87: (1, {'@': 407}), 22: (1, {'@': 407}), 23: (1, {'@': 407}), 24: (1, {'@': 407}), 51: (1, {'@': 407}), 88: (1, {'@': 407}), 89: (1, {'@': 407}), 90: (1, {'@': 407}), 91: (1, {'@': 407}), 29: (1, {'@': 407}), 0: (1, {'@': 407}), 31: (1, {'@': 407}), 93: (1, {'@': 407})}, 474: {51: (1, {'@': 403}), 24: (1, {'@': 403})}, 475: {169: (0, 28), 21: (0, 222), 48: (0, 363), 34: (0, 342), 23: (0, 311), 170: (0, 336), 171: (0, 366), 0: (0, 309), 152: (0, 169), 42: (0, 282), 172: (0, 253), 6: (0, 262), 32: (0, 485), 114: (0, 477), 173: (0, 471), 22: (0, 667), 18: (0, 425), 44: (0, 498), 8: (0, 429), 174: (0, 501), 4: (0, 556), 5: (0, 642), 175: (0, 458), 7: (0, 139), 14: (0, 204), 54: (0, 461), 176: (0, 393), 35: (0, 406), 148: (0, 405), 60: (0, 417), 177: (0, 254), 178: (0, 234), 179: (0, 228)}, 476: {126: (0, 305), 131: (0, 21), 88: (0, 78), 24: (0, 527)}, 477: {23: (1, {'@': 104}), 108: (1, {'@': 104}), 51: (1, {'@': 104}), 1: (1, {'@': 104}), 77: (1, {'@': 104}), 53: (1, {'@': 104}), 54: (1, {'@': 104}), 80: (1, {'@': 104}), 81: (1, {'@': 104}), 86: (1, {'@': 104}), 4: (1, {'@': 104}), 71: (1, {'@': 104}), 88: (1, {'@': 104}), 7: (1, {'@': 104}), 58: (1, {'@': 104}), 73: (1, {'@': 104}), 89: (1, {'@': 104}), 60: (1, {'@': 104}), 74: (1, {'@': 104}), 63: (1, {'@': 104}), 14: (1, {'@': 104}), 93: (1, {'@': 104}), 24: (1, {'@': 104}), 122: (1, {'@': 104}), 5: (1, {'@': 104}), 29: (1, {'@': 104})}, 478: {77: (1, {'@': 205}), 53: (1, {'@': 205}), 54: (1, {'@': 205}), 80: (1, {'@': 205}), 81: (1, {'@': 205}), 86: (1, {'@': 205}), 4: (1, {'@': 205}), 71: (1, {'@': 205}), 88: (1, {'@': 205}), 7: (1, {'@': 205}), 58: (1, {'@': 205}), 73: (1, {'@': 205}), 89: (1, {'@': 205}), 60: (1, {'@': 205}), 74: (1, {'@': 205}), 63: (1, {'@': 205}), 14: (1, {'@': 205}), 93: (1, {'@': 205})}, 479: {1: (0, 459)}, 480: {24: (0, 399)}, 481: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 109: (0, 479), 23: (0, 134), 50: (0, 102)}, 482: {29: (0, 389), 23: (1, {'@': 120}), 108: (1, {'@': 120}), 51: (1, {'@': 120}), 1: (1, {'@': 120}), 77: (1, {'@': 120}), 53: (1, {'@': 120}), 54: (1, {'@': 120}), 80: (1, {'@': 120}), 81: (1, {'@': 120}), 86: (1, {'@': 120}), 4: (1, {'@': 120}), 71: (1, {'@': 120}), 88: (1, {'@': 120}), 7: (1, {'@': 120}), 58: (1, {'@': 120}), 73: (1, {'@': 120}), 89: (1, {'@': 120}), 60: (1, {'@': 120}), 74: (1, {'@': 120}), 63: (1, {'@': 120}), 14: (1, {'@': 120}), 93: (1, {'@': 120}), 24: (1, {'@': 120}), 5: (1, {'@': 120})}, 483: {77: (1, {'@': 118}), 53: (1, {'@': 118}), 54: (1, {'@': 118}), 80: (1, {'@': 118}), 81: (1, {'@': 118}), 86: (1, {'@': 118}), 4: (1, {'@': 118}), 71: (1, {'@': 118}), 88: (1, {'@': 118}), 7: (1, {'@': 118}), 58: (1, {'@': 118}), 73: (1, {'@': 118}), 89: (1, {'@': 118}), 60: (1, {'@': 118}), 74: (1, {'@': 118}), 63: (1, {'@': 118}), 14: (1, {'@': 118}), 93: (1, {'@': 118})}, 484: {51: (0, 525), 24: (1, {'@': 217})}, 485: {23: (1, {'@': 184}), 108: (1, {'@': 184}), 51: (1, {'@': 184}), 1: (1, {'@': 184}), 77: (1, {'@': 184}), 53: (1, {'@': 184}), 54: (1, {'@': 184}), 80: (1, {'@': 184}), 81: (1, {'@': 184}), 86: (1, {'@': 184}), 4: (1, {'@': 184}), 71: (1, {'@': 184}), 88: (1, {'@': 184}), 7: (1, {'@': 184}), 58: (1, {'@': 184}), 73: (1, {'@': 184}), 89: (1, {'@': 184}), 60: (1, {'@': 184}), 74: (1, {'@': 184}), 63: (1, {'@': 184}), 14: (1, {'@': 184}), 93: (1, {'@': 184}), 24: (1, {'@': 184}), 29: (1, {'@': 184}), 5: (1, {'@': 184})}, 486: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 109: (0, 616), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102), 24: (1, {'@': 212}), 1: (1, {'@': 212})}, 487: {77: (1, {'@': 140}), 53: (1, {'@': 140}), 54: (1, {'@': 140}), 80: (1, {'@': 140}), 81: (1, {'@': 140}), 86: (1, {'@': 140}), 4: (1, {'@': 140}), 71: (1, {'@': 140}), 88: (1, {'@': 140}), 7: (1, {'@': 140}), 58: (1, {'@': 140}), 73: (1, {'@': 140}), 89: (1, {'@': 140}), 60: (1, {'@': 140}), 74: (1, {'@': 140}), 63: (1, {'@': 140}), 14: (1, {'@': 140}), 93: (1, {'@': 140}), 5: (1, {'@': 140}), 108: (1, {'@': 140}), 23: (1, {'@': 140}), 24: (1, {'@': 140}), 51: (1, {'@': 140}), 1: (1, {'@': 140}), 29: (1, {'@': 140})}, 488: {51: (1, {'@': 349}), 1: (1, {'@': 349})}, 489: {23: (1, {'@': 188}), 108: (1, {'@': 188}), 51: (1, {'@': 188}), 1: (1, {'@': 188}), 77: (1, {'@': 188}), 53: (1, {'@': 188}), 54: (1, {'@': 188}), 80: (1, {'@': 188}), 81: (1, {'@': 188}), 86: (1, {'@': 188}), 4: (1, {'@': 188}), 71: (1, {'@': 188}), 88: (1, {'@': 188}), 7: (1, {'@': 188}), 58: (1, {'@': 188}), 73: (1, {'@': 188}), 89: (1, {'@': 188}), 60: (1, {'@': 188}), 74: (1, {'@': 188}), 63: (1, {'@': 188}), 14: (1, {'@': 188}), 93: (1, {'@': 188}), 24: (1, {'@': 188}), 29: (1, {'@': 188}), 5: (1, {'@': 188})}, 490: {1: (0, 372)}, 491: {51: (0, 377), 192: (0, 484), 24: (1, {'@': 215})}, 492: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 42: (0, 409), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 18: (0, 411), 41: (0, 91), 8: (0, 413), 4: (0, 556), 109: (0, 414), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 152: (0, 515), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 493: {51: (1, {'@': 358}), 1: (1, {'@': 358})}, 494: {53: (1, {'@': 261}), 54: (1, {'@': 261}), 55: (1, {'@': 261}), 56: (1, {'@': 261}), 2: (1, {'@': 261}), 3: (1, {'@': 261}), 57: (1, {'@': 261}), 58: (1, {'@': 261}), 59: (1, {'@': 261}), 8: (1, {'@': 261}), 60: (1, {'@': 261}), 9: (1, {'@': 261}), 11: (1, {'@': 261}), 12: (1, {'@': 261}), 61: (1, {'@': 261}), 13: (1, {'@': 261}), 62: (1, {'@': 261}), 63: (1, {'@': 261}), 94: (1, {'@': 261}), 15: (1, {'@': 261}), 64: (1, {'@': 261}), 16: (1, {'@': 261}), 17: (1, {'@': 261}), 99: (1, {'@': 261}), 65: (1, {'@': 261}), 66: (1, {'@': 261}), 67: (1, {'@': 261}), 68: (1, {'@': 261}), 69: (1, {'@': 261}), 95: (1, {'@': 261}), 70: (1, {'@': 261}), 71: (1, {'@': 261}), 25: (1, {'@': 261}), 72: (1, {'@': 261}), 73: (1, {'@': 261}), 26: (1, {'@': 261}), 27: (1, {'@': 261}), 1: (1, {'@': 261}), 28: (1, {'@': 261}), 30: (1, {'@': 261}), 74: (1, {'@': 261}), 75: (1, {'@': 261}), 76: (1, {'@': 261}), 101: (1, {'@': 261}), 77: (1, {'@': 261}), 78: (1, {'@': 261}), 79: (1, {'@': 261}), 80: (1, {'@': 261}), 81: (1, {'@': 261}), 4: (1, {'@': 261}), 5: (1, {'@': 261}), 82: (1, {'@': 261}), 6: (1, {'@': 261}), 83: (1, {'@': 261}), 7: (1, {'@': 261}), 102: (1, {'@': 261}), 84: (1, {'@': 261}), 10: (1, {'@': 261}), 97: (1, {'@': 261}), 14: (1, {'@': 261}), 85: (1, {'@': 261}), 18: (1, {'@': 261}), 19: (1, {'@': 261}), 86: (1, {'@': 261}), 20: (1, {'@': 261}), 104: (1, {'@': 261}), 21: (1, {'@': 261}), 87: (1, {'@': 261}), 23: (1, {'@': 261}), 22: (1, {'@': 261}), 24: (1, {'@': 261}), 51: (1, {'@': 261}), 88: (1, {'@': 261}), 98: (1, {'@': 261}), 89: (1, {'@': 261}), 90: (1, {'@': 261}), 91: (1, {'@': 261}), 92: (1, {'@': 261}), 29: (1, {'@': 261}), 0: (1, {'@': 261}), 31: (1, {'@': 261}), 93: (1, {'@': 261}), 96: (1, {'@': 261})}, 495: {53: (1, {'@': 279}), 54: (1, {'@': 279}), 55: (1, {'@': 279}), 56: (1, {'@': 279}), 2: (1, {'@': 279}), 3: (1, {'@': 279}), 57: (1, {'@': 279}), 58: (1, {'@': 279}), 59: (1, {'@': 279}), 8: (1, {'@': 279}), 60: (1, {'@': 279}), 9: (1, {'@': 279}), 11: (1, {'@': 279}), 12: (1, {'@': 279}), 61: (1, {'@': 279}), 13: (1, {'@': 279}), 62: (1, {'@': 279}), 63: (1, {'@': 279}), 94: (1, {'@': 279}), 15: (1, {'@': 279}), 64: (1, {'@': 279}), 16: (1, {'@': 279}), 17: (1, {'@': 279}), 99: (1, {'@': 279}), 65: (1, {'@': 279}), 66: (1, {'@': 279}), 67: (1, {'@': 279}), 68: (1, {'@': 279}), 69: (1, {'@': 279}), 95: (1, {'@': 279}), 70: (1, {'@': 279}), 71: (1, {'@': 279}), 96: (1, {'@': 279}), 25: (1, {'@': 279}), 72: (1, {'@': 279}), 73: (1, {'@': 279}), 26: (1, {'@': 279}), 27: (1, {'@': 279}), 1: (1, {'@': 279}), 28: (1, {'@': 279}), 30: (1, {'@': 279}), 74: (1, {'@': 279}), 75: (1, {'@': 279}), 76: (1, {'@': 279}), 101: (1, {'@': 279}), 77: (1, {'@': 279}), 78: (1, {'@': 279}), 79: (1, {'@': 279}), 80: (1, {'@': 279}), 81: (1, {'@': 279}), 4: (1, {'@': 279}), 5: (1, {'@': 279}), 82: (1, {'@': 279}), 6: (1, {'@': 279}), 83: (1, {'@': 279}), 7: (1, {'@': 279}), 102: (1, {'@': 279}), 84: (1, {'@': 279}), 10: (1, {'@': 279}), 103: (1, {'@': 279}), 97: (1, {'@': 279}), 14: (1, {'@': 279}), 85: (1, {'@': 279}), 18: (1, {'@': 279}), 19: (1, {'@': 279}), 86: (1, {'@': 279}), 20: (1, {'@': 279}), 104: (1, {'@': 279}), 21: (1, {'@': 279}), 87: (1, {'@': 279}), 22: (1, {'@': 279}), 23: (1, {'@': 279}), 24: (1, {'@': 279}), 51: (1, {'@': 279}), 88: (1, {'@': 279}), 98: (1, {'@': 279}), 89: (1, {'@': 279}), 90: (1, {'@': 279}), 91: (1, {'@': 279}), 92: (1, {'@': 279}), 29: (1, {'@': 279}), 0: (1, {'@': 279}), 31: (1, {'@': 279}), 93: (1, {'@': 279}), 100: (1, {'@': 279})}, 496: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 109: (0, 294), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 497: {169: (0, 28), 21: (0, 222), 48: (0, 363), 34: (0, 342), 23: (0, 311), 170: (0, 336), 171: (0, 366), 0: (0, 309), 152: (0, 169), 42: (0, 282), 172: (0, 253), 6: (0, 262), 32: (0, 485), 175: (0, 529), 114: (0, 477), 173: (0, 471), 22: (0, 667), 18: (0, 425), 44: (0, 498), 8: (0, 429), 174: (0, 501), 4: (0, 556), 5: (0, 642), 7: (0, 139), 14: (0, 204), 54: (0, 461), 176: (0, 393), 35: (0, 406), 148: (0, 405), 60: (0, 417), 177: (0, 254), 178: (0, 234), 179: (0, 228), 1: (1, {'@': 192})}, 498: {23: (1, {'@': 179}), 108: (1, {'@': 179}), 51: (1, {'@': 179}), 1: (1, {'@': 179}), 77: (1, {'@': 179}), 53: (1, {'@': 179}), 54: (1, {'@': 179}), 80: (1, {'@': 179}), 81: (1, {'@': 179}), 86: (1, {'@': 179}), 4: (1, {'@': 179}), 71: (1, {'@': 179}), 88: (1, {'@': 179}), 7: (1, {'@': 179}), 58: (1, {'@': 179}), 73: (1, {'@': 179}), 89: (1, {'@': 179}), 60: (1, {'@': 179}), 74: (1, {'@': 179}), 63: (1, {'@': 179}), 14: (1, {'@': 179}), 93: (1, {'@': 179}), 24: (1, {'@': 179}), 29: (1, {'@': 179}), 5: (1, {'@': 179})}, 499: {29: (0, 440), 23: (1, {'@': 130}), 108: (1, {'@': 130}), 51: (1, {'@': 130}), 1: (1, {'@': 130}), 77: (1, {'@': 130}), 53: (1, {'@': 130}), 54: (1, {'@': 130}), 80: (1, {'@': 130}), 81: (1, {'@': 130}), 86: (1, {'@': 130}), 4: (1, {'@': 130}), 71: (1, {'@': 130}), 88: (1, {'@': 130}), 7: (1, {'@': 130}), 58: (1, {'@': 130}), 73: (1, {'@': 130}), 89: (1, {'@': 130}), 60: (1, {'@': 130}), 74: (1, {'@': 130}), 63: (1, {'@': 130}), 14: (1, {'@': 130}), 93: (1, {'@': 130}), 24: (1, {'@': 130}), 5: (1, {'@': 130})}, 500: {120: (0, 578), 53: (1, {'@': 274}), 54: (1, {'@': 274}), 55: (1, {'@': 274}), 56: (1, {'@': 274}), 2: (1, {'@': 274}), 3: (1, {'@': 274}), 57: (1, {'@': 274}), 58: (1, {'@': 274}), 59: (1, {'@': 274}), 8: (1, {'@': 274}), 60: (1, {'@': 274}), 9: (1, {'@': 274}), 11: (1, {'@': 274}), 12: (1, {'@': 274}), 61: (1, {'@': 274}), 13: (1, {'@': 274}), 62: (1, {'@': 274}), 63: (1, {'@': 274}), 94: (1, {'@': 274}), 15: (1, {'@': 274}), 64: (1, {'@': 274}), 16: (1, {'@': 274}), 17: (1, {'@': 274}), 99: (1, {'@': 274}), 65: (1, {'@': 274}), 66: (1, {'@': 274}), 67: (1, {'@': 274}), 68: (1, {'@': 274}), 69: (1, {'@': 274}), 95: (1, {'@': 274}), 70: (1, {'@': 274}), 71: (1, {'@': 274}), 96: (1, {'@': 274}), 25: (1, {'@': 274}), 72: (1, {'@': 274}), 73: (1, {'@': 274}), 26: (1, {'@': 274}), 27: (1, {'@': 274}), 1: (1, {'@': 274}), 28: (1, {'@': 274}), 30: (1, {'@': 274}), 74: (1, {'@': 274}), 75: (1, {'@': 274}), 76: (1, {'@': 274}), 101: (1, {'@': 274}), 77: (1, {'@': 274}), 78: (1, {'@': 274}), 79: (1, {'@': 274}), 80: (1, {'@': 274}), 81: (1, {'@': 274}), 4: (1, {'@': 274}), 5: (1, {'@': 274}), 82: (1, {'@': 274}), 6: (1, {'@': 274}), 83: (1, {'@': 274}), 7: (1, {'@': 274}), 102: (1, {'@': 274}), 84: (1, {'@': 274}), 10: (1, {'@': 274}), 103: (1, {'@': 274}), 97: (1, {'@': 274}), 14: (1, {'@': 274}), 85: (1, {'@': 274}), 18: (1, {'@': 274}), 19: (1, {'@': 274}), 86: (1, {'@': 274}), 20: (1, {'@': 274}), 104: (1, {'@': 274}), 21: (1, {'@': 274}), 87: (1, {'@': 274}), 22: (1, {'@': 274}), 23: (1, {'@': 274}), 24: (1, {'@': 274}), 51: (1, {'@': 274}), 88: (1, {'@': 274}), 98: (1, {'@': 274}), 89: (1, {'@': 274}), 90: (1, {'@': 274}), 91: (1, {'@': 274}), 92: (1, {'@': 274}), 29: (1, {'@': 274}), 0: (1, {'@': 274}), 31: (1, {'@': 274}), 93: (1, {'@': 274}), 100: (1, {'@': 274})}, 501: {22: (0, 323)}, 502: {32: (0, 559), 109: (0, 365), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 116: (0, 391), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 503: {53: (1, {'@': 249}), 54: (1, {'@': 249}), 55: (1, {'@': 249}), 56: (1, {'@': 249}), 2: (1, {'@': 249}), 3: (1, {'@': 249}), 57: (1, {'@': 249}), 58: (1, {'@': 249}), 59: (1, {'@': 249}), 8: (1, {'@': 249}), 60: (1, {'@': 249}), 9: (1, {'@': 249}), 11: (1, {'@': 249}), 12: (1, {'@': 249}), 61: (1, {'@': 249}), 13: (1, {'@': 249}), 62: (1, {'@': 249}), 63: (1, {'@': 249}), 15: (1, {'@': 249}), 64: (1, {'@': 249}), 16: (1, {'@': 249}), 17: (1, {'@': 249}), 65: (1, {'@': 249}), 66: (1, {'@': 249}), 67: (1, {'@': 249}), 68: (1, {'@': 249}), 69: (1, {'@': 249}), 95: (1, {'@': 249}), 70: (1, {'@': 249}), 71: (1, {'@': 249}), 25: (1, {'@': 249}), 72: (1, {'@': 249}), 73: (1, {'@': 249}), 26: (1, {'@': 249}), 27: (1, {'@': 249}), 1: (1, {'@': 249}), 28: (1, {'@': 249}), 30: (1, {'@': 249}), 74: (1, {'@': 249}), 75: (1, {'@': 249}), 76: (1, {'@': 249}), 101: (1, {'@': 249}), 77: (1, {'@': 249}), 78: (1, {'@': 249}), 79: (1, {'@': 249}), 80: (1, {'@': 249}), 81: (1, {'@': 249}), 4: (1, {'@': 249}), 5: (1, {'@': 249}), 82: (1, {'@': 249}), 6: (1, {'@': 249}), 83: (1, {'@': 249}), 7: (1, {'@': 249}), 84: (1, {'@': 249}), 10: (1, {'@': 249}), 14: (1, {'@': 249}), 85: (1, {'@': 249}), 18: (1, {'@': 249}), 19: (1, {'@': 249}), 86: (1, {'@': 249}), 20: (1, {'@': 249}), 104: (1, {'@': 249}), 21: (1, {'@': 249}), 87: (1, {'@': 249}), 22: (1, {'@': 249}), 23: (1, {'@': 249}), 24: (1, {'@': 249}), 51: (1, {'@': 249}), 88: (1, {'@': 249}), 89: (1, {'@': 249}), 90: (1, {'@': 249}), 91: (1, {'@': 249}), 92: (1, {'@': 249}), 29: (1, {'@': 249}), 0: (1, {'@': 249}), 31: (1, {'@': 249}), 93: (1, {'@': 249})}, 504: {99: (0, 276), 1: (0, 543), 23: (0, 125), 97: (0, 195), 145: (0, 552), 102: (0, 129)}, 505: {22: (0, 346), 100: (0, 668), 103: (0, 666), 6: (0, 561)}, 506: {78: (1, {'@': 417}), 79: (1, {'@': 417}), 55: (1, {'@': 417}), 65: (1, {'@': 417}), 67: (1, {'@': 417}), 104: (1, {'@': 417}), 21: (1, {'@': 417}), 95: (1, {'@': 417}), 83: (1, {'@': 417}), 72: (1, {'@': 417}), 1: (1, {'@': 417}), 92: (1, {'@': 417}), 61: (1, {'@': 417}), 76: (1, {'@': 417}), 101: (1, {'@': 417}), 53: (1, {'@': 417}), 56: (1, {'@': 417}), 54: (1, {'@': 417}), 2: (1, {'@': 417}), 3: (1, {'@': 417}), 57: (1, {'@': 417}), 58: (1, {'@': 417}), 59: (1, {'@': 417}), 8: (1, {'@': 417}), 60: (1, {'@': 417}), 9: (1, {'@': 417}), 11: (1, {'@': 417}), 12: (1, {'@': 417}), 13: (1, {'@': 417}), 62: (1, {'@': 417}), 63: (1, {'@': 417}), 15: (1, {'@': 417}), 64: (1, {'@': 417}), 16: (1, {'@': 417}), 17: (1, {'@': 417}), 66: (1, {'@': 417}), 68: (1, {'@': 417}), 69: (1, {'@': 417}), 70: (1, {'@': 417}), 71: (1, {'@': 417}), 25: (1, {'@': 417}), 73: (1, {'@': 417}), 26: (1, {'@': 417}), 27: (1, {'@': 417}), 28: (1, {'@': 417}), 30: (1, {'@': 417}), 75: (1, {'@': 417}), 74: (1, {'@': 417}), 77: (1, {'@': 417}), 80: (1, {'@': 417}), 81: (1, {'@': 417}), 4: (1, {'@': 417}), 5: (1, {'@': 417}), 82: (1, {'@': 417}), 6: (1, {'@': 417}), 7: (1, {'@': 417}), 84: (1, {'@': 417}), 10: (1, {'@': 417}), 14: (1, {'@': 417}), 85: (1, {'@': 417}), 18: (1, {'@': 417}), 19: (1, {'@': 417}), 86: (1, {'@': 417}), 20: (1, {'@': 417}), 87: (1, {'@': 417}), 22: (1, {'@': 417}), 23: (1, {'@': 417}), 24: (1, {'@': 417}), 51: (1, {'@': 417}), 88: (1, {'@': 417}), 89: (1, {'@': 417}), 90: (1, {'@': 417}), 91: (1, {'@': 417}), 29: (1, {'@': 417}), 0: (1, {'@': 417}), 31: (1, {'@': 417}), 93: (1, {'@': 417})}, 507: {16: (1, {'@': 306}), 17: (1, {'@': 306}), 18: (1, {'@': 306}), 2: (1, {'@': 306}), 19: (1, {'@': 306}), 3: (1, {'@': 306}), 4: (1, {'@': 306}), 20: (1, {'@': 306}), 21: (1, {'@': 306}), 22: (1, {'@': 306}), 5: (1, {'@': 306}), 23: (1, {'@': 306}), 24: (1, {'@': 306}), 6: (1, {'@': 306}), 25: (1, {'@': 306}), 7: (1, {'@': 306}), 8: (1, {'@': 306}), 9: (1, {'@': 306}), 26: (1, {'@': 306}), 27: (1, {'@': 306}), 10: (1, {'@': 306}), 11: (1, {'@': 306}), 28: (1, {'@': 306}), 29: (1, {'@': 306}), 30: (1, {'@': 306}), 12: (1, {'@': 306}), 0: (1, {'@': 306}), 13: (1, {'@': 306}), 31: (1, {'@': 306}), 14: (1, {'@': 306}), 15: (1, {'@': 306})}, 508: {113: (0, 412), 5: (0, 246)}, 509: {53: (1, {'@': 413}), 56: (1, {'@': 413}), 55: (1, {'@': 413}), 54: (1, {'@': 413}), 2: (1, {'@': 413}), 3: (1, {'@': 413}), 57: (1, {'@': 413}), 58: (1, {'@': 413}), 59: (1, {'@': 413}), 8: (1, {'@': 413}), 60: (1, {'@': 413}), 9: (1, {'@': 413}), 11: (1, {'@': 413}), 12: (1, {'@': 413}), 61: (1, {'@': 413}), 13: (1, {'@': 413}), 62: (1, {'@': 413}), 63: (1, {'@': 413}), 15: (1, {'@': 413}), 64: (1, {'@': 413}), 16: (1, {'@': 413}), 17: (1, {'@': 413}), 65: (1, {'@': 413}), 66: (1, {'@': 413}), 67: (1, {'@': 413}), 68: (1, {'@': 413}), 69: (1, {'@': 413}), 70: (1, {'@': 413}), 71: (1, {'@': 413}), 25: (1, {'@': 413}), 72: (1, {'@': 413}), 73: (1, {'@': 413}), 26: (1, {'@': 413}), 27: (1, {'@': 413}), 1: (1, {'@': 413}), 28: (1, {'@': 413}), 30: (1, {'@': 413}), 75: (1, {'@': 413}), 74: (1, {'@': 413}), 76: (1, {'@': 413}), 77: (1, {'@': 413}), 78: (1, {'@': 413}), 79: (1, {'@': 413}), 80: (1, {'@': 413}), 81: (1, {'@': 413}), 4: (1, {'@': 413}), 5: (1, {'@': 413}), 82: (1, {'@': 413}), 6: (1, {'@': 413}), 83: (1, {'@': 413}), 7: (1, {'@': 413}), 84: (1, {'@': 413}), 10: (1, {'@': 413}), 14: (1, {'@': 413}), 85: (1, {'@': 413}), 18: (1, {'@': 413}), 19: (1, {'@': 413}), 86: (1, {'@': 413}), 20: (1, {'@': 413}), 21: (1, {'@': 413}), 87: (1, {'@': 413}), 22: (1, {'@': 413}), 23: (1, {'@': 413}), 24: (1, {'@': 413}), 51: (1, {'@': 413}), 88: (1, {'@': 413}), 89: (1, {'@': 413}), 90: (1, {'@': 413}), 91: (1, {'@': 413}), 92: (1, {'@': 413}), 29: (1, {'@': 413}), 0: (1, {'@': 413}), 31: (1, {'@': 413}), 93: (1, {'@': 413})}, 510: {16: (1, {'@': 302}), 17: (1, {'@': 302}), 18: (1, {'@': 302}), 2: (1, {'@': 302}), 19: (1, {'@': 302}), 3: (1, {'@': 302}), 4: (1, {'@': 302}), 20: (1, {'@': 302}), 21: (1, {'@': 302}), 22: (1, {'@': 302}), 5: (1, {'@': 302}), 23: (1, {'@': 302}), 24: (1, {'@': 302}), 6: (1, {'@': 302}), 25: (1, {'@': 302}), 7: (1, {'@': 302}), 8: (1, {'@': 302}), 9: (1, {'@': 302}), 26: (1, {'@': 302}), 27: (1, {'@': 302}), 10: (1, {'@': 302}), 11: (1, {'@': 302}), 28: (1, {'@': 302}), 29: (1, {'@': 302}), 30: (1, {'@': 302}), 12: (1, {'@': 302}), 0: (1, {'@': 302}), 13: (1, {'@': 302}), 31: (1, {'@': 302}), 14: (1, {'@': 302}), 15: (1, {'@': 302})}, 511: {22: (0, 326)}, 512: {41: (0, 201), 32: (0, 559), 33: (0, 398), 28: (0, 315), 36: (0, 230), 0: (0, 306), 1: (0, 560), 39: (0, 31), 26: (0, 20), 34: (0, 13), 35: (0, 8), 141: (0, 582), 17: (0, 585), 9: (0, 530), 29: (0, 587), 30: (0, 44), 22: (0, 465), 45: (0, 641), 21: (0, 631), 6: (0, 570), 3: (0, 211), 18: (0, 651), 146: (0, 85), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 513: {8: (0, 119), 42: (0, 178), 18: (0, 157), 0: (0, 107)}, 514: {23: (1, {'@': 109}), 108: (1, {'@': 109}), 51: (1, {'@': 109}), 1: (1, {'@': 109}), 77: (1, {'@': 109}), 53: (1, {'@': 109}), 54: (1, {'@': 109}), 80: (1, {'@': 109}), 81: (1, {'@': 109}), 86: (1, {'@': 109}), 4: (1, {'@': 109}), 71: (1, {'@': 109}), 88: (1, {'@': 109}), 7: (1, {'@': 109}), 58: (1, {'@': 109}), 73: (1, {'@': 109}), 89: (1, {'@': 109}), 60: (1, {'@': 109}), 74: (1, {'@': 109}), 63: (1, {'@': 109}), 14: (1, {'@': 109}), 93: (1, {'@': 109}), 24: (1, {'@': 109}), 5: (1, {'@': 109}), 29: (1, {'@': 109})}, 515: {1: (0, 635)}, 516: {53: (1, {'@': 283}), 54: (1, {'@': 283}), 55: (1, {'@': 283}), 56: (1, {'@': 283}), 2: (1, {'@': 283}), 3: (1, {'@': 283}), 57: (1, {'@': 283}), 58: (1, {'@': 283}), 59: (1, {'@': 283}), 8: (1, {'@': 283}), 60: (1, {'@': 283}), 9: (1, {'@': 283}), 11: (1, {'@': 283}), 12: (1, {'@': 283}), 61: (1, {'@': 283}), 13: (1, {'@': 283}), 62: (1, {'@': 283}), 63: (1, {'@': 283}), 94: (1, {'@': 283}), 15: (1, {'@': 283}), 64: (1, {'@': 283}), 16: (1, {'@': 283}), 17: (1, {'@': 283}), 99: (1, {'@': 283}), 65: (1, {'@': 283}), 66: (1, {'@': 283}), 67: (1, {'@': 283}), 68: (1, {'@': 283}), 69: (1, {'@': 283}), 95: (1, {'@': 283}), 70: (1, {'@': 283}), 71: (1, {'@': 283}), 96: (1, {'@': 283}), 25: (1, {'@': 283}), 72: (1, {'@': 283}), 73: (1, {'@': 283}), 26: (1, {'@': 283}), 27: (1, {'@': 283}), 1: (1, {'@': 283}), 28: (1, {'@': 283}), 30: (1, {'@': 283}), 74: (1, {'@': 283}), 75: (1, {'@': 283}), 76: (1, {'@': 283}), 101: (1, {'@': 283}), 77: (1, {'@': 283}), 78: (1, {'@': 283}), 79: (1, {'@': 283}), 80: (1, {'@': 283}), 81: (1, {'@': 283}), 4: (1, {'@': 283}), 5: (1, {'@': 283}), 82: (1, {'@': 283}), 6: (1, {'@': 283}), 83: (1, {'@': 283}), 7: (1, {'@': 283}), 102: (1, {'@': 283}), 84: (1, {'@': 283}), 10: (1, {'@': 283}), 103: (1, {'@': 283}), 97: (1, {'@': 283}), 14: (1, {'@': 283}), 85: (1, {'@': 283}), 18: (1, {'@': 283}), 19: (1, {'@': 283}), 86: (1, {'@': 283}), 20: (1, {'@': 283}), 104: (1, {'@': 283}), 21: (1, {'@': 283}), 87: (1, {'@': 283}), 22: (1, {'@': 283}), 23: (1, {'@': 283}), 24: (1, {'@': 283}), 51: (1, {'@': 283}), 88: (1, {'@': 283}), 98: (1, {'@': 283}), 89: (1, {'@': 283}), 90: (1, {'@': 283}), 91: (1, {'@': 283}), 92: (1, {'@': 283}), 29: (1, {'@': 283}), 0: (1, {'@': 283}), 31: (1, {'@': 283}), 93: (1, {'@': 283}), 100: (1, {'@': 283})}, 517: {122: (0, 623)}, 518: {5: (0, 642), 152: (0, 236), 42: (0, 291), 0: (0, 107), 8: (0, 429), 6: (0, 262), 148: (0, 331), 35: (0, 360), 18: (0, 425)}, 519: {120: (0, 513), 22: (0, 439), 29: (0, 407), 1: (0, 499)}, 520: {23: (1, {'@': 125}), 108: (1, {'@': 125}), 51: (1, {'@': 125}), 1: (1, {'@': 125}), 77: (1, {'@': 125}), 53: (1, {'@': 125}), 54: (1, {'@': 125}), 80: (1, {'@': 125}), 81: (1, {'@': 125}), 86: (1, {'@': 125}), 4: (1, {'@': 125}), 71: (1, {'@': 125}), 88: (1, {'@': 125}), 7: (1, {'@': 125}), 58: (1, {'@': 125}), 73: (1, {'@': 125}), 89: (1, {'@': 125}), 60: (1, {'@': 125}), 74: (1, {'@': 125}), 63: (1, {'@': 125}), 14: (1, {'@': 125}), 93: (1, {'@': 125}), 24: (1, {'@': 125}), 29: (1, {'@': 125}), 5: (1, {'@': 125})}, 521: {23: (1, {'@': 121}), 108: (1, {'@': 121}), 51: (1, {'@': 121}), 1: (1, {'@': 121}), 77: (1, {'@': 121}), 53: (1, {'@': 121}), 54: (1, {'@': 121}), 80: (1, {'@': 121}), 81: (1, {'@': 121}), 86: (1, {'@': 121}), 4: (1, {'@': 121}), 71: (1, {'@': 121}), 88: (1, {'@': 121}), 7: (1, {'@': 121}), 58: (1, {'@': 121}), 73: (1, {'@': 121}), 89: (1, {'@': 121}), 60: (1, {'@': 121}), 74: (1, {'@': 121}), 63: (1, {'@': 121}), 14: (1, {'@': 121}), 93: (1, {'@': 121}), 24: (1, {'@': 121}), 29: (1, {'@': 121}), 5: (1, {'@': 121})}, 522: {32: (0, 559), 155: (0, 25), 16: (0, 524), 13: (0, 600), 110: (0, 594), 160: (0, 53), 0: (0, 107), 17: (0, 585), 109: (0, 61), 29: (0, 587), 38: (0, 569), 22: (0, 633), 9: (0, 530), 6: (0, 570), 25: (0, 511), 18: (0, 651), 10: (0, 663), 8: (0, 500), 27: (0, 576), 21: (0, 631), 156: (0, 144), 4: (0, 556), 5: (0, 642), 36: (0, 550), 162: (0, 141), 44: (0, 584), 19: (0, 523), 157: (0, 46), 45: (0, 6), 31: (0, 310), 47: (0, 243), 48: (0, 238), 164: (0, 63), 49: (0, 259), 23: (0, 134), 165: (0, 124), 158: (0, 51), 33: (0, 260), 28: (0, 315), 37: (0, 308), 11: (0, 35), 26: (0, 20), 34: (0, 13), 35: (0, 8), 30: (0, 44), 39: (0, 126), 12: (0, 79), 40: (0, 38), 3: (0, 211), 41: (0, 91), 15: (0, 56), 159: (0, 49), 163: (0, 273), 42: (0, 168), 20: (0, 95), 7: (0, 139), 14: (0, 204), 24: (0, 160), 43: (0, 33), 161: (0, 217), 46: (0, 188), 2: (0, 48), 50: (0, 102)}, 523: {53: (1, {'@': 281}), 54: (1, {'@': 281}), 55: (1, {'@': 281}), 56: (1, {'@': 281}), 2: (1, {'@': 281}), 3: (1, {'@': 281}), 57: (1, {'@': 281}), 58: (1, {'@': 281}), 59: (1, {'@': 281}), 8: (1, {'@': 281}), 60: (1, {'@': 281}), 9: (1, {'@': 281}), 11: (1, {'@': 281}), 12: (1, {'@': 281}), 61: (1, {'@': 281}), 13: (1, {'@': 281}), 62: (1, {'@': 281}), 63: (1, {'@': 281}), 94: (1, {'@': 281}), 15: (1, {'@': 281}), 64: (1, {'@': 281}), 16: (1, {'@': 281}), 17: (1, {'@': 281}), 99: (1, {'@': 281}), 65: (1, {'@': 281}), 66: (1, {'@': 281}), 67: (1, {'@': 281}), 68: (1, {'@': 281}), 69: (1, {'@': 281}), 95: (1, {'@': 281}), 70: (1, {'@': 281}), 71: (1, {'@': 281}), 96: (1, {'@': 281}), 25: (1, {'@': 281}), 72: (1, {'@': 281}), 73: (1, {'@': 281}), 26: (1, {'@': 281}), 27: (1, {'@': 281}), 1: (1, {'@': 281}), 28: (1, {'@': 281}), 30: (1, {'@': 281}), 74: (1, {'@': 281}), 75: (1, {'@': 281}), 76: (1, {'@': 281}), 101: (1, {'@': 281}), 77: (1, {'@': 281}), 78: (1, {'@': 281}), 79: (1, {'@': 281}), 80: (1, {'@': 281}), 81: (1, {'@': 281}), 4: (1, {'@': 281}), 5: (1, {'@': 281}), 82: (1, {'@': 281}), 6: (1, {'@': 281}), 83: (1, {'@': 281}), 7: (1, {'@': 281}), 102: (1, {'@': 281}), 84: (1, {'@': 281}), 10: (1, {'@': 281}), 103: (1, {'@': 281}), 97: (1, {'@': 281}), 14: (1, {'@': 281}), 85: (1, {'@': 281}), 18: (1, {'@': 281}), 19: (1, {'@': 281}), 86: (1, {'@': 281}), 20: (1, {'@': 281}), 104: (1, {'@': 281}), 21: (1, {'@': 281}), 87: (1, {'@': 281}), 22: (1, {'@': 281}), 23: (1, {'@': 281}), 24: (1, {'@': 281}), 51: (1, {'@': 281}), 88: (1, {'@': 281}), 98: (1, {'@': 281}), 89: (1, {'@': 281}), 90: (1, {'@': 281}), 91: (1, {'@': 281}), 92: (1, {'@': 281}), 29: (1, {'@': 281}), 0: (1, {'@': 281}), 31: (1, {'@': 281}), 93: (1, {'@': 281}), 100: (1, {'@': 281})}, 524: {22: (0, 334)}, 525: {0: (0, 586), 24: (1, {'@': 216})}, 526: {1: (0, 232), 118: (0, 418), 76: (0, 337), 72: (0, 312), 119: (0, 361), 55: (0, 136), 67: (0, 248), 65: (0, 148), 61: (0, 280)}, 527: {77: (1, {'@': 204}), 53: (1, {'@': 204}), 54: (1, {'@': 204}), 80: (1, {'@': 204}), 81: (1, {'@': 204}), 86: (1, {'@': 204}), 4: (1, {'@': 204}), 71: (1, {'@': 204}), 88: (1, {'@': 204}), 7: (1, {'@': 204}), 58: (1, {'@': 204}), 73: (1, {'@': 204}), 89: (1, {'@': 204}), 60: (1, {'@': 204}), 74: (1, {'@': 204}), 63: (1, {'@': 204}), 14: (1, {'@': 204}), 93: (1, {'@': 204})}, 528: {1: (0, 643), 29: (0, 558)}, 529: {51: (1, {'@': 359}), 1: (1, {'@': 359})}, 530: {53: (1, {'@': 270}), 54: (1, {'@': 270}), 55: (1, {'@': 270}), 56: (1, {'@': 270}), 2: (1, {'@': 270}), 3: (1, {'@': 270}), 57: (1, {'@': 270}), 58: (1, {'@': 270}), 59: (1, {'@': 270}), 8: (1, {'@': 270}), 60: (1, {'@': 270}), 9: (1, {'@': 270}), 11: (1, {'@': 270}), 12: (1, {'@': 270}), 61: (1, {'@': 270}), 13: (1, {'@': 270}), 62: (1, {'@': 270}), 63: (1, {'@': 270}), 94: (1, {'@': 270}), 15: (1, {'@': 270}), 64: (1, {'@': 270}), 16: (1, {'@': 270}), 17: (1, {'@': 270}), 99: (1, {'@': 270}), 65: (1, {'@': 270}), 66: (1, {'@': 270}), 67: (1, {'@': 270}), 68: (1, {'@': 270}), 69: (1, {'@': 270}), 95: (1, {'@': 270}), 70: (1, {'@': 270}), 71: (1, {'@': 270}), 96: (1, {'@': 270}), 25: (1, {'@': 270}), 72: (1, {'@': 270}), 73: (1, {'@': 270}), 26: (1, {'@': 270}), 27: (1, {'@': 270}), 1: (1, {'@': 270}), 28: (1, {'@': 270}), 30: (1, {'@': 270}), 74: (1, {'@': 270}), 75: (1, {'@': 270}), 76: (1, {'@': 270}), 101: (1, {'@': 270}), 77: (1, {'@': 270}), 78: (1, {'@': 270}), 79: (1, {'@': 270}), 80: (1, {'@': 270}), 81: (1, {'@': 270}), 4: (1, {'@': 270}), 5: (1, {'@': 270}), 82: (1, {'@': 270}), 6: (1, {'@': 270}), 83: (1, {'@': 270}), 7: (1, {'@': 270}), 102: (1, {'@': 270}), 84: (1, {'@': 270}), 10: (1, {'@': 270}), 103: (1, {'@': 270}), 97: (1, {'@': 270}), 14: (1, {'@': 270}), 85: (1, {'@': 270}), 18: (1, {'@': 270}), 19: (1, {'@': 270}), 86: (1, {'@': 270}), 20: (1, {'@': 270}), 104: (1, {'@': 270}), 21: (1, {'@': 270}), 87: (1, {'@': 270}), 22: (1, {'@': 270}), 23: (1, {'@': 270}), 24: (1, {'@': 270}), 51: (1, {'@': 270}), 88: (1, {'@': 270}), 98: (1, {'@': 270}), 89: (1, {'@': 270}), 90: (1, {'@': 270}), 91: (1, {'@': 270}), 92: (1, {'@': 270}), 29: (1, {'@': 270}), 0: (1, {'@': 270}), 31: (1, {'@': 270}), 93: (1, {'@': 270}), 100: (1, {'@': 270})}, 531: {53: (1, {'@': 278}), 54: (1, {'@': 278}), 55: (1, {'@': 278}), 56: (1, {'@': 278}), 2: (1, {'@': 278}), 3: (1, {'@': 278}), 57: (1, {'@': 278}), 58: (1, {'@': 278}), 59: (1, {'@': 278}), 8: (1, {'@': 278}), 60: (1, {'@': 278}), 9: (1, {'@': 278}), 11: (1, {'@': 278}), 12: (1, {'@': 278}), 61: (1, {'@': 278}), 13: (1, {'@': 278}), 62: (1, {'@': 278}), 63: (1, {'@': 278}), 94: (1, {'@': 278}), 15: (1, {'@': 278}), 64: (1, {'@': 278}), 16: (1, {'@': 278}), 17: (1, {'@': 278}), 99: (1, {'@': 278}), 65: (1, {'@': 278}), 66: (1, {'@': 278}), 67: (1, {'@': 278}), 68: (1, {'@': 278}), 69: (1, {'@': 278}), 95: (1, {'@': 278}), 70: (1, {'@': 278}), 71: (1, {'@': 278}), 96: (1, {'@': 278}), 25: (1, {'@': 278}), 72: (1, {'@': 278}), 73: (1, {'@': 278}), 26: (1, {'@': 278}), 27: (1, {'@': 278}), 1: (1, {'@': 278}), 28: (1, {'@': 278}), 30: (1, {'@': 278}), 74: (1, {'@': 278}), 75: (1, {'@': 278}), 76: (1, {'@': 278}), 101: (1, {'@': 278}), 77: (1, {'@': 278}), 78: (1, {'@': 278}), 79: (1, {'@': 278}), 80: (1, {'@': 278}), 81: (1, {'@': 278}), 4: (1, {'@': 278}), 5: (1, {'@': 278}), 82: (1, {'@': 278}), 6: (1, {'@': 278}), 83: (1, {'@': 278}), 7: (1, {'@': 278}), 102: (1, {'@': 278}), 84: (1, {'@': 278}), 10: (1, {'@': 278}), 103: (1, {'@': 278}), 97: (1, {'@': 278}), 14: (1, {'@': 278}), 85: (1, {'@': 278}), 18: (1, {'@': 278}), 19: (1, {'@': 278}), 86: (1, {'@': 278}), 20: (1, {'@': 278}), 104: (1, {'@': 278}), 21: (1, {'@': 278}), 87: (1, {'@': 278}), 22: (1, {'@': 278}), 23: (1, {'@': 278}), 24: (1, {'@': 278}), 51: (1, {'@': 278}), 88: (1, {'@': 278}), 98: (1, {'@': 278}), 89: (1, {'@': 278}), 90: (1, {'@': 278}), 91: (1, {'@': 278}), 92: (1, {'@': 278}), 29: (1, {'@': 278}), 0: (1, {'@': 278}), 31: (1, {'@': 278}), 93: (1, {'@': 278}), 100: (1, {'@': 278})}, 532: {5: (1, {'@': 132}), 23: (1, {'@': 132}), 108: (1, {'@': 132}), 51: (1, {'@': 132}), 1: (1, {'@': 132}), 77: (1, {'@': 132}), 53: (1, {'@': 132}), 54: (1, {'@': 132}), 80: (1, {'@': 132}), 81: (1, {'@': 132}), 86: (1, {'@': 132}), 4: (1, {'@': 132}), 71: (1, {'@': 132}), 88: (1, {'@': 132}), 7: (1, {'@': 132}), 58: (1, {'@': 132}), 73: (1, {'@': 132}), 89: (1, {'@': 132}), 60: (1, {'@': 132}), 74: (1, {'@': 132}), 63: (1, {'@': 132}), 14: (1, {'@': 132}), 93: (1, {'@': 132}), 24: (1, {'@': 132}), 29: (1, {'@': 132})}, 533: {51: (1, {'@': 402}), 24: (1, {'@': 402})}, 534: {77: (1, {'@': 139}), 53: (1, {'@': 139}), 54: (1, {'@': 139}), 80: (1, {'@': 139}), 81: (1, {'@': 139}), 86: (1, {'@': 139}), 4: (1, {'@': 139}), 71: (1, {'@': 139}), 88: (1, {'@': 139}), 7: (1, {'@': 139}), 58: (1, {'@': 139}), 73: (1, {'@': 139}), 89: (1, {'@': 139}), 60: (1, {'@': 139}), 74: (1, {'@': 139}), 63: (1, {'@': 139}), 14: (1, {'@': 139}), 93: (1, {'@': 139}), 5: (1, {'@': 139}), 108: (1, {'@': 139}), 23: (1, {'@': 139}), 24: (1, {'@': 139}), 51: (1, {'@': 139}), 1: (1, {'@': 139}), 29: (1, {'@': 139})}, 535: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 109: (0, 50), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 536: {22: (0, 346), 1: (0, 278), 103: (0, 666), 6: (0, 561)}, 537: {32: (0, 559), 42: (0, 168), 20: (0, 95), 4: (0, 556), 36: (0, 550), 28: (0, 315), 5: (0, 642), 22: (0, 271), 0: (0, 107), 26: (0, 20), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 3: (0, 211), 47: (0, 243), 48: (0, 238), 18: (0, 651), 8: (0, 500), 23: (0, 134), 50: (0, 102), 49: (0, 545)}, 538: {5: (0, 426)}, 539: {114: (0, 185), 0: (0, 118), 193: (0, 52)}, 540: {1: (0, 655)}, 541: {56: (1, {'@': 342}), 54: (1, {'@': 342}), 2: (1, {'@': 342}), 3: (1, {'@': 342}), 57: (1, {'@': 342}), 58: (1, {'@': 342}), 59: (1, {'@': 342}), 8: (1, {'@': 342}), 60: (1, {'@': 342}), 9: (1, {'@': 342}), 12: (1, {'@': 342}), 13: (1, {'@': 342}), 94: (1, {'@': 342}), 64: (1, {'@': 342}), 65: (1, {'@': 342}), 67: (1, {'@': 342}), 95: (1, {'@': 342}), 70: (1, {'@': 342}), 25: (1, {'@': 342}), 72: (1, {'@': 342}), 73: (1, {'@': 342}), 1: (1, {'@': 342}), 28: (1, {'@': 342}), 30: (1, {'@': 342}), 76: (1, {'@': 342}), 78: (1, {'@': 342}), 79: (1, {'@': 342}), 4: (1, {'@': 342}), 5: (1, {'@': 342}), 7: (1, {'@': 342}), 84: (1, {'@': 342}), 97: (1, {'@': 342}), 86: (1, {'@': 342}), 20: (1, {'@': 342}), 87: (1, {'@': 342}), 23: (1, {'@': 342}), 88: (1, {'@': 342}), 98: (1, {'@': 342}), 89: (1, {'@': 342}), 91: (1, {'@': 342}), 29: (1, {'@': 342}), 0: (1, {'@': 342}), 31: (1, {'@': 342}), 53: (1, {'@': 342}), 55: (1, {'@': 342}), 11: (1, {'@': 342}), 61: (1, {'@': 342}), 62: (1, {'@': 342}), 63: (1, {'@': 342}), 15: (1, {'@': 342}), 16: (1, {'@': 342}), 17: (1, {'@': 342}), 99: (1, {'@': 342}), 66: (1, {'@': 342}), 68: (1, {'@': 342}), 69: (1, {'@': 342}), 71: (1, {'@': 342}), 26: (1, {'@': 342}), 27: (1, {'@': 342}), 75: (1, {'@': 342}), 74: (1, {'@': 342}), 101: (1, {'@': 342}), 77: (1, {'@': 342}), 80: (1, {'@': 342}), 81: (1, {'@': 342}), 82: (1, {'@': 342}), 6: (1, {'@': 342}), 83: (1, {'@': 342}), 102: (1, {'@': 342}), 10: (1, {'@': 342}), 14: (1, {'@': 342}), 85: (1, {'@': 342}), 18: (1, {'@': 342}), 19: (1, {'@': 342}), 104: (1, {'@': 342}), 21: (1, {'@': 342}), 22: (1, {'@': 342}), 24: (1, {'@': 342}), 51: (1, {'@': 342}), 90: (1, {'@': 342}), 92: (1, {'@': 342}), 93: (1, {'@': 342})}, 542: {77: (1, {'@': 141}), 53: (1, {'@': 141}), 54: (1, {'@': 141}), 80: (1, {'@': 141}), 81: (1, {'@': 141}), 86: (1, {'@': 141}), 4: (1, {'@': 141}), 71: (1, {'@': 141}), 88: (1, {'@': 141}), 7: (1, {'@': 141}), 58: (1, {'@': 141}), 73: (1, {'@': 141}), 89: (1, {'@': 141}), 60: (1, {'@': 141}), 74: (1, {'@': 141}), 63: (1, {'@': 141}), 14: (1, {'@': 141}), 93: (1, {'@': 141})}, 543: {53: (1, {'@': 253}), 54: (1, {'@': 253}), 55: (1, {'@': 253}), 56: (1, {'@': 253}), 2: (1, {'@': 253}), 3: (1, {'@': 253}), 57: (1, {'@': 253}), 58: (1, {'@': 253}), 59: (1, {'@': 253}), 8: (1, {'@': 253}), 60: (1, {'@': 253}), 9: (1, {'@': 253}), 11: (1, {'@': 253}), 12: (1, {'@': 253}), 61: (1, {'@': 253}), 13: (1, {'@': 253}), 62: (1, {'@': 253}), 63: (1, {'@': 253}), 15: (1, {'@': 253}), 64: (1, {'@': 253}), 16: (1, {'@': 253}), 17: (1, {'@': 253}), 65: (1, {'@': 253}), 66: (1, {'@': 253}), 67: (1, {'@': 253}), 68: (1, {'@': 253}), 69: (1, {'@': 253}), 95: (1, {'@': 253}), 70: (1, {'@': 253}), 71: (1, {'@': 253}), 25: (1, {'@': 253}), 72: (1, {'@': 253}), 73: (1, {'@': 253}), 26: (1, {'@': 253}), 27: (1, {'@': 253}), 1: (1, {'@': 253}), 28: (1, {'@': 253}), 30: (1, {'@': 253}), 74: (1, {'@': 253}), 75: (1, {'@': 253}), 76: (1, {'@': 253}), 101: (1, {'@': 253}), 77: (1, {'@': 253}), 78: (1, {'@': 253}), 79: (1, {'@': 253}), 80: (1, {'@': 253}), 81: (1, {'@': 253}), 4: (1, {'@': 253}), 5: (1, {'@': 253}), 82: (1, {'@': 253}), 6: (1, {'@': 253}), 83: (1, {'@': 253}), 7: (1, {'@': 253}), 84: (1, {'@': 253}), 10: (1, {'@': 253}), 14: (1, {'@': 253}), 85: (1, {'@': 253}), 18: (1, {'@': 253}), 19: (1, {'@': 253}), 86: (1, {'@': 253}), 20: (1, {'@': 253}), 104: (1, {'@': 253}), 21: (1, {'@': 253}), 87: (1, {'@': 253}), 22: (1, {'@': 253}), 23: (1, {'@': 253}), 24: (1, {'@': 253}), 51: (1, {'@': 253}), 88: (1, {'@': 253}), 89: (1, {'@': 253}), 90: (1, {'@': 253}), 91: (1, {'@': 253}), 92: (1, {'@': 253}), 29: (1, {'@': 253}), 0: (1, {'@': 253}), 31: (1, {'@': 253}), 93: (1, {'@': 253})}, 544: {53: (1, {'@': 242}), 54: (1, {'@': 242}), 55: (1, {'@': 242}), 56: (1, {'@': 242}), 2: (1, {'@': 242}), 3: (1, {'@': 242}), 57: (1, {'@': 242}), 58: (1, {'@': 242}), 59: (1, {'@': 242}), 8: (1, {'@': 242}), 60: (1, {'@': 242}), 9: (1, {'@': 242}), 11: (1, {'@': 242}), 12: (1, {'@': 242}), 61: (1, {'@': 242}), 13: (1, {'@': 242}), 62: (1, {'@': 242}), 63: (1, {'@': 242}), 15: (1, {'@': 242}), 64: (1, {'@': 242}), 16: (1, {'@': 242}), 17: (1, {'@': 242}), 65: (1, {'@': 242}), 66: (1, {'@': 242}), 67: (1, {'@': 242}), 68: (1, {'@': 242}), 69: (1, {'@': 242}), 70: (1, {'@': 242}), 71: (1, {'@': 242}), 25: (1, {'@': 242}), 72: (1, {'@': 242}), 73: (1, {'@': 242}), 26: (1, {'@': 242}), 27: (1, {'@': 242}), 1: (1, {'@': 242}), 28: (1, {'@': 242}), 30: (1, {'@': 242}), 74: (1, {'@': 242}), 75: (1, {'@': 242}), 76: (1, {'@': 242}), 77: (1, {'@': 242}), 78: (1, {'@': 242}), 79: (1, {'@': 242}), 80: (1, {'@': 242}), 81: (1, {'@': 242}), 4: (1, {'@': 242}), 5: (1, {'@': 242}), 82: (1, {'@': 242}), 6: (1, {'@': 242}), 83: (1, {'@': 242}), 7: (1, {'@': 242}), 84: (1, {'@': 242}), 10: (1, {'@': 242}), 14: (1, {'@': 242}), 85: (1, {'@': 242}), 18: (1, {'@': 242}), 19: (1, {'@': 242}), 86: (1, {'@': 242}), 20: (1, {'@': 242}), 21: (1, {'@': 242}), 87: (1, {'@': 242}), 22: (1, {'@': 242}), 23: (1, {'@': 242}), 24: (1, {'@': 242}), 51: (1, {'@': 242}), 88: (1, {'@': 242}), 89: (1, {'@': 242}), 90: (1, {'@': 242}), 91: (1, {'@': 242}), 92: (1, {'@': 242}), 29: (1, {'@': 242}), 0: (1, {'@': 242}), 31: (1, {'@': 242}), 93: (1, {'@': 242})}, 545: {78: (1, {'@': 422}), 79: (1, {'@': 422}), 55: (1, {'@': 422}), 3: (1, {'@': 422}), 83: (1, {'@': 422}), 102: (1, {'@': 422}), 97: (1, {'@': 422}), 61: (1, {'@': 422}), 94: (1, {'@': 422}), 99: (1, {'@': 422}), 65: (1, {'@': 422}), 67: (1, {'@': 422}), 20: (1, {'@': 422}), 104: (1, {'@': 422}), 21: (1, {'@': 422}), 23: (1, {'@': 422}), 95: (1, {'@': 422}), 96: (1, {'@': 422}), 98: (1, {'@': 422}), 72: (1, {'@': 422}), 1: (1, {'@': 422}), 92: (1, {'@': 422}), 76: (1, {'@': 422}), 101: (1, {'@': 422}), 53: (1, {'@': 422}), 56: (1, {'@': 422}), 54: (1, {'@': 422}), 2: (1, {'@': 422}), 57: (1, {'@': 422}), 58: (1, {'@': 422}), 59: (1, {'@': 422}), 8: (1, {'@': 422}), 60: (1, {'@': 422}), 9: (1, {'@': 422}), 11: (1, {'@': 422}), 12: (1, {'@': 422}), 13: (1, {'@': 422}), 62: (1, {'@': 422}), 63: (1, {'@': 422}), 64: (1, {'@': 422}), 15: (1, {'@': 422}), 16: (1, {'@': 422}), 17: (1, {'@': 422}), 66: (1, {'@': 422}), 68: (1, {'@': 422}), 69: (1, {'@': 422}), 70: (1, {'@': 422}), 71: (1, {'@': 422}), 25: (1, {'@': 422}), 73: (1, {'@': 422}), 26: (1, {'@': 422}), 27: (1, {'@': 422}), 28: (1, {'@': 422}), 30: (1, {'@': 422}), 75: (1, {'@': 422}), 74: (1, {'@': 422}), 77: (1, {'@': 422}), 80: (1, {'@': 422}), 81: (1, {'@': 422}), 4: (1, {'@': 422}), 5: (1, {'@': 422}), 82: (1, {'@': 422}), 6: (1, {'@': 422}), 7: (1, {'@': 422}), 84: (1, {'@': 422}), 10: (1, {'@': 422}), 14: (1, {'@': 422}), 85: (1, {'@': 422}), 18: (1, {'@': 422}), 19: (1, {'@': 422}), 86: (1, {'@': 422}), 87: (1, {'@': 422}), 22: (1, {'@': 422}), 24: (1, {'@': 422}), 51: (1, {'@': 422}), 88: (1, {'@': 422}), 89: (1, {'@': 422}), 90: (1, {'@': 422}), 91: (1, {'@': 422}), 29: (1, {'@': 422}), 0: (1, {'@': 422}), 31: (1, {'@': 422}), 93: (1, {'@': 422})}, 546: {2: (1, {'@': 433}), 3: (1, {'@': 433}), 4: (1, {'@': 433}), 5: (1, {'@': 433}), 6: (1, {'@': 433}), 7: (1, {'@': 433}), 8: (1, {'@': 433}), 9: (1, {'@': 433}), 10: (1, {'@': 433}), 11: (1, {'@': 433}), 12: (1, {'@': 433}), 13: (1, {'@': 433}), 14: (1, {'@': 433}), 15: (1, {'@': 433}), 16: (1, {'@': 433}), 17: (1, {'@': 433}), 18: (1, {'@': 433}), 19: (1, {'@': 433}), 20: (1, {'@': 433}), 21: (1, {'@': 433}), 22: (1, {'@': 433}), 23: (1, {'@': 433}), 24: (1, {'@': 433}), 25: (1, {'@': 433}), 26: (1, {'@': 433}), 27: (1, {'@': 433}), 28: (1, {'@': 433}), 29: (1, {'@': 433}), 30: (1, {'@': 433}), 0: (1, {'@': 433}), 31: (1, {'@': 433})}, 547: {53: (1, {'@': 410}), 56: (1, {'@': 410}), 55: (1, {'@': 410}), 54: (1, {'@': 410}), 2: (1, {'@': 410}), 3: (1, {'@': 410}), 57: (1, {'@': 410}), 58: (1, {'@': 410}), 59: (1, {'@': 410}), 8: (1, {'@': 410}), 60: (1, {'@': 410}), 9: (1, {'@': 410}), 11: (1, {'@': 410}), 12: (1, {'@': 410}), 61: (1, {'@': 410}), 13: (1, {'@': 410}), 62: (1, {'@': 410}), 63: (1, {'@': 410}), 15: (1, {'@': 410}), 64: (1, {'@': 410}), 16: (1, {'@': 410}), 17: (1, {'@': 410}), 65: (1, {'@': 410}), 66: (1, {'@': 410}), 67: (1, {'@': 410}), 68: (1, {'@': 410}), 69: (1, {'@': 410}), 70: (1, {'@': 410}), 71: (1, {'@': 410}), 25: (1, {'@': 410}), 72: (1, {'@': 410}), 73: (1, {'@': 410}), 26: (1, {'@': 410}), 27: (1, {'@': 410}), 1: (1, {'@': 410}), 28: (1, {'@': 410}), 30: (1, {'@': 410}), 75: (1, {'@': 410}), 74: (1, {'@': 410}), 76: (1, {'@': 410}), 77: (1, {'@': 410}), 78: (1, {'@': 410}), 79: (1, {'@': 410}), 80: (1, {'@': 410}), 81: (1, {'@': 410}), 4: (1, {'@': 410}), 5: (1, {'@': 410}), 82: (1, {'@': 410}), 6: (1, {'@': 410}), 7: (1, {'@': 410}), 84: (1, {'@': 410}), 10: (1, {'@': 410}), 14: (1, {'@': 410}), 85: (1, {'@': 410}), 18: (1, {'@': 410}), 19: (1, {'@': 410}), 86: (1, {'@': 410}), 20: (1, {'@': 410}), 21: (1, {'@': 410}), 87: (1, {'@': 410}), 22: (1, {'@': 410}), 23: (1, {'@': 410}), 24: (1, {'@': 410}), 51: (1, {'@': 410}), 88: (1, {'@': 410}), 89: (1, {'@': 410}), 90: (1, {'@': 410}), 91: (1, {'@': 410}), 92: (1, {'@': 410}), 29: (1, {'@': 410}), 0: (1, {'@': 410}), 31: (1, {'@': 410}), 93: (1, {'@': 410})}, 548: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 109: (0, 507), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 549: {1: (0, 514)}, 550: {22: (0, 346), 153: (0, 664), 96: (0, 537), 103: (0, 666), 6: (0, 561), 53: (1, {'@': 260}), 54: (1, {'@': 260}), 55: (1, {'@': 260}), 56: (1, {'@': 260}), 2: (1, {'@': 260}), 3: (1, {'@': 260}), 57: (1, {'@': 260}), 58: (1, {'@': 260}), 59: (1, {'@': 260}), 8: (1, {'@': 260}), 60: (1, {'@': 260}), 9: (1, {'@': 260}), 11: (1, {'@': 260}), 12: (1, {'@': 260}), 61: (1, {'@': 260}), 13: (1, {'@': 260}), 62: (1, {'@': 260}), 63: (1, {'@': 260}), 94: (1, {'@': 260}), 15: (1, {'@': 260}), 64: (1, {'@': 260}), 16: (1, {'@': 260}), 17: (1, {'@': 260}), 99: (1, {'@': 260}), 65: (1, {'@': 260}), 66: (1, {'@': 260}), 67: (1, {'@': 260}), 68: (1, {'@': 260}), 69: (1, {'@': 260}), 95: (1, {'@': 260}), 70: (1, {'@': 260}), 71: (1, {'@': 260}), 25: (1, {'@': 260}), 72: (1, {'@': 260}), 73: (1, {'@': 260}), 26: (1, {'@': 260}), 27: (1, {'@': 260}), 1: (1, {'@': 260}), 28: (1, {'@': 260}), 30: (1, {'@': 260}), 74: (1, {'@': 260}), 75: (1, {'@': 260}), 76: (1, {'@': 260}), 101: (1, {'@': 260}), 77: (1, {'@': 260}), 78: (1, {'@': 260}), 79: (1, {'@': 260}), 80: (1, {'@': 260}), 81: (1, {'@': 260}), 4: (1, {'@': 260}), 5: (1, {'@': 260}), 82: (1, {'@': 260}), 83: (1, {'@': 260}), 7: (1, {'@': 260}), 102: (1, {'@': 260}), 84: (1, {'@': 260}), 10: (1, {'@': 260}), 97: (1, {'@': 260}), 14: (1, {'@': 260}), 85: (1, {'@': 260}), 18: (1, {'@': 260}), 19: (1, {'@': 260}), 86: (1, {'@': 260}), 20: (1, {'@': 260}), 104: (1, {'@': 260}), 21: (1, {'@': 260}), 87: (1, {'@': 260}), 23: (1, {'@': 260}), 24: (1, {'@': 260}), 51: (1, {'@': 260}), 88: (1, {'@': 260}), 98: (1, {'@': 260}), 89: (1, {'@': 260}), 90: (1, {'@': 260}), 91: (1, {'@': 260}), 92: (1, {'@': 260}), 29: (1, {'@': 260}), 0: (1, {'@': 260}), 31: (1, {'@': 260}), 93: (1, {'@': 260})}, 551: {53: (1, {'@': 275}), 54: (1, {'@': 275}), 55: (1, {'@': 275}), 56: (1, {'@': 275}), 2: (1, {'@': 275}), 3: (1, {'@': 275}), 57: (1, {'@': 275}), 58: (1, {'@': 275}), 59: (1, {'@': 275}), 8: (1, {'@': 275}), 60: (1, {'@': 275}), 9: (1, {'@': 275}), 11: (1, {'@': 275}), 12: (1, {'@': 275}), 61: (1, {'@': 275}), 13: (1, {'@': 275}), 62: (1, {'@': 275}), 63: (1, {'@': 275}), 94: (1, {'@': 275}), 15: (1, {'@': 275}), 64: (1, {'@': 275}), 16: (1, {'@': 275}), 17: (1, {'@': 275}), 99: (1, {'@': 275}), 65: (1, {'@': 275}), 66: (1, {'@': 275}), 67: (1, {'@': 275}), 68: (1, {'@': 275}), 69: (1, {'@': 275}), 95: (1, {'@': 275}), 70: (1, {'@': 275}), 71: (1, {'@': 275}), 96: (1, {'@': 275}), 25: (1, {'@': 275}), 72: (1, {'@': 275}), 73: (1, {'@': 275}), 26: (1, {'@': 275}), 27: (1, {'@': 275}), 1: (1, {'@': 275}), 28: (1, {'@': 275}), 30: (1, {'@': 275}), 74: (1, {'@': 275}), 75: (1, {'@': 275}), 76: (1, {'@': 275}), 101: (1, {'@': 275}), 77: (1, {'@': 275}), 78: (1, {'@': 275}), 79: (1, {'@': 275}), 80: (1, {'@': 275}), 81: (1, {'@': 275}), 4: (1, {'@': 275}), 5: (1, {'@': 275}), 82: (1, {'@': 275}), 6: (1, {'@': 275}), 83: (1, {'@': 275}), 7: (1, {'@': 275}), 102: (1, {'@': 275}), 84: (1, {'@': 275}), 10: (1, {'@': 275}), 103: (1, {'@': 275}), 97: (1, {'@': 275}), 14: (1, {'@': 275}), 85: (1, {'@': 275}), 18: (1, {'@': 275}), 19: (1, {'@': 275}), 86: (1, {'@': 275}), 20: (1, {'@': 275}), 104: (1, {'@': 275}), 21: (1, {'@': 275}), 87: (1, {'@': 275}), 22: (1, {'@': 275}), 23: (1, {'@': 275}), 24: (1, {'@': 275}), 51: (1, {'@': 275}), 88: (1, {'@': 275}), 98: (1, {'@': 275}), 89: (1, {'@': 275}), 90: (1, {'@': 275}), 91: (1, {'@': 275}), 92: (1, {'@': 275}), 29: (1, {'@': 275}), 0: (1, {'@': 275}), 31: (1, {'@': 275}), 93: (1, {'@': 275}), 100: (1, {'@': 275})}, 552: {32: (0, 559), 42: (0, 168), 20: (0, 95), 4: (0, 556), 36: (0, 550), 28: (0, 315), 5: (0, 642), 22: (0, 271), 0: (0, 107), 26: (0, 20), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 609), 47: (0, 243), 48: (0, 238), 18: (0, 651), 49: (0, 259), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 553: {53: (1, {'@': 414}), 54: (1, {'@': 414}), 55: (1, {'@': 414}), 56: (1, {'@': 414}), 2: (1, {'@': 414}), 3: (1, {'@': 414}), 57: (1, {'@': 414}), 58: (1, {'@': 414}), 59: (1, {'@': 414}), 8: (1, {'@': 414}), 60: (1, {'@': 414}), 9: (1, {'@': 414}), 11: (1, {'@': 414}), 12: (1, {'@': 414}), 61: (1, {'@': 414}), 13: (1, {'@': 414}), 62: (1, {'@': 414}), 63: (1, {'@': 414}), 15: (1, {'@': 414}), 64: (1, {'@': 414}), 16: (1, {'@': 414}), 17: (1, {'@': 414}), 65: (1, {'@': 414}), 66: (1, {'@': 414}), 67: (1, {'@': 414}), 68: (1, {'@': 414}), 69: (1, {'@': 414}), 70: (1, {'@': 414}), 71: (1, {'@': 414}), 25: (1, {'@': 414}), 72: (1, {'@': 414}), 73: (1, {'@': 414}), 26: (1, {'@': 414}), 27: (1, {'@': 414}), 1: (1, {'@': 414}), 28: (1, {'@': 414}), 30: (1, {'@': 414}), 74: (1, {'@': 414}), 75: (1, {'@': 414}), 76: (1, {'@': 414}), 77: (1, {'@': 414}), 78: (1, {'@': 414}), 79: (1, {'@': 414}), 80: (1, {'@': 414}), 81: (1, {'@': 414}), 4: (1, {'@': 414}), 5: (1, {'@': 414}), 82: (1, {'@': 414}), 6: (1, {'@': 414}), 83: (1, {'@': 414}), 7: (1, {'@': 414}), 84: (1, {'@': 414}), 10: (1, {'@': 414}), 14: (1, {'@': 414}), 85: (1, {'@': 414}), 18: (1, {'@': 414}), 19: (1, {'@': 414}), 86: (1, {'@': 414}), 20: (1, {'@': 414}), 21: (1, {'@': 414}), 87: (1, {'@': 414}), 22: (1, {'@': 414}), 23: (1, {'@': 414}), 24: (1, {'@': 414}), 51: (1, {'@': 414}), 88: (1, {'@': 414}), 89: (1, {'@': 414}), 90: (1, {'@': 414}), 91: (1, {'@': 414}), 92: (1, {'@': 414}), 29: (1, {'@': 414}), 0: (1, {'@': 414}), 31: (1, {'@': 414}), 93: (1, {'@': 414})}, 554: {1: (0, 494), 96: (0, 295)}, 555: {5: (0, 665)}, 556: {148: (0, 328), 6: (0, 262)}, 557: {23: (1, {'@': 168}), 108: (1, {'@': 168}), 51: (1, {'@': 168}), 1: (1, {'@': 168}), 77: (1, {'@': 168}), 53: (1, {'@': 168}), 54: (1, {'@': 168}), 80: (1, {'@': 168}), 81: (1, {'@': 168}), 86: (1, {'@': 168}), 4: (1, {'@': 168}), 71: (1, {'@': 168}), 88: (1, {'@': 168}), 7: (1, {'@': 168}), 58: (1, {'@': 168}), 73: (1, {'@': 168}), 89: (1, {'@': 168}), 60: (1, {'@': 168}), 74: (1, {'@': 168}), 63: (1, {'@': 168}), 14: (1, {'@': 168}), 93: (1, {'@': 168}), 24: (1, {'@': 168}), 29: (1, {'@': 168}), 5: (1, {'@': 168})}, 558: {1: (0, 482)}, 559: {5: (0, 40)}, 560: {122: (0, 475), 142: (0, 297), 5: (1, {'@': 146}), 77: (1, {'@': 146}), 53: (1, {'@': 146}), 54: (1, {'@': 146}), 80: (1, {'@': 146}), 81: (1, {'@': 146}), 86: (1, {'@': 146}), 4: (1, {'@': 146}), 71: (1, {'@': 146}), 88: (1, {'@': 146}), 7: (1, {'@': 146}), 58: (1, {'@': 146}), 73: (1, {'@': 146}), 89: (1, {'@': 146}), 60: (1, {'@': 146}), 74: (1, {'@': 146}), 63: (1, {'@': 146}), 14: (1, {'@': 146}), 93: (1, {'@': 146}), 23: (1, {'@': 146}), 108: (1, {'@': 146}), 24: (1, {'@': 146}), 51: (1, {'@': 146}), 1: (1, {'@': 146}), 29: (1, {'@': 146})}, 561: {32: (0, 559), 36: (0, 505), 42: (0, 168), 4: (0, 556), 22: (0, 442), 28: (0, 315), 5: (0, 642), 0: (0, 107), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 17: (0, 585), 44: (0, 584), 9: (0, 530), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 48: (0, 238), 18: (0, 651), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 562: {122: (0, 23)}, 563: {22: (0, 346), 29: (0, 352), 103: (0, 666), 6: (0, 561), 53: (1, {'@': 267}), 54: (1, {'@': 267}), 55: (1, {'@': 267}), 56: (1, {'@': 267}), 2: (1, {'@': 267}), 3: (1, {'@': 267}), 57: (1, {'@': 267}), 58: (1, {'@': 267}), 59: (1, {'@': 267}), 8: (1, {'@': 267}), 60: (1, {'@': 267}), 9: (1, {'@': 267}), 11: (1, {'@': 267}), 12: (1, {'@': 267}), 61: (1, {'@': 267}), 13: (1, {'@': 267}), 62: (1, {'@': 267}), 63: (1, {'@': 267}), 94: (1, {'@': 267}), 15: (1, {'@': 267}), 64: (1, {'@': 267}), 16: (1, {'@': 267}), 17: (1, {'@': 267}), 99: (1, {'@': 267}), 65: (1, {'@': 267}), 66: (1, {'@': 267}), 67: (1, {'@': 267}), 68: (1, {'@': 267}), 69: (1, {'@': 267}), 95: (1, {'@': 267}), 70: (1, {'@': 267}), 71: (1, {'@': 267}), 96: (1, {'@': 267}), 25: (1, {'@': 267}), 72: (1, {'@': 267}), 73: (1, {'@': 267}), 26: (1, {'@': 267}), 27: (1, {'@': 267}), 1: (1, {'@': 267}), 28: (1, {'@': 267}), 30: (1, {'@': 267}), 74: (1, {'@': 267}), 75: (1, {'@': 267}), 76: (1, {'@': 267}), 101: (1, {'@': 267}), 77: (1, {'@': 267}), 78: (1, {'@': 267}), 79: (1, {'@': 267}), 80: (1, {'@': 267}), 81: (1, {'@': 267}), 4: (1, {'@': 267}), 5: (1, {'@': 267}), 82: (1, {'@': 267}), 83: (1, {'@': 267}), 7: (1, {'@': 267}), 102: (1, {'@': 267}), 84: (1, {'@': 267}), 10: (1, {'@': 267}), 97: (1, {'@': 267}), 14: (1, {'@': 267}), 85: (1, {'@': 267}), 18: (1, {'@': 267}), 19: (1, {'@': 267}), 86: (1, {'@': 267}), 20: (1, {'@': 267}), 104: (1, {'@': 267}), 21: (1, {'@': 267}), 87: (1, {'@': 267}), 23: (1, {'@': 267}), 24: (1, {'@': 267}), 51: (1, {'@': 267}), 88: (1, {'@': 267}), 98: (1, {'@': 267}), 89: (1, {'@': 267}), 90: (1, {'@': 267}), 91: (1, {'@': 267}), 92: (1, {'@': 267}), 0: (1, {'@': 267}), 31: (1, {'@': 267}), 93: (1, {'@': 267}), 100: (1, {'@': 267})}, 564: {77: (1, {'@': 159}), 53: (1, {'@': 159}), 54: (1, {'@': 159}), 80: (1, {'@': 159}), 81: (1, {'@': 159}), 86: (1, {'@': 159}), 4: (1, {'@': 159}), 71: (1, {'@': 159}), 88: (1, {'@': 159}), 7: (1, {'@': 159}), 58: (1, {'@': 159}), 73: (1, {'@': 159}), 89: (1, {'@': 159}), 60: (1, {'@': 159}), 74: (1, {'@': 159}), 63: (1, {'@': 159}), 14: (1, {'@': 159}), 93: (1, {'@': 159})}, 565: {51: (1, {'@': 361}), 1: (1, {'@': 361}), 24: (1, {'@': 361})}, 566: {5: (0, 246), 113: (0, 378)}, 567: {51: (0, 654), 194: (0, 652), 1: (1, {'@': 191})}, 568: {51: (1, {'@': 348}), 1: (1, {'@': 348})}, 569: {118: (0, 300), 76: (0, 337), 72: (0, 312), 119: (0, 361), 65: (0, 148), 55: (0, 136), 67: (0, 248), 61: (0, 280), 53: (1, {'@': 228}), 54: (1, {'@': 228}), 56: (1, {'@': 228}), 2: (1, {'@': 228}), 3: (1, {'@': 228}), 57: (1, {'@': 228}), 58: (1, {'@': 228}), 59: (1, {'@': 228}), 8: (1, {'@': 228}), 60: (1, {'@': 228}), 9: (1, {'@': 228}), 11: (1, {'@': 228}), 12: (1, {'@': 228}), 13: (1, {'@': 228}), 62: (1, {'@': 228}), 63: (1, {'@': 228}), 15: (1, {'@': 228}), 64: (1, {'@': 228}), 16: (1, {'@': 228}), 17: (1, {'@': 228}), 66: (1, {'@': 228}), 68: (1, {'@': 228}), 69: (1, {'@': 228}), 70: (1, {'@': 228}), 71: (1, {'@': 228}), 25: (1, {'@': 228}), 73: (1, {'@': 228}), 26: (1, {'@': 228}), 27: (1, {'@': 228}), 1: (1, {'@': 228}), 28: (1, {'@': 228}), 30: (1, {'@': 228}), 74: (1, {'@': 228}), 75: (1, {'@': 228}), 77: (1, {'@': 228}), 78: (1, {'@': 228}), 79: (1, {'@': 228}), 80: (1, {'@': 228}), 81: (1, {'@': 228}), 4: (1, {'@': 228}), 5: (1, {'@': 228}), 82: (1, {'@': 228}), 6: (1, {'@': 228}), 7: (1, {'@': 228}), 84: (1, {'@': 228}), 10: (1, {'@': 228}), 14: (1, {'@': 228}), 85: (1, {'@': 228}), 18: (1, {'@': 228}), 19: (1, {'@': 228}), 86: (1, {'@': 228}), 20: (1, {'@': 228}), 21: (1, {'@': 228}), 87: (1, {'@': 228}), 22: (1, {'@': 228}), 23: (1, {'@': 228}), 24: (1, {'@': 228}), 51: (1, {'@': 228}), 88: (1, {'@': 228}), 89: (1, {'@': 228}), 90: (1, {'@': 228}), 91: (1, {'@': 228}), 29: (1, {'@': 228}), 0: (1, {'@': 228}), 31: (1, {'@': 228}), 93: (1, {'@': 228})}, 570: {169: (0, 28), 21: (0, 222), 48: (0, 363), 34: (0, 342), 23: (0, 311), 170: (0, 336), 171: (0, 366), 0: (0, 309), 152: (0, 169), 42: (0, 282), 172: (0, 253), 6: (0, 262), 32: (0, 485), 114: (0, 477), 173: (0, 471), 22: (0, 667), 18: (0, 425), 44: (0, 498), 8: (0, 429), 174: (0, 501), 4: (0, 556), 5: (0, 642), 175: (0, 121), 7: (0, 139), 14: (0, 204), 54: (0, 461), 176: (0, 393), 35: (0, 406), 148: (0, 405), 60: (0, 417), 177: (0, 254), 178: (0, 234), 179: (0, 228)}, 571: {51: (1, {'@': 221}), 24: (1, {'@': 221}), 2: (1, {'@': 221}), 3: (1, {'@': 221}), 4: (1, {'@': 221}), 5: (1, {'@': 221}), 6: (1, {'@': 221}), 7: (1, {'@': 221}), 8: (1, {'@': 221}), 9: (1, {'@': 221}), 10: (1, {'@': 221}), 11: (1, {'@': 221}), 12: (1, {'@': 221}), 13: (1, {'@': 221}), 14: (1, {'@': 221}), 15: (1, {'@': 221}), 16: (1, {'@': 221}), 17: (1, {'@': 221}), 18: (1, {'@': 221}), 19: (1, {'@': 221}), 20: (1, {'@': 221}), 21: (1, {'@': 221}), 22: (1, {'@': 221}), 23: (1, {'@': 221}), 25: (1, {'@': 221}), 26: (1, {'@': 221}), 27: (1, {'@': 221}), 28: (1, {'@': 221}), 29: (1, {'@': 221}), 30: (1, {'@': 221}), 0: (1, {'@': 221}), 31: (1, {'@': 221}), 1: (1, {'@': 221}), 56: (1, {'@': 221}), 82: (1, {'@': 221}), 57: (1, {'@': 221}), 59: (1, {'@': 221}), 84: (1, {'@': 221}), 62: (1, {'@': 221}), 64: (1, {'@': 221}), 85: (1, {'@': 221}), 66: (1, {'@': 221}), 68: (1, {'@': 221}), 87: (1, {'@': 221}), 69: (1, {'@': 221}), 70: (1, {'@': 221}), 90: (1, {'@': 221}), 91: (1, {'@': 221}), 75: (1, {'@': 221}), 77: (1, {'@': 221}), 53: (1, {'@': 221}), 54: (1, {'@': 221}), 80: (1, {'@': 221}), 81: (1, {'@': 221}), 86: (1, {'@': 221}), 71: (1, {'@': 221}), 88: (1, {'@': 221}), 58: (1, {'@': 221}), 73: (1, {'@': 221}), 89: (1, {'@': 221}), 60: (1, {'@': 221}), 74: (1, {'@': 221}), 63: (1, {'@': 221}), 93: (1, {'@': 221})}, 572: {0: (0, 107), 18: (0, 84), 42: (0, 298)}, 573: {120: (0, 513)}, 574: {53: (1, {'@': 237}), 54: (1, {'@': 237}), 55: (1, {'@': 237}), 56: (1, {'@': 237}), 2: (1, {'@': 237}), 3: (1, {'@': 237}), 57: (1, {'@': 237}), 58: (1, {'@': 237}), 59: (1, {'@': 237}), 8: (1, {'@': 237}), 60: (1, {'@': 237}), 9: (1, {'@': 237}), 11: (1, {'@': 237}), 12: (1, {'@': 237}), 61: (1, {'@': 237}), 13: (1, {'@': 237}), 62: (1, {'@': 237}), 63: (1, {'@': 237}), 15: (1, {'@': 237}), 64: (1, {'@': 237}), 16: (1, {'@': 237}), 17: (1, {'@': 237}), 65: (1, {'@': 237}), 66: (1, {'@': 237}), 67: (1, {'@': 237}), 68: (1, {'@': 237}), 69: (1, {'@': 237}), 70: (1, {'@': 237}), 71: (1, {'@': 237}), 25: (1, {'@': 237}), 72: (1, {'@': 237}), 73: (1, {'@': 237}), 26: (1, {'@': 237}), 27: (1, {'@': 237}), 1: (1, {'@': 237}), 28: (1, {'@': 237}), 30: (1, {'@': 237}), 74: (1, {'@': 237}), 75: (1, {'@': 237}), 76: (1, {'@': 237}), 77: (1, {'@': 237}), 78: (1, {'@': 237}), 79: (1, {'@': 237}), 80: (1, {'@': 237}), 81: (1, {'@': 237}), 4: (1, {'@': 237}), 5: (1, {'@': 237}), 82: (1, {'@': 237}), 6: (1, {'@': 237}), 7: (1, {'@': 237}), 84: (1, {'@': 237}), 10: (1, {'@': 237}), 14: (1, {'@': 237}), 85: (1, {'@': 237}), 18: (1, {'@': 237}), 19: (1, {'@': 237}), 86: (1, {'@': 237}), 20: (1, {'@': 237}), 21: (1, {'@': 237}), 87: (1, {'@': 237}), 22: (1, {'@': 237}), 23: (1, {'@': 237}), 24: (1, {'@': 237}), 51: (1, {'@': 237}), 88: (1, {'@': 237}), 89: (1, {'@': 237}), 90: (1, {'@': 237}), 91: (1, {'@': 237}), 92: (1, {'@': 237}), 29: (1, {'@': 237}), 0: (1, {'@': 237}), 31: (1, {'@': 237}), 93: (1, {'@': 237})}, 575: {51: (1, {'@': 225}), 24: (1, {'@': 225}), 79: (1, {'@': 225}), 2: (1, {'@': 225}), 3: (1, {'@': 225}), 4: (1, {'@': 225}), 5: (1, {'@': 225}), 6: (1, {'@': 225}), 7: (1, {'@': 225}), 8: (1, {'@': 225}), 9: (1, {'@': 225}), 10: (1, {'@': 225}), 11: (1, {'@': 225}), 12: (1, {'@': 225}), 13: (1, {'@': 225}), 14: (1, {'@': 225}), 15: (1, {'@': 225}), 16: (1, {'@': 225}), 17: (1, {'@': 225}), 18: (1, {'@': 225}), 19: (1, {'@': 225}), 20: (1, {'@': 225}), 21: (1, {'@': 225}), 22: (1, {'@': 225}), 23: (1, {'@': 225}), 25: (1, {'@': 225}), 26: (1, {'@': 225}), 27: (1, {'@': 225}), 28: (1, {'@': 225}), 29: (1, {'@': 225}), 30: (1, {'@': 225}), 0: (1, {'@': 225}), 31: (1, {'@': 225}), 1: (1, {'@': 225}), 53: (1, {'@': 225}), 54: (1, {'@': 225}), 56: (1, {'@': 225}), 57: (1, {'@': 225}), 58: (1, {'@': 225}), 59: (1, {'@': 225}), 60: (1, {'@': 225}), 62: (1, {'@': 225}), 63: (1, {'@': 225}), 64: (1, {'@': 225}), 66: (1, {'@': 225}), 68: (1, {'@': 225}), 69: (1, {'@': 225}), 70: (1, {'@': 225}), 71: (1, {'@': 225}), 73: (1, {'@': 225}), 74: (1, {'@': 225}), 75: (1, {'@': 225}), 77: (1, {'@': 225}), 80: (1, {'@': 225}), 81: (1, {'@': 225}), 82: (1, {'@': 225}), 84: (1, {'@': 225}), 85: (1, {'@': 225}), 86: (1, {'@': 225}), 87: (1, {'@': 225}), 88: (1, {'@': 225}), 89: (1, {'@': 225}), 90: (1, {'@': 225}), 91: (1, {'@': 225}), 93: (1, {'@': 225})}, 576: {0: (0, 99)}, 577: {53: (1, {'@': 241}), 54: (1, {'@': 241}), 55: (1, {'@': 241}), 56: (1, {'@': 241}), 2: (1, {'@': 241}), 3: (1, {'@': 241}), 57: (1, {'@': 241}), 58: (1, {'@': 241}), 59: (1, {'@': 241}), 8: (1, {'@': 241}), 60: (1, {'@': 241}), 9: (1, {'@': 241}), 11: (1, {'@': 241}), 12: (1, {'@': 241}), 61: (1, {'@': 241}), 13: (1, {'@': 241}), 62: (1, {'@': 241}), 63: (1, {'@': 241}), 15: (1, {'@': 241}), 64: (1, {'@': 241}), 16: (1, {'@': 241}), 17: (1, {'@': 241}), 65: (1, {'@': 241}), 66: (1, {'@': 241}), 67: (1, {'@': 241}), 68: (1, {'@': 241}), 69: (1, {'@': 241}), 70: (1, {'@': 241}), 71: (1, {'@': 241}), 25: (1, {'@': 241}), 72: (1, {'@': 241}), 73: (1, {'@': 241}), 26: (1, {'@': 241}), 27: (1, {'@': 241}), 1: (1, {'@': 241}), 28: (1, {'@': 241}), 30: (1, {'@': 241}), 74: (1, {'@': 241}), 75: (1, {'@': 241}), 76: (1, {'@': 241}), 77: (1, {'@': 241}), 78: (1, {'@': 241}), 79: (1, {'@': 241}), 80: (1, {'@': 241}), 81: (1, {'@': 241}), 4: (1, {'@': 241}), 5: (1, {'@': 241}), 82: (1, {'@': 241}), 6: (1, {'@': 241}), 83: (1, {'@': 241}), 7: (1, {'@': 241}), 84: (1, {'@': 241}), 10: (1, {'@': 241}), 14: (1, {'@': 241}), 85: (1, {'@': 241}), 18: (1, {'@': 241}), 19: (1, {'@': 241}), 86: (1, {'@': 241}), 20: (1, {'@': 241}), 21: (1, {'@': 241}), 87: (1, {'@': 241}), 22: (1, {'@': 241}), 23: (1, {'@': 241}), 24: (1, {'@': 241}), 51: (1, {'@': 241}), 88: (1, {'@': 241}), 89: (1, {'@': 241}), 90: (1, {'@': 241}), 91: (1, {'@': 241}), 92: (1, {'@': 241}), 29: (1, {'@': 241}), 0: (1, {'@': 241}), 31: (1, {'@': 241}), 93: (1, {'@': 241})}, 578: {8: (0, 161)}, 579: {70: (0, 41), 64: (0, 199), 75: (0, 77), 82: (0, 272), 85: (0, 535), 62: (0, 653), 56: (0, 285), 66: (0, 73), 57: (0, 57), 69: (0, 92), 84: (0, 156), 59: (0, 227), 68: (0, 343), 90: (0, 319), 87: (0, 26), 91: (0, 206), 2: (1, {'@': 439}), 3: (1, {'@': 439}), 4: (1, {'@': 439}), 5: (1, {'@': 439}), 6: (1, {'@': 439}), 7: (1, {'@': 439}), 8: (1, {'@': 439}), 9: (1, {'@': 439}), 10: (1, {'@': 439}), 11: (1, {'@': 439}), 12: (1, {'@': 439}), 13: (1, {'@': 439}), 14: (1, {'@': 439}), 15: (1, {'@': 439}), 16: (1, {'@': 439}), 17: (1, {'@': 439}), 18: (1, {'@': 439}), 19: (1, {'@': 439}), 20: (1, {'@': 439}), 21: (1, {'@': 439}), 22: (1, {'@': 439}), 23: (1, {'@': 439}), 24: (1, {'@': 439}), 25: (1, {'@': 439}), 26: (1, {'@': 439}), 27: (1, {'@': 439}), 28: (1, {'@': 439}), 29: (1, {'@': 439}), 30: (1, {'@': 439}), 0: (1, {'@': 439}), 31: (1, {'@': 439})}, 580: {92: (0, 299), 53: (1, {'@': 231}), 54: (1, {'@': 231}), 55: (1, {'@': 231}), 56: (1, {'@': 231}), 2: (1, {'@': 231}), 3: (1, {'@': 231}), 57: (1, {'@': 231}), 58: (1, {'@': 231}), 59: (1, {'@': 231}), 8: (1, {'@': 231}), 60: (1, {'@': 231}), 9: (1, {'@': 231}), 11: (1, {'@': 231}), 12: (1, {'@': 231}), 61: (1, {'@': 231}), 13: (1, {'@': 231}), 62: (1, {'@': 231}), 63: (1, {'@': 231}), 15: (1, {'@': 231}), 64: (1, {'@': 231}), 16: (1, {'@': 231}), 17: (1, {'@': 231}), 65: (1, {'@': 231}), 66: (1, {'@': 231}), 67: (1, {'@': 231}), 68: (1, {'@': 231}), 69: (1, {'@': 231}), 70: (1, {'@': 231}), 71: (1, {'@': 231}), 25: (1, {'@': 231}), 72: (1, {'@': 231}), 73: (1, {'@': 231}), 26: (1, {'@': 231}), 27: (1, {'@': 231}), 1: (1, {'@': 231}), 28: (1, {'@': 231}), 30: (1, {'@': 231}), 74: (1, {'@': 231}), 75: (1, {'@': 231}), 76: (1, {'@': 231}), 77: (1, {'@': 231}), 78: (1, {'@': 231}), 79: (1, {'@': 231}), 80: (1, {'@': 231}), 81: (1, {'@': 231}), 4: (1, {'@': 231}), 5: (1, {'@': 231}), 82: (1, {'@': 231}), 6: (1, {'@': 231}), 7: (1, {'@': 231}), 84: (1, {'@': 231}), 10: (1, {'@': 231}), 14: (1, {'@': 231}), 85: (1, {'@': 231}), 18: (1, {'@': 231}), 19: (1, {'@': 231}), 86: (1, {'@': 231}), 20: (1, {'@': 231}), 21: (1, {'@': 231}), 87: (1, {'@': 231}), 22: (1, {'@': 231}), 23: (1, {'@': 231}), 24: (1, {'@': 231}), 51: (1, {'@': 231}), 88: (1, {'@': 231}), 89: (1, {'@': 231}), 90: (1, {'@': 231}), 91: (1, {'@': 231}), 29: (1, {'@': 231}), 0: (1, {'@': 231}), 31: (1, {'@': 231}), 93: (1, {'@': 231})}, 581: {53: (1, {'@': 229}), 54: (1, {'@': 229}), 56: (1, {'@': 229}), 2: (1, {'@': 229}), 3: (1, {'@': 229}), 57: (1, {'@': 229}), 58: (1, {'@': 229}), 59: (1, {'@': 229}), 8: (1, {'@': 229}), 60: (1, {'@': 229}), 9: (1, {'@': 229}), 11: (1, {'@': 229}), 12: (1, {'@': 229}), 13: (1, {'@': 229}), 62: (1, {'@': 229}), 63: (1, {'@': 229}), 15: (1, {'@': 229}), 64: (1, {'@': 229}), 16: (1, {'@': 229}), 17: (1, {'@': 229}), 66: (1, {'@': 229}), 68: (1, {'@': 229}), 69: (1, {'@': 229}), 70: (1, {'@': 229}), 71: (1, {'@': 229}), 25: (1, {'@': 229}), 73: (1, {'@': 229}), 26: (1, {'@': 229}), 27: (1, {'@': 229}), 1: (1, {'@': 229}), 28: (1, {'@': 229}), 30: (1, {'@': 229}), 74: (1, {'@': 229}), 75: (1, {'@': 229}), 77: (1, {'@': 229}), 78: (1, {'@': 229}), 79: (1, {'@': 229}), 80: (1, {'@': 229}), 81: (1, {'@': 229}), 4: (1, {'@': 229}), 5: (1, {'@': 229}), 82: (1, {'@': 229}), 6: (1, {'@': 229}), 7: (1, {'@': 229}), 84: (1, {'@': 229}), 10: (1, {'@': 229}), 14: (1, {'@': 229}), 85: (1, {'@': 229}), 18: (1, {'@': 229}), 19: (1, {'@': 229}), 86: (1, {'@': 229}), 20: (1, {'@': 229}), 21: (1, {'@': 229}), 87: (1, {'@': 229}), 22: (1, {'@': 229}), 23: (1, {'@': 229}), 24: (1, {'@': 229}), 51: (1, {'@': 229}), 88: (1, {'@': 229}), 89: (1, {'@': 229}), 90: (1, {'@': 229}), 91: (1, {'@': 229}), 29: (1, {'@': 229}), 0: (1, {'@': 229}), 31: (1, {'@': 229}), 93: (1, {'@': 229})}, 582: {195: (0, 36), 51: (0, 67), 1: (1, {'@': 196}), 24: (1, {'@': 196})}, 583: {53: (1, {'@': 285}), 54: (1, {'@': 285}), 55: (1, {'@': 285}), 56: (1, {'@': 285}), 2: (1, {'@': 285}), 3: (1, {'@': 285}), 57: (1, {'@': 285}), 58: (1, {'@': 285}), 59: (1, {'@': 285}), 8: (1, {'@': 285}), 60: (1, {'@': 285}), 9: (1, {'@': 285}), 11: (1, {'@': 285}), 12: (1, {'@': 285}), 61: (1, {'@': 285}), 13: (1, {'@': 285}), 62: (1, {'@': 285}), 63: (1, {'@': 285}), 94: (1, {'@': 285}), 15: (1, {'@': 285}), 64: (1, {'@': 285}), 16: (1, {'@': 285}), 17: (1, {'@': 285}), 99: (1, {'@': 285}), 65: (1, {'@': 285}), 66: (1, {'@': 285}), 67: (1, {'@': 285}), 68: (1, {'@': 285}), 69: (1, {'@': 285}), 95: (1, {'@': 285}), 70: (1, {'@': 285}), 71: (1, {'@': 285}), 96: (1, {'@': 285}), 25: (1, {'@': 285}), 72: (1, {'@': 285}), 73: (1, {'@': 285}), 26: (1, {'@': 285}), 27: (1, {'@': 285}), 1: (1, {'@': 285}), 28: (1, {'@': 285}), 30: (1, {'@': 285}), 74: (1, {'@': 285}), 75: (1, {'@': 285}), 76: (1, {'@': 285}), 101: (1, {'@': 285}), 77: (1, {'@': 285}), 78: (1, {'@': 285}), 79: (1, {'@': 285}), 80: (1, {'@': 285}), 81: (1, {'@': 285}), 4: (1, {'@': 285}), 5: (1, {'@': 285}), 82: (1, {'@': 285}), 6: (1, {'@': 285}), 83: (1, {'@': 285}), 7: (1, {'@': 285}), 102: (1, {'@': 285}), 84: (1, {'@': 285}), 10: (1, {'@': 285}), 103: (1, {'@': 285}), 97: (1, {'@': 285}), 14: (1, {'@': 285}), 85: (1, {'@': 285}), 18: (1, {'@': 285}), 19: (1, {'@': 285}), 86: (1, {'@': 285}), 20: (1, {'@': 285}), 104: (1, {'@': 285}), 21: (1, {'@': 285}), 87: (1, {'@': 285}), 22: (1, {'@': 285}), 23: (1, {'@': 285}), 24: (1, {'@': 285}), 51: (1, {'@': 285}), 88: (1, {'@': 285}), 98: (1, {'@': 285}), 89: (1, {'@': 285}), 90: (1, {'@': 285}), 91: (1, {'@': 285}), 92: (1, {'@': 285}), 29: (1, {'@': 285}), 0: (1, {'@': 285}), 31: (1, {'@': 285}), 93: (1, {'@': 285}), 100: (1, {'@': 285})}, 584: {5: (0, 364)}, 585: {53: (1, {'@': 277}), 54: (1, {'@': 277}), 55: (1, {'@': 277}), 56: (1, {'@': 277}), 2: (1, {'@': 277}), 3: (1, {'@': 277}), 57: (1, {'@': 277}), 58: (1, {'@': 277}), 59: (1, {'@': 277}), 8: (1, {'@': 277}), 60: (1, {'@': 277}), 9: (1, {'@': 277}), 11: (1, {'@': 277}), 12: (1, {'@': 277}), 61: (1, {'@': 277}), 13: (1, {'@': 277}), 62: (1, {'@': 277}), 63: (1, {'@': 277}), 94: (1, {'@': 277}), 15: (1, {'@': 277}), 64: (1, {'@': 277}), 16: (1, {'@': 277}), 17: (1, {'@': 277}), 99: (1, {'@': 277}), 65: (1, {'@': 277}), 66: (1, {'@': 277}), 67: (1, {'@': 277}), 68: (1, {'@': 277}), 69: (1, {'@': 277}), 95: (1, {'@': 277}), 70: (1, {'@': 277}), 71: (1, {'@': 277}), 96: (1, {'@': 277}), 25: (1, {'@': 277}), 72: (1, {'@': 277}), 73: (1, {'@': 277}), 26: (1, {'@': 277}), 27: (1, {'@': 277}), 1: (1, {'@': 277}), 28: (1, {'@': 277}), 30: (1, {'@': 277}), 74: (1, {'@': 277}), 75: (1, {'@': 277}), 76: (1, {'@': 277}), 101: (1, {'@': 277}), 77: (1, {'@': 277}), 78: (1, {'@': 277}), 79: (1, {'@': 277}), 80: (1, {'@': 277}), 81: (1, {'@': 277}), 4: (1, {'@': 277}), 5: (1, {'@': 277}), 82: (1, {'@': 277}), 6: (1, {'@': 277}), 83: (1, {'@': 277}), 7: (1, {'@': 277}), 102: (1, {'@': 277}), 84: (1, {'@': 277}), 10: (1, {'@': 277}), 103: (1, {'@': 277}), 97: (1, {'@': 277}), 14: (1, {'@': 277}), 85: (1, {'@': 277}), 18: (1, {'@': 277}), 19: (1, {'@': 277}), 86: (1, {'@': 277}), 20: (1, {'@': 277}), 104: (1, {'@': 277}), 21: (1, {'@': 277}), 87: (1, {'@': 277}), 22: (1, {'@': 277}), 23: (1, {'@': 277}), 24: (1, {'@': 277}), 51: (1, {'@': 277}), 88: (1, {'@': 277}), 98: (1, {'@': 277}), 89: (1, {'@': 277}), 90: (1, {'@': 277}), 91: (1, {'@': 277}), 92: (1, {'@': 277}), 29: (1, {'@': 277}), 0: (1, {'@': 277}), 31: (1, {'@': 277}), 93: (1, {'@': 277}), 100: (1, {'@': 277})}, 586: {122: (0, 384)}, 587: {3: (1, {'@': 347}), 4: (1, {'@': 347}), 5: (1, {'@': 347}), 6: (1, {'@': 347}), 7: (1, {'@': 347}), 8: (1, {'@': 347}), 9: (1, {'@': 347}), 14: (1, {'@': 347}), 17: (1, {'@': 347}), 18: (1, {'@': 347}), 19: (1, {'@': 347}), 20: (1, {'@': 347}), 21: (1, {'@': 347}), 22: (1, {'@': 347}), 23: (1, {'@': 347}), 26: (1, {'@': 347}), 28: (1, {'@': 347}), 29: (1, {'@': 347}), 30: (1, {'@': 347}), 0: (1, {'@': 347})}, 588: {146: (0, 480), 141: (0, 582), 0: (0, 177)}, 589: {21: (0, 324), 1: (0, 577)}, 590: {23: (1, {'@': 189}), 108: (1, {'@': 189}), 51: (1, {'@': 189}), 1: (1, {'@': 189}), 77: (1, {'@': 189}), 53: (1, {'@': 189}), 54: (1, {'@': 189}), 80: (1, {'@': 189}), 81: (1, {'@': 189}), 86: (1, {'@': 189}), 4: (1, {'@': 189}), 71: (1, {'@': 189}), 88: (1, {'@': 189}), 7: (1, {'@': 189}), 58: (1, {'@': 189}), 73: (1, {'@': 189}), 89: (1, {'@': 189}), 60: (1, {'@': 189}), 74: (1, {'@': 189}), 63: (1, {'@': 189}), 14: (1, {'@': 189}), 93: (1, {'@': 189}), 24: (1, {'@': 189}), 29: (1, {'@': 189}), 5: (1, {'@': 189})}, 591: {53: (1, {'@': 148}), 54: (1, {'@': 148}), 55: (1, {'@': 148}), 56: (1, {'@': 148}), 2: (1, {'@': 148}), 3: (1, {'@': 148}), 57: (1, {'@': 148}), 58: (1, {'@': 148}), 59: (1, {'@': 148}), 8: (1, {'@': 148}), 60: (1, {'@': 148}), 9: (1, {'@': 148}), 11: (1, {'@': 148}), 12: (1, {'@': 148}), 61: (1, {'@': 148}), 13: (1, {'@': 148}), 62: (1, {'@': 148}), 63: (1, {'@': 148}), 94: (1, {'@': 148}), 15: (1, {'@': 148}), 64: (1, {'@': 148}), 16: (1, {'@': 148}), 17: (1, {'@': 148}), 99: (1, {'@': 148}), 65: (1, {'@': 148}), 66: (1, {'@': 148}), 67: (1, {'@': 148}), 68: (1, {'@': 148}), 69: (1, {'@': 148}), 95: (1, {'@': 148}), 70: (1, {'@': 148}), 71: (1, {'@': 148}), 96: (1, {'@': 148}), 25: (1, {'@': 148}), 72: (1, {'@': 148}), 73: (1, {'@': 148}), 26: (1, {'@': 148}), 27: (1, {'@': 148}), 1: (1, {'@': 148}), 28: (1, {'@': 148}), 30: (1, {'@': 148}), 74: (1, {'@': 148}), 75: (1, {'@': 148}), 76: (1, {'@': 148}), 101: (1, {'@': 148}), 77: (1, {'@': 148}), 78: (1, {'@': 148}), 79: (1, {'@': 148}), 80: (1, {'@': 148}), 81: (1, {'@': 148}), 4: (1, {'@': 148}), 5: (1, {'@': 148}), 82: (1, {'@': 148}), 6: (1, {'@': 148}), 83: (1, {'@': 148}), 7: (1, {'@': 148}), 102: (1, {'@': 148}), 84: (1, {'@': 148}), 10: (1, {'@': 148}), 103: (1, {'@': 148}), 97: (1, {'@': 148}), 14: (1, {'@': 148}), 85: (1, {'@': 148}), 18: (1, {'@': 148}), 19: (1, {'@': 148}), 86: (1, {'@': 148}), 20: (1, {'@': 148}), 104: (1, {'@': 148}), 21: (1, {'@': 148}), 87: (1, {'@': 148}), 22: (1, {'@': 148}), 23: (1, {'@': 148}), 24: (1, {'@': 148}), 51: (1, {'@': 148}), 88: (1, {'@': 148}), 98: (1, {'@': 148}), 89: (1, {'@': 148}), 90: (1, {'@': 148}), 91: (1, {'@': 148}), 92: (1, {'@': 148}), 29: (1, {'@': 148}), 0: (1, {'@': 148}), 31: (1, {'@': 148}), 93: (1, {'@': 148}), 100: (1, {'@': 148})}, 592: {1: (1, {'@': 405}), 79: (1, {'@': 405}), 53: (1, {'@': 405}), 54: (1, {'@': 405}), 56: (1, {'@': 405}), 2: (1, {'@': 405}), 3: (1, {'@': 405}), 57: (1, {'@': 405}), 58: (1, {'@': 405}), 59: (1, {'@': 405}), 8: (1, {'@': 405}), 60: (1, {'@': 405}), 9: (1, {'@': 405}), 11: (1, {'@': 405}), 12: (1, {'@': 405}), 13: (1, {'@': 405}), 62: (1, {'@': 405}), 63: (1, {'@': 405}), 15: (1, {'@': 405}), 64: (1, {'@': 405}), 16: (1, {'@': 405}), 17: (1, {'@': 405}), 66: (1, {'@': 405}), 68: (1, {'@': 405}), 69: (1, {'@': 405}), 70: (1, {'@': 405}), 71: (1, {'@': 405}), 25: (1, {'@': 405}), 73: (1, {'@': 405}), 26: (1, {'@': 405}), 27: (1, {'@': 405}), 28: (1, {'@': 405}), 30: (1, {'@': 405}), 74: (1, {'@': 405}), 75: (1, {'@': 405}), 77: (1, {'@': 405}), 80: (1, {'@': 405}), 81: (1, {'@': 405}), 4: (1, {'@': 405}), 5: (1, {'@': 405}), 82: (1, {'@': 405}), 6: (1, {'@': 405}), 7: (1, {'@': 405}), 84: (1, {'@': 405}), 10: (1, {'@': 405}), 14: (1, {'@': 405}), 85: (1, {'@': 405}), 18: (1, {'@': 405}), 19: (1, {'@': 405}), 86: (1, {'@': 405}), 20: (1, {'@': 405}), 21: (1, {'@': 405}), 87: (1, {'@': 405}), 22: (1, {'@': 405}), 23: (1, {'@': 405}), 24: (1, {'@': 405}), 51: (1, {'@': 405}), 88: (1, {'@': 405}), 89: (1, {'@': 405}), 90: (1, {'@': 405}), 91: (1, {'@': 405}), 29: (1, {'@': 405}), 0: (1, {'@': 405}), 31: (1, {'@': 405}), 93: (1, {'@': 405})}, 593: {53: (1, {'@': 233}), 54: (1, {'@': 233}), 55: (1, {'@': 233}), 56: (1, {'@': 233}), 2: (1, {'@': 233}), 3: (1, {'@': 233}), 57: (1, {'@': 233}), 58: (1, {'@': 233}), 59: (1, {'@': 233}), 8: (1, {'@': 233}), 60: (1, {'@': 233}), 9: (1, {'@': 233}), 11: (1, {'@': 233}), 12: (1, {'@': 233}), 61: (1, {'@': 233}), 13: (1, {'@': 233}), 62: (1, {'@': 233}), 63: (1, {'@': 233}), 15: (1, {'@': 233}), 64: (1, {'@': 233}), 16: (1, {'@': 233}), 17: (1, {'@': 233}), 65: (1, {'@': 233}), 66: (1, {'@': 233}), 67: (1, {'@': 233}), 68: (1, {'@': 233}), 69: (1, {'@': 233}), 70: (1, {'@': 233}), 71: (1, {'@': 233}), 25: (1, {'@': 233}), 72: (1, {'@': 233}), 73: (1, {'@': 233}), 26: (1, {'@': 233}), 27: (1, {'@': 233}), 1: (1, {'@': 233}), 28: (1, {'@': 233}), 30: (1, {'@': 233}), 74: (1, {'@': 233}), 75: (1, {'@': 233}), 76: (1, {'@': 233}), 77: (1, {'@': 233}), 78: (1, {'@': 233}), 79: (1, {'@': 233}), 80: (1, {'@': 233}), 81: (1, {'@': 233}), 4: (1, {'@': 233}), 5: (1, {'@': 233}), 82: (1, {'@': 233}), 6: (1, {'@': 233}), 7: (1, {'@': 233}), 84: (1, {'@': 233}), 10: (1, {'@': 233}), 14: (1, {'@': 233}), 85: (1, {'@': 233}), 18: (1, {'@': 233}), 19: (1, {'@': 233}), 86: (1, {'@': 233}), 20: (1, {'@': 233}), 21: (1, {'@': 233}), 87: (1, {'@': 233}), 22: (1, {'@': 233}), 23: (1, {'@': 233}), 24: (1, {'@': 233}), 51: (1, {'@': 233}), 88: (1, {'@': 233}), 89: (1, {'@': 233}), 90: (1, {'@': 233}), 91: (1, {'@': 233}), 29: (1, {'@': 233}), 0: (1, {'@': 233}), 31: (1, {'@': 233}), 93: (1, {'@': 233})}, 594: {79: (0, 218), 117: (0, 347), 51: (1, {'@': 220}), 24: (1, {'@': 220}), 2: (1, {'@': 220}), 3: (1, {'@': 220}), 4: (1, {'@': 220}), 5: (1, {'@': 220}), 6: (1, {'@': 220}), 7: (1, {'@': 220}), 8: (1, {'@': 220}), 9: (1, {'@': 220}), 10: (1, {'@': 220}), 11: (1, {'@': 220}), 12: (1, {'@': 220}), 13: (1, {'@': 220}), 14: (1, {'@': 220}), 15: (1, {'@': 220}), 16: (1, {'@': 220}), 17: (1, {'@': 220}), 18: (1, {'@': 220}), 19: (1, {'@': 220}), 20: (1, {'@': 220}), 21: (1, {'@': 220}), 22: (1, {'@': 220}), 23: (1, {'@': 220}), 25: (1, {'@': 220}), 26: (1, {'@': 220}), 27: (1, {'@': 220}), 28: (1, {'@': 220}), 29: (1, {'@': 220}), 30: (1, {'@': 220}), 0: (1, {'@': 220}), 31: (1, {'@': 220}), 1: (1, {'@': 220}), 56: (1, {'@': 220}), 82: (1, {'@': 220}), 57: (1, {'@': 220}), 59: (1, {'@': 220}), 84: (1, {'@': 220}), 62: (1, {'@': 220}), 64: (1, {'@': 220}), 85: (1, {'@': 220}), 66: (1, {'@': 220}), 68: (1, {'@': 220}), 87: (1, {'@': 220}), 69: (1, {'@': 220}), 70: (1, {'@': 220}), 90: (1, {'@': 220}), 91: (1, {'@': 220}), 75: (1, {'@': 220}), 77: (1, {'@': 220}), 53: (1, {'@': 220}), 54: (1, {'@': 220}), 80: (1, {'@': 220}), 81: (1, {'@': 220}), 86: (1, {'@': 220}), 71: (1, {'@': 220}), 88: (1, {'@': 220}), 58: (1, {'@': 220}), 73: (1, {'@': 220}), 89: (1, {'@': 220}), 60: (1, {'@': 220}), 74: (1, {'@': 220}), 63: (1, {'@': 220}), 93: (1, {'@': 220})}, 595: {77: (1, {'@': 162}), 53: (1, {'@': 162}), 54: (1, {'@': 162}), 80: (1, {'@': 162}), 81: (1, {'@': 162}), 86: (1, {'@': 162}), 4: (1, {'@': 162}), 71: (1, {'@': 162}), 88: (1, {'@': 162}), 7: (1, {'@': 162}), 58: (1, {'@': 162}), 73: (1, {'@': 162}), 89: (1, {'@': 162}), 60: (1, {'@': 162}), 74: (1, {'@': 162}), 63: (1, {'@': 162}), 14: (1, {'@': 162}), 93: (1, {'@': 162})}, 596: {106: (1, {'@': 426}), 24: (1, {'@': 426}), 105: (1, {'@': 426})}, 597: {21: (0, 37), 23: (0, 165), 0: (0, 118), 114: (0, 477), 176: (0, 386)}, 598: {5: (0, 246), 113: (0, 625)}, 599: {22: (0, 597)}, 600: {22: (0, 103)}, 601: {2: (1, {'@': 435}), 3: (1, {'@': 435}), 4: (1, {'@': 435}), 5: (1, {'@': 435}), 6: (1, {'@': 435}), 7: (1, {'@': 435}), 8: (1, {'@': 435}), 9: (1, {'@': 435}), 10: (1, {'@': 435}), 11: (1, {'@': 435}), 12: (1, {'@': 435}), 13: (1, {'@': 435}), 14: (1, {'@': 435}), 15: (1, {'@': 435}), 16: (1, {'@': 435}), 17: (1, {'@': 435}), 18: (1, {'@': 435}), 19: (1, {'@': 435}), 20: (1, {'@': 435}), 21: (1, {'@': 435}), 22: (1, {'@': 435}), 23: (1, {'@': 435}), 24: (1, {'@': 435}), 25: (1, {'@': 435}), 26: (1, {'@': 435}), 27: (1, {'@': 435}), 28: (1, {'@': 435}), 29: (1, {'@': 435}), 30: (1, {'@': 435}), 0: (1, {'@': 435}), 31: (1, {'@': 435})}, 602: {8: (0, 392), 0: (0, 107), 42: (0, 175)}, 603: {24: (0, 462)}, 604: {106: (1, {'@': 427}), 24: (1, {'@': 427}), 105: (1, {'@': 427})}, 605: {77: (1, {'@': 147}), 53: (1, {'@': 147}), 54: (1, {'@': 147}), 80: (1, {'@': 147}), 81: (1, {'@': 147}), 86: (1, {'@': 147}), 4: (1, {'@': 147}), 5: (1, {'@': 147}), 71: (1, {'@': 147}), 88: (1, {'@': 147}), 7: (1, {'@': 147}), 58: (1, {'@': 147}), 73: (1, {'@': 147}), 89: (1, {'@': 147}), 60: (1, {'@': 147}), 74: (1, {'@': 147}), 63: (1, {'@': 147}), 14: (1, {'@': 147}), 93: (1, {'@': 147}), 24: (1, {'@': 147})}, 606: {51: (1, {'@': 195}), 1: (1, {'@': 195}), 24: (1, {'@': 195})}, 607: {24: (0, 619)}, 608: {51: (0, 486), 24: (1, {'@': 213}), 1: (1, {'@': 213})}, 609: {144: (0, 137), 98: (0, 541), 94: (0, 239), 54: (1, {'@': 421}), 56: (1, {'@': 421}), 2: (1, {'@': 421}), 3: (1, {'@': 421}), 57: (1, {'@': 421}), 58: (1, {'@': 421}), 59: (1, {'@': 421}), 8: (1, {'@': 421}), 60: (1, {'@': 421}), 9: (1, {'@': 421}), 12: (1, {'@': 421}), 13: (1, {'@': 421}), 64: (1, {'@': 421}), 65: (1, {'@': 421}), 67: (1, {'@': 421}), 95: (1, {'@': 421}), 70: (1, {'@': 421}), 25: (1, {'@': 421}), 72: (1, {'@': 421}), 73: (1, {'@': 421}), 1: (1, {'@': 421}), 28: (1, {'@': 421}), 30: (1, {'@': 421}), 76: (1, {'@': 421}), 78: (1, {'@': 421}), 79: (1, {'@': 421}), 4: (1, {'@': 421}), 5: (1, {'@': 421}), 7: (1, {'@': 421}), 84: (1, {'@': 421}), 97: (1, {'@': 421}), 86: (1, {'@': 421}), 20: (1, {'@': 421}), 87: (1, {'@': 421}), 23: (1, {'@': 421}), 88: (1, {'@': 421}), 89: (1, {'@': 421}), 91: (1, {'@': 421}), 29: (1, {'@': 421}), 0: (1, {'@': 421}), 31: (1, {'@': 421}), 53: (1, {'@': 421}), 55: (1, {'@': 421}), 11: (1, {'@': 421}), 61: (1, {'@': 421}), 62: (1, {'@': 421}), 63: (1, {'@': 421}), 15: (1, {'@': 421}), 16: (1, {'@': 421}), 17: (1, {'@': 421}), 99: (1, {'@': 421}), 66: (1, {'@': 421}), 68: (1, {'@': 421}), 69: (1, {'@': 421}), 71: (1, {'@': 421}), 26: (1, {'@': 421}), 27: (1, {'@': 421}), 74: (1, {'@': 421}), 75: (1, {'@': 421}), 101: (1, {'@': 421}), 77: (1, {'@': 421}), 80: (1, {'@': 421}), 81: (1, {'@': 421}), 82: (1, {'@': 421}), 6: (1, {'@': 421}), 83: (1, {'@': 421}), 102: (1, {'@': 421}), 10: (1, {'@': 421}), 14: (1, {'@': 421}), 85: (1, {'@': 421}), 18: (1, {'@': 421}), 19: (1, {'@': 421}), 104: (1, {'@': 421}), 21: (1, {'@': 421}), 22: (1, {'@': 421}), 24: (1, {'@': 421}), 51: (1, {'@': 421}), 90: (1, {'@': 421}), 92: (1, {'@': 421}), 93: (1, {'@': 421})}, 610: {32: (0, 559), 33: (0, 260), 20: (0, 95), 42: (0, 168), 36: (0, 550), 28: (0, 315), 5: (0, 642), 4: (0, 556), 22: (0, 401), 41: (0, 91), 26: (0, 20), 34: (0, 13), 0: (0, 107), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 3: (0, 211), 47: (0, 243), 48: (0, 238), 18: (0, 651), 39: (0, 506), 49: (0, 259), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 611: {53: (1, {'@': 411}), 56: (1, {'@': 411}), 55: (1, {'@': 411}), 54: (1, {'@': 411}), 2: (1, {'@': 411}), 3: (1, {'@': 411}), 57: (1, {'@': 411}), 58: (1, {'@': 411}), 59: (1, {'@': 411}), 8: (1, {'@': 411}), 60: (1, {'@': 411}), 9: (1, {'@': 411}), 11: (1, {'@': 411}), 12: (1, {'@': 411}), 61: (1, {'@': 411}), 13: (1, {'@': 411}), 62: (1, {'@': 411}), 63: (1, {'@': 411}), 15: (1, {'@': 411}), 64: (1, {'@': 411}), 16: (1, {'@': 411}), 17: (1, {'@': 411}), 65: (1, {'@': 411}), 66: (1, {'@': 411}), 67: (1, {'@': 411}), 68: (1, {'@': 411}), 69: (1, {'@': 411}), 70: (1, {'@': 411}), 71: (1, {'@': 411}), 25: (1, {'@': 411}), 72: (1, {'@': 411}), 73: (1, {'@': 411}), 26: (1, {'@': 411}), 27: (1, {'@': 411}), 1: (1, {'@': 411}), 28: (1, {'@': 411}), 30: (1, {'@': 411}), 75: (1, {'@': 411}), 74: (1, {'@': 411}), 76: (1, {'@': 411}), 77: (1, {'@': 411}), 78: (1, {'@': 411}), 79: (1, {'@': 411}), 80: (1, {'@': 411}), 81: (1, {'@': 411}), 4: (1, {'@': 411}), 5: (1, {'@': 411}), 82: (1, {'@': 411}), 6: (1, {'@': 411}), 7: (1, {'@': 411}), 84: (1, {'@': 411}), 10: (1, {'@': 411}), 14: (1, {'@': 411}), 85: (1, {'@': 411}), 18: (1, {'@': 411}), 19: (1, {'@': 411}), 86: (1, {'@': 411}), 20: (1, {'@': 411}), 21: (1, {'@': 411}), 87: (1, {'@': 411}), 22: (1, {'@': 411}), 23: (1, {'@': 411}), 24: (1, {'@': 411}), 51: (1, {'@': 411}), 88: (1, {'@': 411}), 89: (1, {'@': 411}), 90: (1, {'@': 411}), 91: (1, {'@': 411}), 92: (1, {'@': 411}), 29: (1, {'@': 411}), 0: (1, {'@': 411}), 31: (1, {'@': 411}), 93: (1, {'@': 411})}, 612: {24: (0, 637), 105: (0, 599), 189: (0, 613), 106: (0, 598), 190: (0, 604)}, 613: {24: (0, 158)}, 614: {1: (0, 241)}, 615: {100: (0, 495)}, 616: {51: (1, {'@': 401}), 1: (1, {'@': 401}), 24: (1, {'@': 401})}, 617: {106: (1, {'@': 424}), 24: (1, {'@': 424}), 105: (1, {'@': 424})}, 618: {3: (0, 96), 167: (0, 443), 20: (0, 109), 1: (0, 344), 168: (0, 289)}, 619: {16: (1, {'@': 291}), 17: (1, {'@': 291}), 18: (1, {'@': 291}), 2: (1, {'@': 291}), 19: (1, {'@': 291}), 3: (1, {'@': 291}), 4: (1, {'@': 291}), 20: (1, {'@': 291}), 21: (1, {'@': 291}), 22: (1, {'@': 291}), 5: (1, {'@': 291}), 23: (1, {'@': 291}), 24: (1, {'@': 291}), 6: (1, {'@': 291}), 25: (1, {'@': 291}), 7: (1, {'@': 291}), 8: (1, {'@': 291}), 9: (1, {'@': 291}), 26: (1, {'@': 291}), 27: (1, {'@': 291}), 10: (1, {'@': 291}), 11: (1, {'@': 291}), 28: (1, {'@': 291}), 29: (1, {'@': 291}), 30: (1, {'@': 291}), 12: (1, {'@': 291}), 0: (1, {'@': 291}), 13: (1, {'@': 291}), 31: (1, {'@': 291}), 14: (1, {'@': 291}), 15: (1, {'@': 291})}, 620: {32: (0, 559), 33: (0, 260), 20: (0, 95), 42: (0, 168), 36: (0, 550), 28: (0, 315), 5: (0, 642), 4: (0, 556), 22: (0, 465), 41: (0, 91), 26: (0, 20), 34: (0, 13), 0: (0, 107), 7: (0, 139), 14: (0, 204), 35: (0, 8), 43: (0, 33), 17: (0, 585), 44: (0, 584), 9: (0, 530), 29: (0, 587), 30: (0, 44), 19: (0, 523), 39: (0, 126), 21: (0, 631), 6: (0, 570), 3: (0, 211), 47: (0, 243), 48: (0, 238), 18: (0, 651), 49: (0, 259), 8: (0, 500), 23: (0, 134), 50: (0, 102), 45: (0, 553)}, 621: {22: (0, 481)}, 622: {92: (0, 299), 1: (0, 593)}, 623: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 109: (0, 533), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 624: {114: (0, 185), 193: (0, 1), 0: (0, 118)}, 625: {24: (1, {'@': 299})}, 626: {56: (1, {'@': 353}), 54: (1, {'@': 353}), 2: (1, {'@': 353}), 3: (1, {'@': 353}), 57: (1, {'@': 353}), 58: (1, {'@': 353}), 59: (1, {'@': 353}), 8: (1, {'@': 353}), 60: (1, {'@': 353}), 9: (1, {'@': 353}), 12: (1, {'@': 353}), 13: (1, {'@': 353}), 94: (1, {'@': 353}), 64: (1, {'@': 353}), 65: (1, {'@': 353}), 67: (1, {'@': 353}), 95: (1, {'@': 353}), 70: (1, {'@': 353}), 96: (1, {'@': 353}), 25: (1, {'@': 353}), 72: (1, {'@': 353}), 73: (1, {'@': 353}), 1: (1, {'@': 353}), 28: (1, {'@': 353}), 30: (1, {'@': 353}), 76: (1, {'@': 353}), 78: (1, {'@': 353}), 79: (1, {'@': 353}), 4: (1, {'@': 353}), 5: (1, {'@': 353}), 7: (1, {'@': 353}), 84: (1, {'@': 353}), 97: (1, {'@': 353}), 86: (1, {'@': 353}), 20: (1, {'@': 353}), 87: (1, {'@': 353}), 23: (1, {'@': 353}), 88: (1, {'@': 353}), 98: (1, {'@': 353}), 89: (1, {'@': 353}), 91: (1, {'@': 353}), 29: (1, {'@': 353}), 0: (1, {'@': 353}), 31: (1, {'@': 353}), 53: (1, {'@': 353}), 55: (1, {'@': 353}), 120: (1, {'@': 353}), 11: (1, {'@': 353}), 61: (1, {'@': 353}), 62: (1, {'@': 353}), 63: (1, {'@': 353}), 15: (1, {'@': 353}), 16: (1, {'@': 353}), 17: (1, {'@': 353}), 99: (1, {'@': 353}), 66: (1, {'@': 353}), 68: (1, {'@': 353}), 100: (1, {'@': 353}), 69: (1, {'@': 353}), 71: (1, {'@': 353}), 26: (1, {'@': 353}), 27: (1, {'@': 353}), 75: (1, {'@': 353}), 74: (1, {'@': 353}), 101: (1, {'@': 353}), 121: (1, {'@': 353}), 77: (1, {'@': 353}), 80: (1, {'@': 353}), 81: (1, {'@': 353}), 82: (1, {'@': 353}), 6: (1, {'@': 353}), 83: (1, {'@': 353}), 102: (1, {'@': 353}), 10: (1, {'@': 353}), 103: (1, {'@': 353}), 108: (1, {'@': 353}), 14: (1, {'@': 353}), 85: (1, {'@': 353}), 18: (1, {'@': 353}), 19: (1, {'@': 353}), 104: (1, {'@': 353}), 21: (1, {'@': 353}), 22: (1, {'@': 353}), 24: (1, {'@': 353}), 51: (1, {'@': 353}), 90: (1, {'@': 353}), 92: (1, {'@': 353}), 93: (1, {'@': 353})}, 627: {1: (0, 190)}, 628: {16: (1, {'@': 293}), 17: (1, {'@': 293}), 18: (1, {'@': 293}), 2: (1, {'@': 293}), 19: (1, {'@': 293}), 3: (1, {'@': 293}), 4: (1, {'@': 293}), 20: (1, {'@': 293}), 21: (1, {'@': 293}), 22: (1, {'@': 293}), 5: (1, {'@': 293}), 23: (1, {'@': 293}), 24: (1, {'@': 293}), 6: (1, {'@': 293}), 25: (1, {'@': 293}), 7: (1, {'@': 293}), 8: (1, {'@': 293}), 9: (1, {'@': 293}), 26: (1, {'@': 293}), 27: (1, {'@': 293}), 10: (1, {'@': 293}), 11: (1, {'@': 293}), 28: (1, {'@': 293}), 29: (1, {'@': 293}), 30: (1, {'@': 293}), 12: (1, {'@': 293}), 0: (1, {'@': 293}), 13: (1, {'@': 293}), 31: (1, {'@': 293}), 14: (1, {'@': 293}), 15: (1, {'@': 293})}, 629: {113: (0, 424), 5: (0, 246)}, 630: {77: (1, {'@': 163}), 53: (1, {'@': 163}), 54: (1, {'@': 163}), 80: (1, {'@': 163}), 81: (1, {'@': 163}), 86: (1, {'@': 163}), 4: (1, {'@': 163}), 71: (1, {'@': 163}), 88: (1, {'@': 163}), 7: (1, {'@': 163}), 58: (1, {'@': 163}), 73: (1, {'@': 163}), 89: (1, {'@': 163}), 60: (1, {'@': 163}), 74: (1, {'@': 163}), 63: (1, {'@': 163}), 14: (1, {'@': 163}), 93: (1, {'@': 163})}, 631: {32: (0, 559), 42: (0, 168), 4: (0, 556), 22: (0, 442), 36: (0, 563), 28: (0, 315), 5: (0, 642), 0: (0, 107), 34: (0, 13), 7: (0, 139), 14: (0, 204), 35: (0, 8), 17: (0, 585), 44: (0, 584), 9: (0, 530), 30: (0, 44), 19: (0, 523), 21: (0, 631), 6: (0, 570), 48: (0, 238), 18: (0, 651), 8: (0, 500), 23: (0, 134), 50: (0, 102)}, 632: {24: (0, 403)}, 633: {32: (0, 559), 41: (0, 201), 33: (0, 398), 22: (0, 444), 40: (0, 251), 28: (0, 315), 36: (0, 230), 110: (0, 47), 37: (0, 153), 0: (0, 306), 1: (0, 560), 39: (0, 31), 26: (0, 20), 34: (0, 13), 35: (0, 8), 141: (0, 582), 17: (0, 585), 38: (0, 55), 9: (0, 530), 29: (0, 587), 30: (0, 44), 45: (0, 245), 6: (0, 570), 21: (0, 631), 3: (0, 211), 18: (0, 651), 146: (0, 85), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 257), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 50: (0, 102)}, 634: {22: (0, 15)}, 635: {113: (0, 373), 5: (0, 246)}, 636: {42: (0, 298), 0: (0, 107), 18: (0, 390)}, 637: {16: (1, {'@': 297}), 17: (1, {'@': 297}), 18: (1, {'@': 297}), 2: (1, {'@': 297}), 19: (1, {'@': 297}), 3: (1, {'@': 297}), 4: (1, {'@': 297}), 20: (1, {'@': 297}), 21: (1, {'@': 297}), 22: (1, {'@': 297}), 5: (1, {'@': 297}), 23: (1, {'@': 297}), 24: (1, {'@': 297}), 6: (1, {'@': 297}), 25: (1, {'@': 297}), 7: (1, {'@': 297}), 8: (1, {'@': 297}), 9: (1, {'@': 297}), 26: (1, {'@': 297}), 27: (1, {'@': 297}), 10: (1, {'@': 297}), 11: (1, {'@': 297}), 28: (1, {'@': 297}), 29: (1, {'@': 297}), 30: (1, {'@': 297}), 12: (1, {'@': 297}), 0: (1, {'@': 297}), 13: (1, {'@': 297}), 31: (1, {'@': 297}), 14: (1, {'@': 297}), 15: (1, {'@': 297})}, 638: {21: (0, 324), 53: (1, {'@': 239}), 54: (1, {'@': 239}), 55: (1, {'@': 239}), 56: (1, {'@': 239}), 2: (1, {'@': 239}), 3: (1, {'@': 239}), 57: (1, {'@': 239}), 58: (1, {'@': 239}), 59: (1, {'@': 239}), 8: (1, {'@': 239}), 60: (1, {'@': 239}), 9: (1, {'@': 239}), 11: (1, {'@': 239}), 12: (1, {'@': 239}), 61: (1, {'@': 239}), 13: (1, {'@': 239}), 62: (1, {'@': 239}), 63: (1, {'@': 239}), 15: (1, {'@': 239}), 64: (1, {'@': 239}), 16: (1, {'@': 239}), 17: (1, {'@': 239}), 65: (1, {'@': 239}), 66: (1, {'@': 239}), 67: (1, {'@': 239}), 68: (1, {'@': 239}), 69: (1, {'@': 239}), 70: (1, {'@': 239}), 71: (1, {'@': 239}), 25: (1, {'@': 239}), 72: (1, {'@': 239}), 73: (1, {'@': 239}), 26: (1, {'@': 239}), 27: (1, {'@': 239}), 1: (1, {'@': 239}), 28: (1, {'@': 239}), 30: (1, {'@': 239}), 74: (1, {'@': 239}), 75: (1, {'@': 239}), 76: (1, {'@': 239}), 77: (1, {'@': 239}), 78: (1, {'@': 239}), 79: (1, {'@': 239}), 80: (1, {'@': 239}), 81: (1, {'@': 239}), 4: (1, {'@': 239}), 5: (1, {'@': 239}), 82: (1, {'@': 239}), 6: (1, {'@': 239}), 83: (1, {'@': 239}), 7: (1, {'@': 239}), 84: (1, {'@': 239}), 10: (1, {'@': 239}), 14: (1, {'@': 239}), 85: (1, {'@': 239}), 18: (1, {'@': 239}), 19: (1, {'@': 239}), 86: (1, {'@': 239}), 20: (1, {'@': 239}), 87: (1, {'@': 239}), 22: (1, {'@': 239}), 23: (1, {'@': 239}), 24: (1, {'@': 239}), 51: (1, {'@': 239}), 88: (1, {'@': 239}), 89: (1, {'@': 239}), 90: (1, {'@': 239}), 91: (1, {'@': 239}), 92: (1, {'@': 239}), 29: (1, {'@': 239}), 0: (1, {'@': 239}), 31: (1, {'@': 239}), 93: (1, {'@': 239})}, 639: {1: (0, 575), 78: (0, 117)}, 640: {8: (0, 446)}, 641: {21: (0, 620), 52: (0, 589), 1: (0, 544)}, 642: {141: (0, 582), 0: (0, 177), 24: (0, 296), 146: (0, 39)}, 643: {29: (0, 521), 23: (1, {'@': 122}), 108: (1, {'@': 122}), 51: (1, {'@': 122}), 1: (1, {'@': 122}), 77: (1, {'@': 122}), 53: (1, {'@': 122}), 54: (1, {'@': 122}), 80: (1, {'@': 122}), 81: (1, {'@': 122}), 86: (1, {'@': 122}), 4: (1, {'@': 122}), 71: (1, {'@': 122}), 88: (1, {'@': 122}), 7: (1, {'@': 122}), 58: (1, {'@': 122}), 73: (1, {'@': 122}), 89: (1, {'@': 122}), 60: (1, {'@': 122}), 74: (1, {'@': 122}), 63: (1, {'@': 122}), 14: (1, {'@': 122}), 93: (1, {'@': 122}), 24: (1, {'@': 122}), 5: (1, {'@': 122})}, 644: {53: (1, {'@': 284}), 54: (1, {'@': 284}), 55: (1, {'@': 284}), 56: (1, {'@': 284}), 2: (1, {'@': 284}), 3: (1, {'@': 284}), 57: (1, {'@': 284}), 58: (1, {'@': 284}), 59: (1, {'@': 284}), 8: (1, {'@': 284}), 60: (1, {'@': 284}), 9: (1, {'@': 284}), 11: (1, {'@': 284}), 12: (1, {'@': 284}), 61: (1, {'@': 284}), 13: (1, {'@': 284}), 62: (1, {'@': 284}), 63: (1, {'@': 284}), 94: (1, {'@': 284}), 15: (1, {'@': 284}), 64: (1, {'@': 284}), 16: (1, {'@': 284}), 17: (1, {'@': 284}), 99: (1, {'@': 284}), 65: (1, {'@': 284}), 66: (1, {'@': 284}), 67: (1, {'@': 284}), 68: (1, {'@': 284}), 69: (1, {'@': 284}), 95: (1, {'@': 284}), 70: (1, {'@': 284}), 71: (1, {'@': 284}), 96: (1, {'@': 284}), 25: (1, {'@': 284}), 72: (1, {'@': 284}), 73: (1, {'@': 284}), 26: (1, {'@': 284}), 27: (1, {'@': 284}), 1: (1, {'@': 284}), 28: (1, {'@': 284}), 30: (1, {'@': 284}), 74: (1, {'@': 284}), 75: (1, {'@': 284}), 76: (1, {'@': 284}), 101: (1, {'@': 284}), 77: (1, {'@': 284}), 78: (1, {'@': 284}), 79: (1, {'@': 284}), 80: (1, {'@': 284}), 81: (1, {'@': 284}), 4: (1, {'@': 284}), 5: (1, {'@': 284}), 82: (1, {'@': 284}), 6: (1, {'@': 284}), 83: (1, {'@': 284}), 7: (1, {'@': 284}), 102: (1, {'@': 284}), 84: (1, {'@': 284}), 10: (1, {'@': 284}), 103: (1, {'@': 284}), 97: (1, {'@': 284}), 14: (1, {'@': 284}), 85: (1, {'@': 284}), 18: (1, {'@': 284}), 19: (1, {'@': 284}), 86: (1, {'@': 284}), 20: (1, {'@': 284}), 104: (1, {'@': 284}), 21: (1, {'@': 284}), 87: (1, {'@': 284}), 22: (1, {'@': 284}), 23: (1, {'@': 284}), 24: (1, {'@': 284}), 51: (1, {'@': 284}), 88: (1, {'@': 284}), 98: (1, {'@': 284}), 89: (1, {'@': 284}), 90: (1, {'@': 284}), 91: (1, {'@': 284}), 92: (1, {'@': 284}), 29: (1, {'@': 284}), 0: (1, {'@': 284}), 31: (1, {'@': 284}), 93: (1, {'@': 284}), 100: (1, {'@': 284})}, 645: {53: (1, {'@': 276}), 54: (1, {'@': 276}), 55: (1, {'@': 276}), 56: (1, {'@': 276}), 2: (1, {'@': 276}), 3: (1, {'@': 276}), 57: (1, {'@': 276}), 58: (1, {'@': 276}), 59: (1, {'@': 276}), 8: (1, {'@': 276}), 60: (1, {'@': 276}), 9: (1, {'@': 276}), 11: (1, {'@': 276}), 12: (1, {'@': 276}), 61: (1, {'@': 276}), 13: (1, {'@': 276}), 62: (1, {'@': 276}), 63: (1, {'@': 276}), 94: (1, {'@': 276}), 15: (1, {'@': 276}), 64: (1, {'@': 276}), 16: (1, {'@': 276}), 17: (1, {'@': 276}), 99: (1, {'@': 276}), 65: (1, {'@': 276}), 66: (1, {'@': 276}), 67: (1, {'@': 276}), 68: (1, {'@': 276}), 69: (1, {'@': 276}), 95: (1, {'@': 276}), 70: (1, {'@': 276}), 71: (1, {'@': 276}), 96: (1, {'@': 276}), 25: (1, {'@': 276}), 72: (1, {'@': 276}), 73: (1, {'@': 276}), 26: (1, {'@': 276}), 27: (1, {'@': 276}), 1: (1, {'@': 276}), 28: (1, {'@': 276}), 30: (1, {'@': 276}), 74: (1, {'@': 276}), 75: (1, {'@': 276}), 76: (1, {'@': 276}), 101: (1, {'@': 276}), 77: (1, {'@': 276}), 78: (1, {'@': 276}), 79: (1, {'@': 276}), 80: (1, {'@': 276}), 81: (1, {'@': 276}), 4: (1, {'@': 276}), 5: (1, {'@': 276}), 82: (1, {'@': 276}), 6: (1, {'@': 276}), 83: (1, {'@': 276}), 7: (1, {'@': 276}), 102: (1, {'@': 276}), 84: (1, {'@': 276}), 10: (1, {'@': 276}), 103: (1, {'@': 276}), 97: (1, {'@': 276}), 14: (1, {'@': 276}), 85: (1, {'@': 276}), 18: (1, {'@': 276}), 19: (1, {'@': 276}), 86: (1, {'@': 276}), 20: (1, {'@': 276}), 104: (1, {'@': 276}), 21: (1, {'@': 276}), 87: (1, {'@': 276}), 22: (1, {'@': 276}), 23: (1, {'@': 276}), 24: (1, {'@': 276}), 51: (1, {'@': 276}), 88: (1, {'@': 276}), 98: (1, {'@': 276}), 89: (1, {'@': 276}), 90: (1, {'@': 276}), 91: (1, {'@': 276}), 92: (1, {'@': 276}), 29: (1, {'@': 276}), 0: (1, {'@': 276}), 31: (1, {'@': 276}), 93: (1, {'@': 276}), 100: (1, {'@': 276})}, 646: {151: (0, 622), 1: (0, 30), 92: (0, 434)}, 647: {100: (0, 531)}, 648: {77: (1, {'@': 115}), 53: (1, {'@': 115}), 54: (1, {'@': 115}), 80: (1, {'@': 115}), 81: (1, {'@': 115}), 86: (1, {'@': 115}), 4: (1, {'@': 115}), 71: (1, {'@': 115}), 88: (1, {'@': 115}), 7: (1, {'@': 115}), 58: (1, {'@': 115}), 73: (1, {'@': 115}), 89: (1, {'@': 115}), 60: (1, {'@': 115}), 74: (1, {'@': 115}), 63: (1, {'@': 115}), 14: (1, {'@': 115}), 93: (1, {'@': 115})}, 649: {1: (0, 438)}, 650: {1: (1, {'@': 406}), 78: (1, {'@': 406}), 79: (1, {'@': 406}), 53: (1, {'@': 406}), 54: (1, {'@': 406}), 56: (1, {'@': 406}), 2: (1, {'@': 406}), 3: (1, {'@': 406}), 57: (1, {'@': 406}), 58: (1, {'@': 406}), 59: (1, {'@': 406}), 8: (1, {'@': 406}), 60: (1, {'@': 406}), 9: (1, {'@': 406}), 11: (1, {'@': 406}), 12: (1, {'@': 406}), 13: (1, {'@': 406}), 62: (1, {'@': 406}), 63: (1, {'@': 406}), 15: (1, {'@': 406}), 64: (1, {'@': 406}), 16: (1, {'@': 406}), 17: (1, {'@': 406}), 66: (1, {'@': 406}), 68: (1, {'@': 406}), 69: (1, {'@': 406}), 70: (1, {'@': 406}), 71: (1, {'@': 406}), 25: (1, {'@': 406}), 73: (1, {'@': 406}), 26: (1, {'@': 406}), 27: (1, {'@': 406}), 28: (1, {'@': 406}), 30: (1, {'@': 406}), 74: (1, {'@': 406}), 75: (1, {'@': 406}), 77: (1, {'@': 406}), 80: (1, {'@': 406}), 81: (1, {'@': 406}), 4: (1, {'@': 406}), 5: (1, {'@': 406}), 82: (1, {'@': 406}), 6: (1, {'@': 406}), 7: (1, {'@': 406}), 84: (1, {'@': 406}), 10: (1, {'@': 406}), 14: (1, {'@': 406}), 85: (1, {'@': 406}), 18: (1, {'@': 406}), 19: (1, {'@': 406}), 86: (1, {'@': 406}), 20: (1, {'@': 406}), 21: (1, {'@': 406}), 87: (1, {'@': 406}), 22: (1, {'@': 406}), 23: (1, {'@': 406}), 24: (1, {'@': 406}), 51: (1, {'@': 406}), 88: (1, {'@': 406}), 89: (1, {'@': 406}), 90: (1, {'@': 406}), 91: (1, {'@': 406}), 29: (1, {'@': 406}), 0: (1, {'@': 406}), 31: (1, {'@': 406}), 93: (1, {'@': 406})}, 651: {120: (0, 356), 53: (1, {'@': 273}), 54: (1, {'@': 273}), 55: (1, {'@': 273}), 56: (1, {'@': 273}), 2: (1, {'@': 273}), 3: (1, {'@': 273}), 57: (1, {'@': 273}), 58: (1, {'@': 273}), 59: (1, {'@': 273}), 8: (1, {'@': 273}), 60: (1, {'@': 273}), 9: (1, {'@': 273}), 11: (1, {'@': 273}), 12: (1, {'@': 273}), 61: (1, {'@': 273}), 13: (1, {'@': 273}), 62: (1, {'@': 273}), 63: (1, {'@': 273}), 94: (1, {'@': 273}), 15: (1, {'@': 273}), 64: (1, {'@': 273}), 16: (1, {'@': 273}), 17: (1, {'@': 273}), 99: (1, {'@': 273}), 65: (1, {'@': 273}), 66: (1, {'@': 273}), 67: (1, {'@': 273}), 68: (1, {'@': 273}), 69: (1, {'@': 273}), 95: (1, {'@': 273}), 70: (1, {'@': 273}), 71: (1, {'@': 273}), 96: (1, {'@': 273}), 25: (1, {'@': 273}), 72: (1, {'@': 273}), 73: (1, {'@': 273}), 26: (1, {'@': 273}), 27: (1, {'@': 273}), 1: (1, {'@': 273}), 28: (1, {'@': 273}), 30: (1, {'@': 273}), 74: (1, {'@': 273}), 75: (1, {'@': 273}), 76: (1, {'@': 273}), 101: (1, {'@': 273}), 77: (1, {'@': 273}), 78: (1, {'@': 273}), 79: (1, {'@': 273}), 80: (1, {'@': 273}), 81: (1, {'@': 273}), 4: (1, {'@': 273}), 5: (1, {'@': 273}), 82: (1, {'@': 273}), 6: (1, {'@': 273}), 83: (1, {'@': 273}), 7: (1, {'@': 273}), 102: (1, {'@': 273}), 84: (1, {'@': 273}), 10: (1, {'@': 273}), 103: (1, {'@': 273}), 97: (1, {'@': 273}), 14: (1, {'@': 273}), 85: (1, {'@': 273}), 18: (1, {'@': 273}), 19: (1, {'@': 273}), 86: (1, {'@': 273}), 20: (1, {'@': 273}), 104: (1, {'@': 273}), 21: (1, {'@': 273}), 87: (1, {'@': 273}), 22: (1, {'@': 273}), 23: (1, {'@': 273}), 24: (1, {'@': 273}), 51: (1, {'@': 273}), 88: (1, {'@': 273}), 98: (1, {'@': 273}), 89: (1, {'@': 273}), 90: (1, {'@': 273}), 91: (1, {'@': 273}), 92: (1, {'@': 273}), 29: (1, {'@': 273}), 0: (1, {'@': 273}), 31: (1, {'@': 273}), 93: (1, {'@': 273}), 100: (1, {'@': 273})}, 652: {51: (0, 497), 1: (1, {'@': 193})}, 653: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 109: (0, 287), 50: (0, 102)}, 654: {169: (0, 28), 21: (0, 222), 48: (0, 363), 34: (0, 342), 23: (0, 311), 170: (0, 336), 171: (0, 366), 0: (0, 309), 152: (0, 169), 42: (0, 282), 172: (0, 253), 6: (0, 262), 32: (0, 485), 114: (0, 477), 173: (0, 471), 22: (0, 667), 18: (0, 425), 44: (0, 498), 8: (0, 429), 174: (0, 501), 175: (0, 493), 4: (0, 556), 5: (0, 642), 7: (0, 139), 14: (0, 204), 54: (0, 461), 176: (0, 393), 35: (0, 406), 148: (0, 405), 60: (0, 417), 177: (0, 254), 178: (0, 234), 179: (0, 228), 1: (1, {'@': 194})}, 655: {53: (1, {'@': 262}), 54: (1, {'@': 262}), 55: (1, {'@': 262}), 56: (1, {'@': 262}), 2: (1, {'@': 262}), 3: (1, {'@': 262}), 57: (1, {'@': 262}), 58: (1, {'@': 262}), 59: (1, {'@': 262}), 8: (1, {'@': 262}), 60: (1, {'@': 262}), 9: (1, {'@': 262}), 11: (1, {'@': 262}), 12: (1, {'@': 262}), 61: (1, {'@': 262}), 13: (1, {'@': 262}), 62: (1, {'@': 262}), 63: (1, {'@': 262}), 94: (1, {'@': 262}), 15: (1, {'@': 262}), 64: (1, {'@': 262}), 16: (1, {'@': 262}), 17: (1, {'@': 262}), 99: (1, {'@': 262}), 65: (1, {'@': 262}), 66: (1, {'@': 262}), 67: (1, {'@': 262}), 68: (1, {'@': 262}), 69: (1, {'@': 262}), 95: (1, {'@': 262}), 70: (1, {'@': 262}), 71: (1, {'@': 262}), 96: (1, {'@': 262}), 25: (1, {'@': 262}), 72: (1, {'@': 262}), 73: (1, {'@': 262}), 26: (1, {'@': 262}), 27: (1, {'@': 262}), 1: (1, {'@': 262}), 28: (1, {'@': 262}), 30: (1, {'@': 262}), 74: (1, {'@': 262}), 75: (1, {'@': 262}), 76: (1, {'@': 262}), 101: (1, {'@': 262}), 77: (1, {'@': 262}), 78: (1, {'@': 262}), 79: (1, {'@': 262}), 80: (1, {'@': 262}), 81: (1, {'@': 262}), 4: (1, {'@': 262}), 5: (1, {'@': 262}), 82: (1, {'@': 262}), 6: (1, {'@': 262}), 83: (1, {'@': 262}), 7: (1, {'@': 262}), 102: (1, {'@': 262}), 84: (1, {'@': 262}), 10: (1, {'@': 262}), 103: (1, {'@': 262}), 97: (1, {'@': 262}), 14: (1, {'@': 262}), 85: (1, {'@': 262}), 18: (1, {'@': 262}), 19: (1, {'@': 262}), 86: (1, {'@': 262}), 20: (1, {'@': 262}), 104: (1, {'@': 262}), 21: (1, {'@': 262}), 87: (1, {'@': 262}), 22: (1, {'@': 262}), 23: (1, {'@': 262}), 24: (1, {'@': 262}), 51: (1, {'@': 262}), 88: (1, {'@': 262}), 98: (1, {'@': 262}), 89: (1, {'@': 262}), 90: (1, {'@': 262}), 91: (1, {'@': 262}), 92: (1, {'@': 262}), 29: (1, {'@': 262}), 0: (1, {'@': 262}), 31: (1, {'@': 262}), 93: (1, {'@': 262}), 100: (1, {'@': 262})}, 656: {2: (1, {'@': 437}), 3: (1, {'@': 437}), 4: (1, {'@': 437}), 5: (1, {'@': 437}), 6: (1, {'@': 437}), 7: (1, {'@': 437}), 8: (1, {'@': 437}), 9: (1, {'@': 437}), 10: (1, {'@': 437}), 11: (1, {'@': 437}), 12: (1, {'@': 437}), 13: (1, {'@': 437}), 14: (1, {'@': 437}), 15: (1, {'@': 437}), 16: (1, {'@': 437}), 17: (1, {'@': 437}), 18: (1, {'@': 437}), 19: (1, {'@': 437}), 20: (1, {'@': 437}), 21: (1, {'@': 437}), 22: (1, {'@': 437}), 23: (1, {'@': 437}), 24: (1, {'@': 437}), 25: (1, {'@': 437}), 26: (1, {'@': 437}), 27: (1, {'@': 437}), 28: (1, {'@': 437}), 29: (1, {'@': 437}), 30: (1, {'@': 437}), 0: (1, {'@': 437}), 31: (1, {'@': 437})}, 657: {83: (0, 135), 115: (0, 382), 1: (0, 660)}, 658: {32: (0, 559), 33: (0, 260), 22: (0, 633), 28: (0, 315), 37: (0, 308), 110: (0, 594), 0: (0, 107), 26: (0, 20), 34: (0, 13), 35: (0, 8), 36: (0, 550), 17: (0, 585), 38: (0, 569), 9: (0, 530), 29: (0, 587), 30: (0, 44), 39: (0, 126), 40: (0, 38), 21: (0, 631), 6: (0, 570), 3: (0, 211), 41: (0, 91), 18: (0, 651), 8: (0, 500), 42: (0, 168), 4: (0, 556), 20: (0, 95), 5: (0, 642), 7: (0, 139), 14: (0, 204), 43: (0, 33), 44: (0, 584), 19: (0, 523), 46: (0, 188), 45: (0, 6), 47: (0, 243), 48: (0, 238), 49: (0, 259), 23: (0, 134), 109: (0, 669), 50: (0, 102)}, 659: {2: (1, {'@': 432}), 3: (1, {'@': 432}), 4: (1, {'@': 432}), 5: (1, {'@': 432}), 6: (1, {'@': 432}), 7: (1, {'@': 432}), 8: (1, {'@': 432}), 9: (1, {'@': 432}), 10: (1, {'@': 432}), 11: (1, {'@': 432}), 12: (1, {'@': 432}), 13: (1, {'@': 432}), 14: (1, {'@': 432}), 15: (1, {'@': 432}), 16: (1, {'@': 432}), 17: (1, {'@': 432}), 18: (1, {'@': 432}), 19: (1, {'@': 432}), 20: (1, {'@': 432}), 21: (1, {'@': 432}), 22: (1, {'@': 432}), 23: (1, {'@': 432}), 24: (1, {'@': 432}), 25: (1, {'@': 432}), 26: (1, {'@': 432}), 27: (1, {'@': 432}), 28: (1, {'@': 432}), 29: (1, {'@': 432}), 30: (1, {'@': 432}), 0: (1, {'@': 432}), 31: (1, {'@': 432})}, 660: {53: (1, {'@': 238}), 54: (1, {'@': 238}), 55: (1, {'@': 238}), 56: (1, {'@': 238}), 2: (1, {'@': 238}), 3: (1, {'@': 238}), 57: (1, {'@': 238}), 58: (1, {'@': 238}), 59: (1, {'@': 238}), 8: (1, {'@': 238}), 60: (1, {'@': 238}), 9: (1, {'@': 238}), 11: (1, {'@': 238}), 12: (1, {'@': 238}), 61: (1, {'@': 238}), 13: (1, {'@': 238}), 62: (1, {'@': 238}), 63: (1, {'@': 238}), 15: (1, {'@': 238}), 64: (1, {'@': 238}), 16: (1, {'@': 238}), 17: (1, {'@': 238}), 65: (1, {'@': 238}), 66: (1, {'@': 238}), 67: (1, {'@': 238}), 68: (1, {'@': 238}), 69: (1, {'@': 238}), 70: (1, {'@': 238}), 71: (1, {'@': 238}), 25: (1, {'@': 238}), 72: (1, {'@': 238}), 73: (1, {'@': 238}), 26: (1, {'@': 238}), 27: (1, {'@': 238}), 1: (1, {'@': 238}), 28: (1, {'@': 238}), 30: (1, {'@': 238}), 74: (1, {'@': 238}), 75: (1, {'@': 238}), 76: (1, {'@': 238}), 77: (1, {'@': 238}), 78: (1, {'@': 238}), 79: (1, {'@': 238}), 80: (1, {'@': 238}), 81: (1, {'@': 238}), 4: (1, {'@': 238}), 5: (1, {'@': 238}), 82: (1, {'@': 238}), 6: (1, {'@': 238}), 7: (1, {'@': 238}), 84: (1, {'@': 238}), 10: (1, {'@': 238}), 14: (1, {'@': 238}), 85: (1, {'@': 238}), 18: (1, {'@': 238}), 19: (1, {'@': 238}), 86: (1, {'@': 238}), 20: (1, {'@': 238}), 21: (1, {'@': 238}), 87: (1, {'@': 238}), 22: (1, {'@': 238}), 23: (1, {'@': 238}), 24: (1, {'@': 238}), 51: (1, {'@': 238}), 88: (1, {'@': 238}), 89: (1, {'@': 238}), 90: (1, {'@': 238}), 91: (1, {'@': 238}), 92: (1, {'@': 238}), 29: (1, {'@': 238}), 0: (1, {'@': 238}), 31: (1, {'@': 238}), 93: (1, {'@': 238})}, 661: {113: (0, 510), 5: (0, 246)}, 662: {24: (0, 644)}, 663: {22: (0, 472)}, 664: {96: (0, 295), 53: (1, {'@': 259}), 54: (1, {'@': 259}), 55: (1, {'@': 259}), 56: (1, {'@': 259}), 2: (1, {'@': 259}), 3: (1, {'@': 259}), 57: (1, {'@': 259}), 58: (1, {'@': 259}), 59: (1, {'@': 259}), 8: (1, {'@': 259}), 60: (1, {'@': 259}), 9: (1, {'@': 259}), 11: (1, {'@': 259}), 12: (1, {'@': 259}), 61: (1, {'@': 259}), 13: (1, {'@': 259}), 62: (1, {'@': 259}), 63: (1, {'@': 259}), 94: (1, {'@': 259}), 15: (1, {'@': 259}), 64: (1, {'@': 259}), 16: (1, {'@': 259}), 17: (1, {'@': 259}), 99: (1, {'@': 259}), 65: (1, {'@': 259}), 66: (1, {'@': 259}), 67: (1, {'@': 259}), 68: (1, {'@': 259}), 69: (1, {'@': 259}), 95: (1, {'@': 259}), 70: (1, {'@': 259}), 71: (1, {'@': 259}), 25: (1, {'@': 259}), 72: (1, {'@': 259}), 73: (1, {'@': 259}), 26: (1, {'@': 259}), 27: (1, {'@': 259}), 1: (1, {'@': 259}), 28: (1, {'@': 259}), 30: (1, {'@': 259}), 74: (1, {'@': 259}), 75: (1, {'@': 259}), 76: (1, {'@': 259}), 101: (1, {'@': 259}), 77: (1, {'@': 259}), 78: (1, {'@': 259}), 79: (1, {'@': 259}), 80: (1, {'@': 259}), 81: (1, {'@': 259}), 4: (1, {'@': 259}), 5: (1, {'@': 259}), 82: (1, {'@': 259}), 6: (1, {'@': 259}), 83: (1, {'@': 259}), 7: (1, {'@': 259}), 102: (1, {'@': 259}), 84: (1, {'@': 259}), 10: (1, {'@': 259}), 97: (1, {'@': 259}), 14: (1, {'@': 259}), 85: (1, {'@': 259}), 18: (1, {'@': 259}), 19: (1, {'@': 259}), 86: (1, {'@': 259}), 20: (1, {'@': 259}), 104: (1, {'@': 259}), 21: (1, {'@': 259}), 87: (1, {'@': 259}), 23: (1, {'@': 259}), 22: (1, {'@': 259}), 24: (1, {'@': 259}), 51: (1, {'@': 259}), 88: (1, {'@': 259}), 98: (1, {'@': 259}), 89: (1, {'@': 259}), 90: (1, {'@': 259}), 91: (1, {'@': 259}), 92: (1, {'@': 259}), 29: (1, {'@': 259}), 0: (1, {'@': 259}), 31: (1, {'@': 259}), 93: (1, {'@': 259})}, 665: {196: (0, 427), 189: (0, 607), 106: (0, 598), 191: (0, 617), 105: (0, 621)}, 666: {114: (0, 269), 0: (0, 118)}, 667: {141: (0, 582), 1: (0, 560), 146: (0, 85), 0: (0, 177)}, 668: {53: (1, {'@': 264}), 54: (1, {'@': 264}), 55: (1, {'@': 264}), 56: (1, {'@': 264}), 2: (1, {'@': 264}), 3: (1, {'@': 264}), 57: (1, {'@': 264}), 58: (1, {'@': 264}), 59: (1, {'@': 264}), 8: (1, {'@': 264}), 60: (1, {'@': 264}), 9: (1, {'@': 264}), 11: (1, {'@': 264}), 12: (1, {'@': 264}), 61: (1, {'@': 264}), 13: (1, {'@': 264}), 62: (1, {'@': 264}), 63: (1, {'@': 264}), 94: (1, {'@': 264}), 15: (1, {'@': 264}), 64: (1, {'@': 264}), 16: (1, {'@': 264}), 17: (1, {'@': 264}), 99: (1, {'@': 264}), 65: (1, {'@': 264}), 66: (1, {'@': 264}), 67: (1, {'@': 264}), 68: (1, {'@': 264}), 69: (1, {'@': 264}), 95: (1, {'@': 264}), 70: (1, {'@': 264}), 71: (1, {'@': 264}), 96: (1, {'@': 264}), 25: (1, {'@': 264}), 72: (1, {'@': 264}), 73: (1, {'@': 264}), 26: (1, {'@': 264}), 27: (1, {'@': 264}), 1: (1, {'@': 264}), 28: (1, {'@': 264}), 30: (1, {'@': 264}), 74: (1, {'@': 264}), 75: (1, {'@': 264}), 76: (1, {'@': 264}), 101: (1, {'@': 264}), 77: (1, {'@': 264}), 78: (1, {'@': 264}), 79: (1, {'@': 264}), 80: (1, {'@': 264}), 81: (1, {'@': 264}), 4: (1, {'@': 264}), 5: (1, {'@': 264}), 82: (1, {'@': 264}), 6: (1, {'@': 264}), 83: (1, {'@': 264}), 7: (1, {'@': 264}), 102: (1, {'@': 264}), 84: (1, {'@': 264}), 10: (1, {'@': 264}), 103: (1, {'@': 264}), 97: (1, {'@': 264}), 14: (1, {'@': 264}), 85: (1, {'@': 264}), 18: (1, {'@': 264}), 19: (1, {'@': 264}), 86: (1, {'@': 264}), 20: (1, {'@': 264}), 104: (1, {'@': 264}), 21: (1, {'@': 264}), 87: (1, {'@': 264}), 22: (1, {'@': 264}), 23: (1, {'@': 264}), 24: (1, {'@': 264}), 51: (1, {'@': 264}), 88: (1, {'@': 264}), 98: (1, {'@': 264}), 89: (1, {'@': 264}), 90: (1, {'@': 264}), 91: (1, {'@': 264}), 92: (1, {'@': 264}), 29: (1, {'@': 264}), 0: (1, {'@': 264}), 31: (1, {'@': 264}), 93: (1, {'@': 264}), 100: (1, {'@': 264})}, 669: {1: (0, 661)}, 670: {25: (0, 511), 5: (0, 246), 163: (0, 368), 113: (0, 370)}, 671: {16: (1, {'@': 307}), 17: (1, {'@': 307}), 18: (1, {'@': 307}), 2: (1, {'@': 307}), 19: (1, {'@': 307}), 3: (1, {'@': 307}), 4: (1, {'@': 307}), 20: (1, {'@': 307}), 21: (1, {'@': 307}), 22: (1, {'@': 307}), 5: (1, {'@': 307}), 23: (1, {'@': 307}), 24: (1, {'@': 307}), 6: (1, {'@': 307}), 25: (1, {'@': 307}), 7: (1, {'@': 307}), 8: (1, {'@': 307}), 9: (1, {'@': 307}), 26: (1, {'@': 307}), 27: (1, {'@': 307}), 10: (1, {'@': 307}), 11: (1, {'@': 307}), 28: (1, {'@': 307}), 29: (1, {'@': 307}), 30: (1, {'@': 307}), 12: (1, {'@': 307}), 0: (1, {'@': 307}), 13: (1, {'@': 307}), 31: (1, {'@': 307}), 14: (1, {'@': 307}), 15: (1, {'@': 307})}}, 'start_states': {'module': 329}, 'end_states': {'module': 322}}, '__type__': 'ParsingFrontend'}, 'rules': [{'@': 97}, {'@': 98}, {'@': 99}, {'@': 100}, {'@': 101}, {'@': 102}, {'@': 103}, {'@': 104}, {'@': 105}, {'@': 106}, {'@': 107}, {'@': 108}, {'@': 109}, {'@': 110}, {'@': 111}, {'@': 112}, {'@': 113}, {'@': 114}, {'@': 115}, {'@': 116}, {'@': 117}, {'@': 118}, {'@': 119}, {'@': 120}, {'@': 121}, {'@': 122}, {'@': 123}, {'@': 124}, {'@': 125}, {'@': 126}, {'@': 127}, {'@': 128}, {'@': 129}, {'@': 130}, {'@': 131}, {'@': 132}, {'@': 133}, {'@': 134}, {'@': 135}, {'@': 136}, {'@': 137}, {'@': 138}, {'@': 139}, {'@': 140}, {'@': 141}, {'@': 142}, {'@': 143}, {'@': 144}, {'@': 145}, {'@': 146}, {'@': 147}, {'@': 148}, {'@': 149}, {'@': 150}, {'@': 151}, {'@': 152}, {'@': 153}, {'@': 154}, {'@': 155}, {'@': 156}, {'@': 157}, {'@': 158}, {'@': 159}, {'@': 160}, {'@': 161}, {'@': 162}, {'@': 163}, {'@': 164}, {'@': 165}, {'@': 166}, {'@': 167}, {'@': 168}, {'@': 169}, {'@': 170}, {'@': 171}, {'@': 172}, {'@': 173}, {'@': 174}, {'@': 175}, {'@': 176}, {'@': 177}, {'@': 178}, {'@': 179}, {'@': 180}, {'@': 181}, {'@': 182}, {'@': 183}, {'@': 184}, {'@': 185}, {'@': 186}, {'@': 187}, {'@': 188}, {'@': 189}, {'@': 190}, {'@': 191}, {'@': 192}, {'@': 193}, {'@': 194}, {'@': 195}, {'@': 196}, {'@': 197}, {'@': 198}, {'@': 199}, {'@': 200}, {'@': 201}, {'@': 202}, {'@': 203}, {'@': 204}, {'@': 205}, {'@': 206}, {'@': 207}, {'@': 208}, {'@': 209}, {'@': 210}, {'@': 211}, {'@': 212}, {'@': 213}, {'@': 214}, {'@': 215}, {'@': 216}, {'@': 217}, {'@': 218}, {'@': 219}, {'@': 220}, {'@': 221}, {'@': 222}, {'@': 223}, {'@': 224}, {'@': 225}, {'@': 226}, {'@': 227}, {'@': 228}, {'@': 229}, {'@': 230}, {'@': 231}, {'@': 232}, {'@': 233}, {'@': 234}, {'@': 235}, {'@': 236}, {'@': 237}, {'@': 238}, {'@': 239}, {'@': 240}, {'@': 241}, {'@': 242}, {'@': 243}, {'@': 244}, {'@': 245}, {'@': 246}, {'@': 247}, {'@': 248}, {'@': 249}, {'@': 250}, {'@': 251}, {'@': 252}, {'@': 253}, {'@': 254}, {'@': 255}, {'@': 256}, {'@': 257}, {'@': 258}, {'@': 259}, {'@': 260}, {'@': 261}, {'@': 262}, {'@': 263}, {'@': 264}, {'@': 265}, {'@': 266}, {'@': 267}, {'@': 268}, {'@': 269}, {'@': 270}, {'@': 271}, {'@': 272}, {'@': 273}, {'@': 274}, {'@': 275}, {'@': 276}, {'@': 277}, {'@': 278}, {'@': 279}, {'@': 280}, {'@': 281}, {'@': 282}, {'@': 283}, {'@': 284}, {'@': 285}, {'@': 286}, {'@': 287}, {'@': 288}, {'@': 289}, {'@': 290}, {'@': 291}, {'@': 292}, {'@': 293}, {'@': 294}, {'@': 295}, {'@': 296}, {'@': 297}, {'@': 298}, {'@': 299}, {'@': 300}, {'@': 301}, {'@': 302}, {'@': 303}, {'@': 304}, {'@': 305}, {'@': 306}, {'@': 307}, {'@': 308}, {'@': 309}, {'@': 310}, {'@': 311}, {'@': 312}, {'@': 313}, {'@': 314}, {'@': 315}, {'@': 316}, {'@': 317}, {'@': 318}, {'@': 319}, {'@': 320}, {'@': 321}, {'@': 322}, {'@': 323}, {'@': 324}, {'@': 325}, {'@': 326}, {'@': 327}, {'@': 328}, {'@': 329}, {'@': 330}, {'@': 331}, {'@': 332}, {'@': 333}, {'@': 334}, {'@': 335}, {'@': 336}, {'@': 337}, {'@': 338}, {'@': 339}, {'@': 340}, {'@': 341}, {'@': 342}, {'@': 343}, {'@': 344}, {'@': 345}, {'@': 346}, {'@': 347}, {'@': 348}, {'@': 349}, {'@': 350}, {'@': 351}, {'@': 352}, {'@': 353}, {'@': 354}, {'@': 355}, {'@': 356}, {'@': 357}, {'@': 358}, {'@': 359}, {'@': 360}, {'@': 361}, {'@': 362}, {'@': 363}, {'@': 364}, {'@': 365}, {'@': 366}, {'@': 367}, {'@': 368}, {'@': 369}, {'@': 370}, {'@': 371}, {'@': 372}, {'@': 373}, {'@': 374}, {'@': 375}, {'@': 376}, {'@': 377}, {'@': 378}, {'@': 379}, {'@': 380}, {'@': 381}, {'@': 382}, {'@': 383}, {'@': 384}, {'@': 385}, {'@': 386}, {'@': 387}, {'@': 388}, {'@': 389}, {'@': 390}, {'@': 391}, {'@': 392}, {'@': 393}, {'@': 394}, {'@': 395}, {'@': 396}, {'@': 397}, {'@': 398}, {'@': 399}, {'@': 400}, {'@': 401}, {'@': 402}, {'@': 403}, {'@': 404}, {'@': 405}, {'@': 406}, {'@': 407}, {'@': 408}, {'@': 409}, {'@': 410}, {'@': 411}, {'@': 412}, {'@': 413}, {'@': 414}, {'@': 415}, {'@': 416}, {'@': 417}, {'@': 418}, {'@': 419}, {'@': 420}, {'@': 421}, {'@': 422}, {'@': 423}, {'@': 424}, {'@': 425}, {'@': 426}, {'@': 427}, {'@': 428}, {'@': 429}, {'@': 430}, {'@': 431}, {'@': 432}, {'@': 433}, {'@': 434}, {'@': 435}, {'@': 436}, {'@': 437}, {'@': 438}, {'@': 439}, {'@': 440}, {'@': 441}, {'@': 442}, {'@': 443}, {'@': 444}, {'@': 445}, {'@': 446}, {'@': 447}, {'@': 448}, {'@': 449}, {'@': 450}, {'@': 451}], 'options': {'debug': False, 'keep_all_tokens': False, 'tree_class': None, 'cache': False, 'postlex': None, 'parser': 'lalr', 'lexer': 'contextual', 'transformer': None, 'start': ['module'], 'priority': 'normal', 'ambiguity': 'auto', 'regex': False, 'propagate_positions': True, 'lexer_callbacks': {}, 'maybe_placeholders': True, 'edit_terminals': None, 'g_regex_flags': 0, 'use_bytes': False, 'import_paths': [], 'source_path': None, '_plugins': {}}, '__type__': 'Lark'}
)
MEMO = (
{0: {'name': 'VALUE', 'pattern': {'value': '(?:(?:[A-Z]|[a-z])|_)(?:(?:(?:[A-Z]|[a-z])|[0-9]|_))*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 1: {'name': 'BS', 'pattern': {'value': '(?:[ \t\x0c\r\n])+', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 2: {'name': 'COMMENT', 'pattern': {'value': '#[^\n]*', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 3: {'name': 'INTEGER', 'pattern': {'value': '((0[Xx][a-fA-F0-9][a-fA-F0-9_]*)|([0-9][0-9_]*)|(0[Oo][0-7][0-7_]*)|(0[Bb][01]01_]*))(u8|u16|u32|u64|u128|u|i8|i16|i32|i64|i128)?', 'flags': [], '_width': [1, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 4: {'name': 'FLOAT', 'pattern': {'value': '(?:(?:[0-9])+(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+|(?:(?:[0-9])+\\.(?:(?:[0-9])+)?|\\.(?:[0-9])+)(?:(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+)?)("f16"|"f32"|"f64"|"f128")', 'flags': [], '_width': [7, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 5: {'name': 'COMPLEX', 'pattern': {'value': '(?:(?:[0-9])+(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+|(?:(?:[0-9])+\\.(?:(?:[0-9])+)?|\\.(?:[0-9])+)(?:(?:e|E)(?:(?:\\+|\\-))?(?:[0-9])+)?)("c16"|"c32"|"c64"|"c128")', 'flags': [], '_width': [7, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 6: {'name': 'RUNE', 'pattern': {'value': '\'((~[\r\n])|(\\\\(([abfnrtv\\"\'{])|(x[a-fA-F0-9][a-fA-F0-9])|(u[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])|(U[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]))))?\'', 'flags': [], '_width': [2, 12], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 7: {'name': 'STRING', 'pattern': {'value': '"(([^\r\n])|(\\\\(([abfnrtv\\"\'{])|(x[a-fA-F0-9][a-fA-F0-9])|(u[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9])|(U[a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9][a-fA-F0-9]))))*"', 'flags': [], '_width': [2, 4294967295], '__type__': 'PatternRE'}, 'priority': 0, '__type__': 'TerminalDef'}, 8: {'name': 'EQUAL', 'pattern': {'value': '=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 9: {'name': 'COLON', 'pattern': {'value': ':', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 10: {'name': 'COLON_COLON', 'pattern': {'value': '::', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 11: {'name': 'DOT', 'pattern': {'value': '.', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 12: {'name': 'ELLIPSIS', 'pattern': {'value': '...', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 13: {'name': 'PLUS_PLUS', 'pattern': {'value': '++', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 14: {'name': 'MINUS_MINUS', 'pattern': {'value': '--', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 15: {'name': 'PLUS', 'pattern': {'value': '+', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 16: {'name': 'MINUS', 'pattern': {'value': '-', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 17: {'name': 'TILDE', 'pattern': {'value': '~', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 18: {'name': 'BANG', 'pattern': {'value': '!', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 19: {'name': 'STAR', 'pattern': {'value': '*', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 20: {'name': 'PERCENT', 'pattern': {'value': '%', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 21: {'name': 'STAR_STAR', 'pattern': {'value': '**', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 22: {'name': 'DOUBLE_OPEN_ANGLE', 'pattern': {'value': '<<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 23: {'name': 'DOUBLE_CLOSE_ANGLE', 'pattern': {'value': '>>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 24: {'name': 'TRIPLE_CLOSE_ANGLE', 'pattern': {'value': '>>>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 25: {'name': 'OPEN_ANGLE', 'pattern': {'value': '<', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 26: {'name': 'CLOSE_ANGLE', 'pattern': {'value': '>', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 27: {'name': 'OPEN_ANGLE_EQUAL', 'pattern': {'value': '<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 28: {'name': 'CLOSE_ANGLE_EQUAL', 'pattern': {'value': '>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 29: {'name': 'EQUAL_EQUAL', 'pattern': {'value': '==', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 30: {'name': 'BANG_EQUAL', 'pattern': {'value': '!=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 31: {'name': 'AMP', 'pattern': {'value': '&', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 32: {'name': 'AMP_AMP', 'pattern': {'value': '&&', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 33: {'name': 'CARET', 'pattern': {'value': '^', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 34: {'name': 'PIPE', 'pattern': {'value': '|', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 35: {'name': 'PIPE_PIPE', 'pattern': {'value': '||', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 36: {'name': 'STAR_EQUAL', 'pattern': {'value': '*=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 37: {'name': 'SLASH_EQUAL', 'pattern': {'value': '\\/=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 38: {'name': 'SLASH_SLASH_EQUAL', 'pattern': {'value': '\\/\\/=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 39: {'name': 'PERCENT_EQUAL', 'pattern': {'value': '%=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 40: {'name': 'PLUS_EQUAL', 'pattern': {'value': '+=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 41: {'name': 'MINUS_EQUAL', 'pattern': {'value': '-=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 42: {'name': 'DOUBLE_OPEN_ANGLE_EQUAL', 'pattern': {'value': '<<=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 43: {'name': 'DOUBLE_CLOSE_ANGLE_EQUAL', 'pattern': {'value': '>>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 44: {'name': 'TRIPLE_CLOSE_ANGLE_EQUAL', 'pattern': {'value': '>>>=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 45: {'name': 'AMP_EQUAL', 'pattern': {'value': '&=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 46: {'name': 'CARET_EQUAL', 'pattern': {'value': '^=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 47: {'name': 'PIPE_EQUAL', 'pattern': {'value': '|=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 48: {'name': 'TILDE_EQUAL', 'pattern': {'value': '~=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 49: {'name': 'AMP_AMP_EQUAL', 'pattern': {'value': '&&=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 50: {'name': 'PIPE_PIPE_EQUAL', 'pattern': {'value': '||=', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 51: {'name': 'TRUE', 'pattern': {'value': 'true', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 52: {'name': 'FALSE', 'pattern': {'value': 'false', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 53: {'name': 'COMMA', 'pattern': {'value': ',', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 54: {'name': 'LPAR', 'pattern': {'value': '(', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 55: {'name': 'RPAR', 'pattern': {'value': ')', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 56: {'name': 'CARRAY', 'pattern': {'value': 'carray', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 57: {'name': 'CBITFIELD', 'pattern': {'value': 'cbitfield', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 58: {'name': 'CBLOCKFNTYPE', 'pattern': {'value': 'cblockfntype', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 59: {'name': 'CFNTYPE', 'pattern': {'value': 'cfntype', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 60: {'name': 'CFN', 'pattern': {'value': 'cfn', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 61: {'name': 'CPTR', 'pattern': {'value': 'cptr', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 62: {'name': 'CSTRUCT', 'pattern': {'value': 'cstruct', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 63: {'name': 'LBRACE', 'pattern': {'value': '{', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 64: {'name': 'RBRACE', 'pattern': {'value': '}', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 65: {'name': 'CUNION', 'pattern': {'value': 'cunion', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 66: {'name': 'CVOID', 'pattern': {'value': 'cvoid', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 67: {'name': 'LSQB', 'pattern': {'value': '[', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 68: {'name': 'RSQB', 'pattern': {'value': ']', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 69: {'name': 'ARRAY', 'pattern': {'value': 'array', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 70: {'name': 'ENUM', 'pattern': {'value': 'enum', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 71: {'name': 'FN', 'pattern': {'value': 'fn', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 72: {'name': 'IFACE', 'pattern': {'value': 'iface', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 73: {'name': '__ANON_0', 'pattern': {'value': '..', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 74: {'name': 'RANGE', 'pattern': {'value': 'range', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 75: {'name': 'STRUCT', 'pattern': {'value': 'struct', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 76: {'name': 'VARIANT', 'pattern': {'value': 'variant', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 77: {'name': 'MOD', 'pattern': {'value': 'mod', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 78: {'name': 'REQ', 'pattern': {'value': 'req', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 79: {'name': 'ALIAS', 'pattern': {'value': 'alias', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 80: {'name': 'CONST', 'pattern': {'value': 'const', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 81: {'name': 'IMPL', 'pattern': {'value': 'impl', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 82: {'name': 'ELSE', 'pattern': {'value': 'else', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 83: {'name': 'IF', 'pattern': {'value': 'if', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 84: {'name': 'SWITCH', 'pattern': {'value': 'switch', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 85: {'name': 'CASE', 'pattern': {'value': 'case', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 86: {'name': 'MATCH', 'pattern': {'value': 'match', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 87: {'name': 'DEFAULT', 'pattern': {'value': 'default', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 88: {'name': 'FOR', 'pattern': {'value': 'for', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 89: {'name': 'WHILE', 'pattern': {'value': 'while', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 90: {'name': 'LOOP', 'pattern': {'value': 'loop', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 91: {'name': 'BREAK', 'pattern': {'value': 'break', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 92: {'name': 'CONTINUE', 'pattern': {'value': 'continue', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 93: {'name': 'LET', 'pattern': {'value': 'let', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 94: {'name': 'RETURN', 'pattern': {'value': 'return', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 95: {'name': '__ANON_1', 'pattern': {'value': '/', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 96: {'name': '__ANON_2', 'pattern': {'value': '//', 'flags': [], '__type__': 'PatternStr'}, 'priority': 0, '__type__': 'TerminalDef'}, 97: {'origin': {'name': Token('RULE', 'value'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 98: {'origin': {'name': Token('RULE', 'value_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'value', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 99: {'origin': {'name': Token('RULE', 'value_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'value', '__type__': 'NonTerminal'}, {'name': '__value_list_plus_0', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 100: {'origin': {'name': Token('RULE', 'value_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'value', '__type__': 'NonTerminal'}, {'name': '__value_list_plus_0', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 101: {'origin': {'name': Token('RULE', 'value_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'value', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 102: {'origin': {'name': Token('RULE', 'identifier'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__identifier_star_1', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 103: {'origin': {'name': Token('RULE', 'identifier'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 104: {'origin': {'name': Token('RULE', 'param'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'value', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 105: {'origin': {'name': Token('RULE', 'param'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'value', '__type__': 'NonTerminal'}], 'order': 1, 'alias': 'moveparam', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 106: {'origin': {'name': Token('RULE', 'param'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'value', '__type__': 'NonTerminal'}], 'order': 2, 'alias': 'refparam', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 107: {'origin': {'name': Token('RULE', 'param'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'value', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': 'exrefparam', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 108: {'origin': {'name': Token('RULE', '_type_param'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 109: {'origin': {'name': Token('RULE', '_type_param'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 110: {'origin': {'name': Token('RULE', '_type_param'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'param', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 111: {'origin': {'name': Token('RULE', 'c_array_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CARRAY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'array_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 112: {'origin': {'name': Token('RULE', 'c_array_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CARRAY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'array_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 113: {'origin': {'name': Token('RULE', 'c_bit_field_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CBITFIELD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 114: {'origin': {'name': Token('RULE', 'c_block_function_type_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CBLOCKFNTYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'function_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 115: {'origin': {'name': Token('RULE', 'c_block_function_type_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CBLOCKFNTYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'function_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 116: {'origin': {'name': Token('RULE', 'c_function_type_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CFNTYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'function_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 117: {'origin': {'name': Token('RULE', 'c_function_type_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CFNTYPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'function_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 118: {'origin': {'name': Token('RULE', 'c_function_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CFN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'function_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 119: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_expr', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 120: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_expr', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 121: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 122: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 123: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 124: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 125: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 126: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 127: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 128: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 129: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 130: {'origin': {'name': Token('RULE', 'c_pointer_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CPTR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 131: {'origin': {'name': Token('RULE', 'c_struct_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CSTRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_pair_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 132: {'origin': {'name': Token('RULE', 'c_struct_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CSTRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 133: {'origin': {'name': Token('RULE', 'c_struct_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CSTRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_pair_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 134: {'origin': {'name': Token('RULE', 'c_struct_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CSTRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 135: {'origin': {'name': Token('RULE', 'c_union_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CUNION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_pair_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 136: {'origin': {'name': Token('RULE', 'c_union_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CUNION', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_pair_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 137: {'origin': {'name': Token('RULE', 'c_void_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CVOID', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 138: {'origin': {'name': Token('RULE', 'array_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}, {'name': 'ELLIPSIS', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 139: {'origin': {'name': Token('RULE', 'array_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 140: {'origin': {'name': Token('RULE', 'array_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 141: {'origin': {'name': Token('RULE', 'array_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ARRAY', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'array_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 142: {'origin': {'name': Token('RULE', 'enum_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ENUM', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr_pair_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 143: {'origin': {'name': Token('RULE', 'function_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_pair_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'return_type', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 144: {'origin': {'name': Token('RULE', 'function_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_pair_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 145: {'origin': {'name': Token('RULE', 'function_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'return_type', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 146: {'origin': {'name': Token('RULE', 'function_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 147: {'origin': {'name': Token('RULE', 'function_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'function_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 148: {'origin': {'name': Token('RULE', 'function_literal'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_type_expr', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 149: {'origin': {'name': Token('RULE', 'function_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_type_def', '__type__': 'NonTerminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 150: {'origin': {'name': Token('RULE', 'interface_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IFACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__interface_type_def_star_2', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 151: {'origin': {'name': Token('RULE', 'interface_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IFACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 152: {'origin': {'name': Token('RULE', 'range_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOAT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FLOAT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 153: {'origin': {'name': Token('RULE', 'range_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOAT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 154: {'origin': {'name': Token('RULE', 'range_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FLOAT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 155: {'origin': {'name': Token('RULE', 'range_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 156: {'origin': {'name': Token('RULE', 'range_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 157: {'origin': {'name': Token('RULE', 'range_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 158: {'origin': {'name': Token('RULE', 'range_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 159: {'origin': {'name': Token('RULE', 'range_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RANGE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'range_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 160: {'origin': {'name': Token('RULE', 'struct_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_pair_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 161: {'origin': {'name': Token('RULE', 'struct_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 162: {'origin': {'name': Token('RULE', 'struct_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'value_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'struct_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 163: {'origin': {'name': Token('RULE', 'struct_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRUCT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'struct_type_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 164: {'origin': {'name': Token('RULE', 'variant_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VARIANT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'value_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_pair_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 165: {'origin': {'name': Token('RULE', 'variant_type_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VARIANT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param_pair_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 166: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'array_type_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 167: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'array_type_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 168: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'array_type_expr', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 169: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'array_type_expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 170: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_type_expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 171: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'range_type_expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 172: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range_type_expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 173: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'range_type_expr', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 174: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'range_type_expr', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 175: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'struct_type_expr', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 176: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'struct_type_expr', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 177: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'struct_type_expr', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 178: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'struct_type_expr', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 179: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_array_type_expr', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 180: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_bit_field_type_expr', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 181: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_block_function_type_type_expr', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 182: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_function_type_type_expr', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 183: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_pointer_type_expr', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 184: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_struct_type_expr', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 185: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_union_type_expr', '__type__': 'NonTerminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 186: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_void_type_expr', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 187: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 188: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 189: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 190: {'origin': {'name': Token('RULE', '_type_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 191: {'origin': {'name': Token('RULE', '_type_param_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_type_param', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 192: {'origin': {'name': Token('RULE', '_type_param_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_type_param', '__type__': 'NonTerminal'}, {'name': '___type_param_list_plus_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 193: {'origin': {'name': Token('RULE', '_type_param_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_type_param', '__type__': 'NonTerminal'}, {'name': '___type_param_list_plus_3', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 194: {'origin': {'name': Token('RULE', '_type_param_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_type_param', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 195: {'origin': {'name': Token('RULE', 'type_param_pair'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 196: {'origin': {'name': Token('RULE', '_type_param_pair_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type_param_pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 197: {'origin': {'name': Token('RULE', '_type_param_pair_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type_param_pair', '__type__': 'NonTerminal'}, {'name': '___type_param_pair_list_plus_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 198: {'origin': {'name': Token('RULE', '_type_param_pair_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type_param_pair', '__type__': 'NonTerminal'}, {'name': '___type_param_pair_list_plus_4', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 199: {'origin': {'name': Token('RULE', '_type_param_pair_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'type_param_pair', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 200: {'origin': {'name': Token('RULE', 'module_decl'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MOD', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 201: {'origin': {'name': Token('RULE', 'requirement_decl'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'REQ', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 202: {'origin': {'name': Token('RULE', 'alias_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'ALIAS', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 203: {'origin': {'name': Token('RULE', 'const_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONST', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 204: {'origin': {'name': Token('RULE', 'implementation_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__implementation_def_star_5', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 205: {'origin': {'name': Token('RULE', 'implementation_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 206: {'origin': {'name': Token('RULE', 'implementation_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__implementation_def_star_5', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 207: {'origin': {'name': Token('RULE', 'implementation_def'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IMPL', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 208: {'origin': {'name': Token('RULE', 'module'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'module_decl', '__type__': 'NonTerminal'}, {'name': '__module_star_6', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 209: {'origin': {'name': Token('RULE', 'module'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'module_decl', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 210: {'origin': {'name': Token('RULE', 'return_type'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 211: {'origin': {'name': Token('RULE', 'expr_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 212: {'origin': {'name': Token('RULE', 'expr_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__expr_list_plus_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 213: {'origin': {'name': Token('RULE', 'expr_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__expr_list_plus_7', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 214: {'origin': {'name': Token('RULE', 'expr_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 215: {'origin': {'name': Token('RULE', 'expr_pair_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 216: {'origin': {'name': Token('RULE', 'expr_pair_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__expr_pair_list_plus_8', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 217: {'origin': {'name': Token('RULE', 'expr_pair_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': '__expr_pair_list_plus_8', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 218: {'origin': {'name': Token('RULE', 'expr_pair_list'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 219: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_expr', '__type__': 'NonTerminal'}, {'name': '__expr_star_9', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 220: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 221: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_expr', '__type__': 'NonTerminal'}, {'name': '__expr_star_9', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 222: {'origin': {'name': Token('RULE', 'expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 223: {'origin': {'name': Token('RULE', 'and_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_expr', '__type__': 'NonTerminal'}, {'name': '__and_expr_star_10', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 224: {'origin': {'name': Token('RULE', 'and_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'cmp_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 225: {'origin': {'name': Token('RULE', 'and_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cmp_expr', '__type__': 'NonTerminal'}, {'name': '__and_expr_star_10', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 226: {'origin': {'name': Token('RULE', 'and_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cmp_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 227: {'origin': {'name': Token('RULE', 'cmp_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bor_expr', '__type__': 'NonTerminal'}, {'name': '__cmp_expr_star_11', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 228: {'origin': {'name': Token('RULE', 'cmp_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bor_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 229: {'origin': {'name': Token('RULE', 'cmp_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'bor_expr', '__type__': 'NonTerminal'}, {'name': '__cmp_expr_star_11', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 230: {'origin': {'name': Token('RULE', 'cmp_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'bor_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 231: {'origin': {'name': Token('RULE', 'bor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bxor_expr', '__type__': 'NonTerminal'}, {'name': '__bor_expr_star_12', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 232: {'origin': {'name': Token('RULE', 'bor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'bxor_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 233: {'origin': {'name': Token('RULE', 'bor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'bxor_expr', '__type__': 'NonTerminal'}, {'name': '__bor_expr_star_12', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 234: {'origin': {'name': Token('RULE', 'bor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'bxor_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 235: {'origin': {'name': Token('RULE', 'bxor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'band_expr', '__type__': 'NonTerminal'}, {'name': '__bxor_expr_star_13', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 236: {'origin': {'name': Token('RULE', 'bxor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'band_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 237: {'origin': {'name': Token('RULE', 'bxor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'band_expr', '__type__': 'NonTerminal'}, {'name': '__bxor_expr_star_13', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 238: {'origin': {'name': Token('RULE', 'bxor_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'band_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 239: {'origin': {'name': Token('RULE', 'band_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shift_expr', '__type__': 'NonTerminal'}, {'name': '__band_expr_star_14', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 240: {'origin': {'name': Token('RULE', 'band_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 241: {'origin': {'name': Token('RULE', 'band_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shift_expr', '__type__': 'NonTerminal'}, {'name': '__band_expr_star_14', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 242: {'origin': {'name': Token('RULE', 'band_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shift_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 243: {'origin': {'name': Token('RULE', 'shift_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith_expr', '__type__': 'NonTerminal'}, {'name': '__shift_expr_star_15', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 244: {'origin': {'name': Token('RULE', 'shift_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 245: {'origin': {'name': Token('RULE', 'shift_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith_expr', '__type__': 'NonTerminal'}, {'name': '__shift_expr_star_15', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 246: {'origin': {'name': Token('RULE', 'shift_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'arith_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 247: {'origin': {'name': Token('RULE', 'arith_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': '__arith_expr_star_16', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 248: {'origin': {'name': Token('RULE', 'arith_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 249: {'origin': {'name': Token('RULE', 'arith_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': '__arith_expr_star_16', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 250: {'origin': {'name': Token('RULE', 'arith_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 251: {'origin': {'name': Token('RULE', 'mul_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'inc_dec_expr', '__type__': 'NonTerminal'}, {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 252: {'origin': {'name': Token('RULE', 'mul_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'inc_dec_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 253: {'origin': {'name': Token('RULE', 'mul_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'inc_dec_expr', '__type__': 'NonTerminal'}, {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 254: {'origin': {'name': Token('RULE', 'mul_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'inc_dec_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 255: {'origin': {'name': Token('RULE', 'inc_dec_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'inc_dec_expr', '__type__': 'NonTerminal'}, {'name': '_inc_dec_op', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 256: {'origin': {'name': Token('RULE', 'inc_dec_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'unary_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 257: {'origin': {'name': Token('RULE', 'unary_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '_unary_op', '__type__': 'NonTerminal'}, {'name': 'unary_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 258: {'origin': {'name': Token('RULE', 'unary_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'power_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 259: {'origin': {'name': Token('RULE', 'power_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': '__power_expr_star_18', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 260: {'origin': {'name': Token('RULE', 'power_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 261: {'origin': {'name': Token('RULE', 'power_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': '__power_expr_star_18', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 262: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr_list', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': 'call_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 263: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': 'call_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': [False, False, True, False], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 264: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': 'index_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 265: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'value', '__type__': 'NonTerminal'}], 'order': 3, 'alias': 'lookup_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 266: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': 'move_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 267: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': 'ref_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 268: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'BANG', 'filter_out': True, '__type__': 'Terminal'}], 'order': 6, 'alias': 'exref_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 269: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'atom_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 270: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRUE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 8, 'alias': 'bool_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 271: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FALSE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 9, 'alias': 'bool_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 272: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMPLEX', 'filter_out': False, '__type__': 'Terminal'}], 'order': 10, 'alias': 'complex_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 273: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOAT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 11, 'alias': 'float_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 274: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}], 'order': 12, 'alias': 'int_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 275: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FLOAT', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FLOAT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'FLOAT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 13, 'alias': 'frange_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 276: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': '__ANON_0', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}], 'order': 14, 'alias': 'irange_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 277: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RUNE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 15, 'alias': 'rune_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 278: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 16, 'alias': 'array_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 279: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LSQB', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}, {'name': 'STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'INTEGER', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'RSQB', 'filter_out': True, '__type__': 'Terminal'}], 'order': 17, 'alias': 'array_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 280: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_literal', '__type__': 'NonTerminal'}], 'order': 18, 'alias': 'function_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 281: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STRING', 'filter_out': False, '__type__': 'Terminal'}], 'order': 19, 'alias': 'string_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 282: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 20, 'alias': 'struct_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 283: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'struct_type_expr', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 21, 'alias': 'struct_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 284: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_array_type_expr', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 22, 'alias': 'carray_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 285: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_struct_type_expr', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 23, 'alias': 'cstruct_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 286: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_union_type_expr', '__type__': 'NonTerminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr_list', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 24, 'alias': 'cunion_expr', 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 287: {'origin': {'name': Token('RULE', 'atom_expr'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'identifier', '__type__': 'NonTerminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': True, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 288: {'origin': {'name': Token('RULE', 'if_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'if_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 289: {'origin': {'name': Token('RULE', 'if_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}, {'name': 'ELSE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 290: {'origin': {'name': Token('RULE', 'if_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'IF', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': [False, False, False, False, False, True], '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 291: {'origin': {'name': Token('RULE', 'switch_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SWITCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'default_block', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 292: {'origin': {'name': Token('RULE', 'switch_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SWITCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__switch_block_plus_19', '__type__': 'NonTerminal'}, {'name': 'default_block', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 293: {'origin': {'name': Token('RULE', 'switch_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'SWITCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__switch_block_plus_19', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 294: {'origin': {'name': Token('RULE', 'case_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 295: {'origin': {'name': Token('RULE', 'match_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'default_block', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 296: {'origin': {'name': Token('RULE', 'match_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_block_plus_20', '__type__': 'NonTerminal'}, {'name': 'default_block', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 297: {'origin': {'name': Token('RULE', 'match_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MATCH', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__match_block_plus_20', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 298: {'origin': {'name': Token('RULE', 'match_case_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CASE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'param', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'identifier', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 299: {'origin': {'name': Token('RULE', 'default_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DEFAULT', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 300: {'origin': {'name': Token('RULE', 'for_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'param', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 301: {'origin': {'name': Token('RULE', 'for_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'FOR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'param', '__type__': 'NonTerminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'range_type_expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 302: {'origin': {'name': Token('RULE', 'while_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'WHILE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'LPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'RPAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 303: {'origin': {'name': Token('RULE', 'loop_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LOOP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'code_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 304: {'origin': {'name': Token('RULE', 'break_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BREAK', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 305: {'origin': {'name': Token('RULE', 'continue_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CONTINUE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 306: {'origin': {'name': Token('RULE', 'let_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 307: {'origin': {'name': Token('RULE', 'let_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 308: {'origin': {'name': Token('RULE', 'return_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'RETURN', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 309: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 310: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'PLUS_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 311: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'MINUS_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 312: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'PERCENT_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 313: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'CARET_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 314: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'AMP_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 315: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'STAR_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 316: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'TILDE_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 317: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'PIPE_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 318: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'SLASH_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 319: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'SLASH_SLASH_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 320: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'AMP_AMP_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 321: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'PIPE_PIPE_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 322: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'DOUBLE_OPEN_ANGLE_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 323: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'DOUBLE_CLOSE_ANGLE_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 324: {'origin': {'name': Token('RULE', 'assign_stmt'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}, {'name': 'TRIPLE_CLOSE_ANGLE_EQUAL', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 325: {'origin': {'name': Token('RULE', 'code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 326: {'origin': {'name': Token('RULE', 'code_block'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'LBRACE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'RBRACE', 'filter_out': True, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 327: {'origin': {'name': Token('RULE', '_cmp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OPEN_ANGLE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 328: {'origin': {'name': Token('RULE', '_cmp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLOSE_ANGLE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 329: {'origin': {'name': Token('RULE', '_cmp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'OPEN_ANGLE_EQUAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 330: {'origin': {'name': Token('RULE', '_cmp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CLOSE_ANGLE_EQUAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 331: {'origin': {'name': Token('RULE', '_cmp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'EQUAL_EQUAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 332: {'origin': {'name': Token('RULE', '_cmp_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BANG_EQUAL', 'filter_out': False, '__type__': 'Terminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 333: {'origin': {'name': Token('RULE', '_shift_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOUBLE_OPEN_ANGLE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 334: {'origin': {'name': Token('RULE', '_shift_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOUBLE_CLOSE_ANGLE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 335: {'origin': {'name': Token('RULE', '_shift_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TRIPLE_CLOSE_ANGLE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 336: {'origin': {'name': Token('RULE', '_add_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 337: {'origin': {'name': Token('RULE', '_add_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 338: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 339: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_1', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 340: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': '__ANON_2', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 341: {'origin': {'name': Token('RULE', '_mul_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PERCENT', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 342: {'origin': {'name': Token('RULE', '_inc_dec_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS_PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 343: {'origin': {'name': Token('RULE', '_inc_dec_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS_MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 344: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PLUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 345: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'MINUS', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 346: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'TILDE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 347: {'origin': {'name': Token('RULE', '_unary_op'), '__type__': 'NonTerminal'}, 'expansion': [{'name': 'BANG', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': True, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 348: {'origin': {'name': '__value_list_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'value', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 349: {'origin': {'name': '__value_list_plus_0', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__value_list_plus_0', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'value', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 350: {'origin': {'name': '__identifier_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 351: {'origin': {'name': '__identifier_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COLON_COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 352: {'origin': {'name': '__identifier_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__identifier_star_1', '__type__': 'NonTerminal'}, {'name': 'DOT', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 353: {'origin': {'name': '__identifier_star_1', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__identifier_star_1', '__type__': 'NonTerminal'}, {'name': 'COLON_COLON', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 354: {'origin': {'name': '__interface_type_def_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_def', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 355: {'origin': {'name': '__interface_type_def_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_type_def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 356: {'origin': {'name': '__interface_type_def_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__interface_type_def_star_2', '__type__': 'NonTerminal'}, {'name': 'function_def', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 357: {'origin': {'name': '__interface_type_def_star_2', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__interface_type_def_star_2', '__type__': 'NonTerminal'}, {'name': 'function_type_def', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 358: {'origin': {'name': '___type_param_list_plus_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 359: {'origin': {'name': '___type_param_list_plus_3', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___type_param_list_plus_3', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': '_type_param', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 360: {'origin': {'name': '___type_param_pair_list_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_param_pair', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 361: {'origin': {'name': '___type_param_pair_list_plus_4', '__type__': 'NonTerminal'}, 'expansion': [{'name': '___type_param_pair_list_plus_4', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'type_param_pair', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 362: {'origin': {'name': '__implementation_def_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_def', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 363: {'origin': {'name': '__implementation_def_star_5', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__implementation_def_star_5', '__type__': 'NonTerminal'}, {'name': 'function_def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 364: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'requirement_decl', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 365: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'array_type_def', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 366: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'enum_type_def', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 367: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_type_def', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 368: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'interface_type_def', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 369: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'range_type_def', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 370: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'struct_type_def', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 371: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'variant_type_def', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 372: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'alias_def', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 373: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'const_def', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 374: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'function_def', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 375: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'implementation_def', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 376: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_array_type_def', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 377: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_block_function_type_type_def', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 378: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_function_type_type_def', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 379: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_function_type_def', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 380: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_struct_type_def', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 381: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'c_union_type_def', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 382: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'requirement_decl', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 383: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'array_type_def', '__type__': 'NonTerminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 384: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'enum_type_def', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 385: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'function_type_def', '__type__': 'NonTerminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 386: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'interface_type_def', '__type__': 'NonTerminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 387: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'range_type_def', '__type__': 'NonTerminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 388: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'struct_type_def', '__type__': 'NonTerminal'}], 'order': 24, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 389: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'variant_type_def', '__type__': 'NonTerminal'}], 'order': 25, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 390: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'alias_def', '__type__': 'NonTerminal'}], 'order': 26, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 391: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'const_def', '__type__': 'NonTerminal'}], 'order': 27, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 392: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'function_def', '__type__': 'NonTerminal'}], 'order': 28, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 393: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'implementation_def', '__type__': 'NonTerminal'}], 'order': 29, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 394: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'c_array_type_def', '__type__': 'NonTerminal'}], 'order': 30, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 395: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'c_block_function_type_type_def', '__type__': 'NonTerminal'}], 'order': 31, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 396: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'c_function_type_type_def', '__type__': 'NonTerminal'}], 'order': 32, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 397: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'c_function_type_def', '__type__': 'NonTerminal'}], 'order': 33, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 398: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'c_struct_type_def', '__type__': 'NonTerminal'}], 'order': 34, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 399: {'origin': {'name': '__module_star_6', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__module_star_6', '__type__': 'NonTerminal'}, {'name': 'c_union_type_def', '__type__': 'NonTerminal'}], 'order': 35, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 400: {'origin': {'name': '__expr_list_plus_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 401: {'origin': {'name': '__expr_list_plus_7', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__expr_list_plus_7', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 402: {'origin': {'name': '__expr_pair_list_plus_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 403: {'origin': {'name': '__expr_pair_list_plus_8', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__expr_pair_list_plus_8', '__type__': 'NonTerminal'}, {'name': 'COMMA', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'VALUE', 'filter_out': False, '__type__': 'Terminal'}, {'name': 'COLON', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 404: {'origin': {'name': '__expr_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PIPE_PIPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 405: {'origin': {'name': '__expr_star_9', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__expr_star_9', '__type__': 'NonTerminal'}, {'name': 'PIPE_PIPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'and_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 406: {'origin': {'name': '__and_expr_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP_AMP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cmp_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 407: {'origin': {'name': '__and_expr_star_10', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__and_expr_star_10', '__type__': 'NonTerminal'}, {'name': 'AMP_AMP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'cmp_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 408: {'origin': {'name': '__cmp_expr_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_cmp_op', '__type__': 'NonTerminal'}, {'name': 'bor_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 409: {'origin': {'name': '__cmp_expr_star_11', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__cmp_expr_star_11', '__type__': 'NonTerminal'}, {'name': '_cmp_op', '__type__': 'NonTerminal'}, {'name': 'bor_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 410: {'origin': {'name': '__bor_expr_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'PIPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'bxor_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 411: {'origin': {'name': '__bor_expr_star_12', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__bor_expr_star_12', '__type__': 'NonTerminal'}, {'name': 'PIPE', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'bxor_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 412: {'origin': {'name': '__bxor_expr_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'CARET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'band_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 413: {'origin': {'name': '__bxor_expr_star_13', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__bxor_expr_star_13', '__type__': 'NonTerminal'}, {'name': 'CARET', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'band_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 414: {'origin': {'name': '__band_expr_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'AMP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 415: {'origin': {'name': '__band_expr_star_14', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__band_expr_star_14', '__type__': 'NonTerminal'}, {'name': 'AMP', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'shift_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 416: {'origin': {'name': '__shift_expr_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_shift_op', '__type__': 'NonTerminal'}, {'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 417: {'origin': {'name': '__shift_expr_star_15', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__shift_expr_star_15', '__type__': 'NonTerminal'}, {'name': '_shift_op', '__type__': 'NonTerminal'}, {'name': 'arith_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 418: {'origin': {'name': '__arith_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_add_op', '__type__': 'NonTerminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 419: {'origin': {'name': '__arith_expr_star_16', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__arith_expr_star_16', '__type__': 'NonTerminal'}, {'name': '_add_op', '__type__': 'NonTerminal'}, {'name': 'mul_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 420: {'origin': {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '_mul_op', '__type__': 'NonTerminal'}, {'name': 'inc_dec_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 421: {'origin': {'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__mul_expr_star_17', '__type__': 'NonTerminal'}, {'name': '_mul_op', '__type__': 'NonTerminal'}, {'name': 'inc_dec_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 422: {'origin': {'name': '__power_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'STAR_STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'unary_expr', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 423: {'origin': {'name': '__power_expr_star_18', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__power_expr_star_18', '__type__': 'NonTerminal'}, {'name': 'STAR_STAR', 'filter_out': True, '__type__': 'Terminal'}, {'name': 'unary_expr', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 424: {'origin': {'name': '__switch_block_plus_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'case_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 425: {'origin': {'name': '__switch_block_plus_19', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__switch_block_plus_19', '__type__': 'NonTerminal'}, {'name': 'case_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 426: {'origin': {'name': '__match_block_plus_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_case_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 427: {'origin': {'name': '__match_block_plus_20', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__match_block_plus_20', '__type__': 'NonTerminal'}, {'name': 'match_case_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 428: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'if_block', '__type__': 'NonTerminal'}], 'order': 0, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 429: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'switch_block', '__type__': 'NonTerminal'}], 'order': 1, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 430: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'match_block', '__type__': 'NonTerminal'}], 'order': 2, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 431: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'for_block', '__type__': 'NonTerminal'}], 'order': 3, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 432: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'while_block', '__type__': 'NonTerminal'}], 'order': 4, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 433: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'loop_block', '__type__': 'NonTerminal'}], 'order': 5, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 434: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'let_stmt', '__type__': 'NonTerminal'}], 'order': 6, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 435: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'assign_stmt', '__type__': 'NonTerminal'}], 'order': 7, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 436: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'return_stmt', '__type__': 'NonTerminal'}], 'order': 8, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 437: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'break_stmt', '__type__': 'NonTerminal'}], 'order': 9, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 438: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'continue_stmt', '__type__': 'NonTerminal'}], 'order': 10, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 439: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': 'expr', '__type__': 'NonTerminal'}], 'order': 11, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 440: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'if_block', '__type__': 'NonTerminal'}], 'order': 12, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 441: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'switch_block', '__type__': 'NonTerminal'}], 'order': 13, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 442: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'match_block', '__type__': 'NonTerminal'}], 'order': 14, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 443: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'for_block', '__type__': 'NonTerminal'}], 'order': 15, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 444: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'while_block', '__type__': 'NonTerminal'}], 'order': 16, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 445: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'loop_block', '__type__': 'NonTerminal'}], 'order': 17, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 446: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'let_stmt', '__type__': 'NonTerminal'}], 'order': 18, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 447: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'assign_stmt', '__type__': 'NonTerminal'}], 'order': 19, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 448: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'return_stmt', '__type__': 'NonTerminal'}], 'order': 20, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 449: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'break_stmt', '__type__': 'NonTerminal'}], 'order': 21, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 450: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'continue_stmt', '__type__': 'NonTerminal'}], 'order': 22, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}, 451: {'origin': {'name': '__code_block_star_21', '__type__': 'NonTerminal'}, 'expansion': [{'name': '__code_block_star_21', '__type__': 'NonTerminal'}, {'name': 'expr', '__type__': 'NonTerminal'}], 'order': 23, 'alias': None, 'options': {'keep_all_tokens': False, 'expand1': False, 'priority': None, 'template_source': None, 'empty_indices': (), '__type__': 'RuleOptions'}, '__type__': 'Rule'}}
)
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
