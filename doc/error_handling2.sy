requirement sys
requirement math
requirement random

variant Shape {
  struct Circle {
    radius: num
  }

  struct Square {
    side_length: num
  }

  struct Rectangle {
    length: num
    height: num
  }
}

fn make_random_shape(): *Shape {
  if(random.odds(1, 1000)) {
    error("Sometimes I just don't feel like making a shape")
  }

  switch(random.choices(3)) {
    case(1) {
      return(*Shape.Circle(radius: random.random_num()))
    }
    case(2) {
      return(*Shape.Square(side_length: random.random_num()))
    }
    case(3) {
      return(*Shape.Rectangle(
        length: random.random_num(),
        height: random.random_num()
      ))
    }
  }
}

fn get_shape_area(shape: &Shape): num {
  match(shape) {
    case(Shape.Circle) {
      return(math.PI * (shape.radius ** 2))
    }
    case(Shape.Square) {
      return(shape.side_length ** 2)
    }
    case(Shape.Rectangle) {
      return(shape.length * shape.height)
    }
  }
}

fn increase_shape_area(shape: &Shape!) {
  match(shape) {
    case(Shape.Circle) {
      shape.radius += random.random_num()
    }
    case(Shape.Square) {
      shape.side_length += random.random_num()
    }
    case(Shape.Rectangle) {
      shape.length += random.random_num()
      shape.height += random.random_num()
    }
  }
}

fn print_shape(shape: &Shape) {
  match(shape) {
    case(Circle) {
      sys.echo("Circle({get_shape_area(shape)})")
    }
    case(Square) {
      sys.echo("Square({get_shape_area(shape)})")
    }
    case(Rectangle) {
      sys.echo("Rectangle({get_shape_area(shape)})")
    }
  }
}

fn sync_main() {
  for(_: 10000000) {
    with(shape: make_random_shape()) {
      increase_shape_area(&shape!)
      print_shape(&shape)
    }
    else(err) {
      echoerr("Error making a random shape: {err}")
    }
  }
}

fn async_main() {
  generate(make_random_shape)
    |> take(1000000)
    \> fn(err: &error) {
         echoerr("Error making a random shape: {err}")
       }
    |> increase_shape_area
    |> print_shape
}
