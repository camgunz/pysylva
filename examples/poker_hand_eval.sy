mod poker

req random

range Score 1u8..10u8

range Value 1u8..14u8

range DeckSize 0u8..52u8

variant Rank {
  Single: {
    name: str,
    score: Score,
    value: Value,
  },
  Double: {
    name: str,
    score1: Score,
    score2: Score,
    value1: Value,
    value2: Value,
  }
}

enum Rank {
  Ace:   Rank.Double{"Ace",   Score(1), Score(10), Value(1), Value(14)},
  Two:   Rank.Single{"Two",   Score(2),            Value(2)},
  Three: Rank.Single{"Three", Score(3),            Value(3)},
  Four:  Rank.Single{"Four",  Score(4),            Value(4)},
  Five:  Rank.Single{"Five",  Score(5),            Value(5)},
  Six:   Rank.Single{"Six",   Score(6),            Value(6)},
  Seven: Rank.Single{"Seven", Score(7),            Value(7)},
  Eight: Rank.Single{"Eight", Score(8),            Value(8)},
  Nine:  Rank.Single{"Nine",  Score(9),            Value(9)},
  Ten:   Rank.Single{"Ten",   Score(10),           Value(10)},
  Jack:  Rank.Single{"Jack",  Score(10),           Value(11)},
  Queen: Rank.Single{"Queen", Score(10),           Value(12)},
  King:  Rank.Single{"King",  Score(10),           Value(13)},
}

enum Suit {
  Spade:   0u8,
  Club:    1u8,
  Diamond: 2u8,
  Heart:   3u8,
}

struct Card {
  suit: Suit,
  rank: Rank
}

enum Cards {
  AceOfSpades:     Card{Suit.Spade,   Rank.Ace},
  TwofSpades:      Card{Suit.Spade,   Rank.Two},
  ThreeOfSpades:   Card{Suit.Spade,   Rank.Three},
  FourOfSpades:    Card{Suit.Spade,   Rank.Four},
  FiveOfSpades:    Card{Suit.Spade,   Rank.Five},
  SixOfSpades:     Card{Suit.Spade,   Rank.Six},
  SevenOfSpades:   Card{Suit.Spade,   Rank.Seven},
  EightOfSpades:   Card{Suit.Spade,   Rank.Eight},
  NineOfSpades:    Card{Suit.Spade,   Rank.Nine},
  TenOfSpades:     Card{Suit.Spade,   Rank.Ten},
  JackOfSpades:    Card{Suit.Spade,   Rank.Jack},
  QueenOfSpades:   Card{Suit.Spade,   Rank.Queen},
  KingOfSpades:    Card{Suit.Spade,   Rank.King},
  AceOfClubs:      Card{Suit.Club,    Rank.Ace},
  TwoOfClubs:      Card{Suit.Club,    Rank.Two},
  ThreeOfClubs:    Card{Suit.Club,    Rank.Three},
  FourOfClubs:     Card{Suit.Club,    Rank.Four},
  FiveOfClubs:     Card{Suit.Club,    Rank.Five},
  SixOfClubs:      Card{Suit.Club,    Rank.Six},
  SevenOfClubs:    Card{Suit.Club,    Rank.Seven},
  EightOfClubs:    Card{Suit.Club,    Rank.Eight},
  NineOfClubs:     Card{Suit.Club,    Rank.Nine},
  TenOfClubs:      Card{Suit.Club,    Rank.Ten},
  JackOfClubs:     Card{Suit.Club,    Rank.Jack},
  QueenOfClubs:    Card{Suit.Club,    Rank.Queen},
  KingOfClubs:     Card{Suit.Club,    Rank.King},
  AceOfHearts:     Card{Suit.Heart,   Rank.Ace},
  TwoOfHearts:     Card{Suit.Heart,   Rank.Two},
  ThreeOfHearts:   Card{Suit.Heart,   Rank.Three},
  FourOfHearts:    Card{Suit.Heart,   Rank.Four},
  FiveOfHearts:    Card{Suit.Heart,   Rank.Five},
  SixOfHearts:     Card{Suit.Heart,   Rank.Six},
  SevenOfHearts:   Card{Suit.Heart,   Rank.Seven},
  EightOfHearts:   Card{Suit.Heart,   Rank.Eight},
  NineOfHearts:    Card{Suit.Heart,   Rank.Nine},
  TenOfHearts:     Card{Suit.Heart,   Rank.Ten},
  JackOfHearts:    Card{Suit.Heart,   Rank.Jack},
  QueenOfHearts:   Card{Suit.Heart,   Rank.Queen},
  KingOfHearts:    Card{Suit.Heart,   Rank.King},
  AceOfDiamonds:   Card{Suit.Diamond, Rank.Ace},
  TwoOfDiamonds:   Card{Suit.Diamond, Rank.Two},
  ThreeOfDiamonds: Card{Suit.Diamond, Rank.Three},
  FourOfDiamonds:  Card{Suit.Diamond, Rank.Four},
  FiveOfDiamonds:  Card{Suit.Diamond, Rank.Five},
  SixOfDiamonds:   Card{Suit.Diamond, Rank.Six},
  SevenOfDiamonds: Card{Suit.Diamond, Rank.Seven},
  EightOfDiamonds: Card{Suit.Diamond, Rank.Eight},
  NineOfDiamonds:  Card{Suit.Diamond, Rank.Nine},
  TenOfDiamonds:   Card{Suit.Diamond, Rank.Ten},
  JackOfDiamonds:  Card{Suit.Diamond, Rank.Jack},
  QueenOfDiamonds: Card{Suit.Diamond, Rank.Queen},
  KingOfDiamonds:  Card{Suit.Diamond, Rank.King},
}

array Deck [*Card * DeckSize.count]

array Hand [&Card * 5]

# Generics
alias DealResult: Result(&Card, str)

fn rank_value_comparer(value1: Value, value2: Value): bool

fn rank_value_less_than(value1: Value, value2: Value): bool {
  return value1 < value2
}

fn rank_value_greater_than(value1: Value, value2: Value): bool {
  return value1 > value2
}

fn rank_value_equal(value1: Value, value2: Value): bool {
  return value1 == value2
}

fn rank_value_precedes(value1: Value, value2: Value): bool {
  return value1 == value2 - 1
}

fn rank_value_succeeds(value1: Value, value2: Value): bool {
  return (value1 == (value2 + 1))
}

fn compare_ranks(cmp: rank_value_comparer, r1: &Rank, r2: &Rank): bool {
  match (r1) {
    case (s1: Single) {
      match (r2) {
        case (s2: Single) {
          return cmp(s1.value, s2.value)
        }
        case (d2: Double) {
          return cmp(s1.value, d2.value1) || cmp(s1.value, d2.value2)
        }
      }
    }
    case (d1: Double) {
      match (other) {
        case (s2: Single) {
          return cmp(d1.value1, s2.value) || cmp(d1.value2, s2.value)
        }
        case (d2: Double) {
          return (
            cmp(d1.value1, d2.value1) || cmp(d1.value1, d2.value2) ||
            cmp(d1.value2, d2.value1) || cmp(d1.value2, d2.value2)
          )
        }
      }
    }
  }
}

impl Rank {
  fn less_than(self: &Rank, other: &Rank): bool {
    return compare_ranks(rank_value_less_than, self, other)
  }

  fn greater_than(self: &Rank, other: &Rank): bool {
    return compare_ranks(rank_value_greater_than, self, other)
  }

  fn equals(self: &Rank, other: &Rank): bool {
    return compare_ranks(rank_value_equals, self, other)
  }

  fn precedes(self: &Rank, other: &Rank): bool {
    return compare_ranks(rank_value_precedes, self, other)
  }

  fn succeeds(self: &Rank, other: &Rank): bool {
    return compare_ranks(rank_value_succeeds, self, other)
  }
}

impl Card {
  fn less_than(self: &Card, other: &Card): bool {
    return (
      self.suit < other.suit ||
      (self.suit == other.suit && self.rank.less_than(other.rank))
    )
  }

  fn greater_than(self: &Card, other: &Card): bool {
    return (
      self.suit > other.suit ||
      (self.suit == other.suit && self.rank.greater_than(other.rank))
    )
  }

  fn equals(self: &Card, other: &Card): bool {
    return self.suit == other.suit && self.rank.equals(other.rank)
  }
}

impl Deck {
  fn shuffle(self: &Deck!) {
    random.shuffle(&Deck!)(self) # Generics
  }

  fn deal(deck: &Deck!): DealResult {
    let res: deck.pop(0)

    match (res) {
      case (*card: OK) {
        return DealResult.OK(*card)
      }
      default {
        return DealResult.Fail("No more cards")
      }
    }
  }
}

impl Hand {
  fn build(self: &Hand!, deck: &Deck!, count: DeckSize) {
    for (i: Hand::indices) {
      let res: deal_from_deck(deck)

      match (res) {
        case (*card: OK) {
          self[i] = *card
        }
        default {
          break
        }
      }
    }

    # [TODO] Implement base.array_sort
    base.array_sort(&self::type!)(&self!) # Generics
  }

  fn remove_card_at_index(self: &Hand!, index: uint) {
    array_delete(&self.cards!, index)
  }

  fn get_card_at_index(self: &Hand!, index: uint): &Card {
    return self.cards.get(index).succeed_or_die()
  }

  fn get_value_counts(self: &Hand, counts: &[uint * Value.max]!) {
    for (i: self::type.indices) {
      match (self[i].rank) {
        case (s: Single) {
          value_counts[s.value]++
        }
        case (d: Double) {
          value_counts[d.value1]++
        }
      }
    }
  }

  fn is_pair(self: &Hand): bool {
    let value_counts: [uint(0) * Value.max]
    let pair_count: 0u

    self.get_value_counts(&value_counts!)

    for (i: value_counts::type.indices) {
      pair_count += value_counts[i] % 2u
    }

    return pair_count > 1u
  }

  fn is_two_pair(self: &Hand): bool {
    let value_counts: [uint(0) * Value.max]
    let pair_count: 0u

    self.get_value_counts(&value_counts!)

    for (i: value_counts::type.indices) {
      pair_count += value_counts[i] % 2u
    }

    return pair_count > 2u
  }

  fn is_three_of_a_kind(self: &Hand): bool {
    let value_counts: [uint(0) * Value.max]
    let trip_count: 0u

    self.get_value_counts(&value_counts!)

    for (i: value_counts::type.indices) {
      trip_count += value_counts[i] % 3u
    }

    return trip_count > 1u
  }

  fn is_four_of_a_kind(self: &Hand): bool {
    let value_counts: [uint(0) * Value.max]
    let quad_count: 0u

    self.get_value_counts(&value_counts!)

    for (i: value_counts::type.indices) {
      quad_count += value_counts[i] % 4u
    }
  }

  fn is_flush(self: &Hand): bool {
    let last_card: &Cards.AceOfSpades

    for (i: self::type.indices) {
      let card: &self[i]

      if (i > 0u && card.suit != last_card.suit) {
        return false
      }

      last_card = card
    }

    return true
  }

  fn is_straight(self: &Hand): bool {
    let last_card: &Cards.AceOfSpades

    for (i: self::type.indices) {
      let card: &self[i]

      if (i > 0u && !card.succeeds(last_card)) {
        return false
      }

      last_card = card
    }

    return true
  }
}
