mod base.string

iface String {
  fn get_length(self: &String): uint
}

impl String(str) {
  fn get_length(self: &str): uint {
    return self.length
  }
}

alias constr: [u8...]

impl str([u8...]) {
  get_length: (self: &constr) {
    return self::type::length
  }
}

mod base.result

req sys

variant Result(ok_type) {
  OK: ok_type,
  Fail: String,
}

impl Result(ok_type) {
  fn on_failure(r: Result, handler: fn(s: Stringable)): ok_type {
    match (r) {
      case (value: OK) { return value }
      case (stringable: Fail) { handler(stringable) }
    }
  }

  fn ok_or_die(r: Result): ok_type {
    return
    match (r) {
      case (value: OK) { return value }
      case (stringable: Fail) { sys.die(stringable.to_string()) }
    }
  }
}

fn on_failure(ok_type) (
  r: Result(ok_type),
  handler: fntype(s: Stringable)
): Result(ok_type, failed_type) {
  match (r) {
    case (stringable: Fail) { handler(stringable) }
    default {}
  }

  return r
}

fn ok_or_die(ok_type) (
  r: Result(ok_type)
): ok_type {
  match (r) {
    case (value: OK) { return success }
    case (stringable: Fail) { sys.die(stringable.to_string()) }
  }
}
