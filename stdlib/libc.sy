cfn __assert_fail(arg_0: cptr(i8), arg_1: cptr(i8), arg_2: i32, arg_3: cptr(i8))
cfn cacos(__z: c128): c128
cfn cacosf(__z: c64): c64
cfn cacosl(__z: c256): c256
cfn casin(__z: c128): c128
cfn casinf(__z: c64): c64
cfn casinl(__z: c256): c256
cfn catan(__z: c128): c128
cfn catanf(__z: c64): c64
cfn catanl(__z: c256): c256
cfn ccos(__z: c128): c128
cfn ccosf(__z: c64): c64
cfn ccosl(__z: c256): c256
cfn csin(__z: c128): c128
cfn csinf(__z: c64): c64
cfn csinl(__z: c256): c256
cfn ctan(__z: c128): c128
cfn ctanf(__z: c64): c64
cfn ctanl(__z: c256): c256
cfn cacosh(__z: c128): c128
cfn cacoshf(__z: c64): c64
cfn cacoshl(__z: c256): c256
cfn casinh(__z: c128): c128
cfn casinhf(__z: c64): c64
cfn casinhl(__z: c256): c256
cfn catanh(__z: c128): c128
cfn catanhf(__z: c64): c64
cfn catanhl(__z: c256): c256
cfn ccosh(__z: c128): c128
cfn ccoshf(__z: c64): c64
cfn ccoshl(__z: c256): c256
cfn csinh(__z: c128): c128
cfn csinhf(__z: c64): c64
cfn csinhl(__z: c256): c256
cfn ctanh(__z: c128): c128
cfn ctanhf(__z: c64): c64
cfn ctanhl(__z: c256): c256
cfn cexp(__z: c128): c128
cfn cexpf(__z: c64): c64
cfn cexpl(__z: c256): c256
cfn clog(__z: c128): c128
cfn clogf(__z: c64): c64
cfn clogl(__z: c256): c256
cfn cabs(__z: c128): f64
cfn cabsf(__z: c64): f32
cfn cabsl(__z: c256): f128
cfn cpow(__x: c128, __y: c128): c128
cfn cpowf(__x: c64, __y: c64): c64
cfn cpowl(__x: c256, __y: c256): c256
cfn csqrt(__z: c128): c128
cfn csqrtf(__z: c64): c64
cfn csqrtl(__z: c256): c256
cfn carg(__z: c128): f64
cfn cargf(__z: c64): f32
cfn cargl(__z: c256): f128
cfn cimag(__z: c128): f64
cfn cimagf(__z: c64): f32
cfn cimagl(__z: c256): f128
cfn conj(__z: c128): c128
cfn conjf(__z: c64): c64
cfn conjl(__z: c256): c256
cfn cproj(__z: c128): c128
cfn cprojf(__z: c64): c64
cfn cprojl(__z: c256): c256
cfn creal(__z: c128): f64
cfn crealf(__z: c64): f32
cfn creall(__z: c256): f128
cfn isalnum(arg_0: i32): i32
cfn isalpha(arg_0: i32): i32
cfn isblank(arg_0: i32): i32
cfn iscntrl(arg_0: i32): i32
cfn isdigit(arg_0: i32): i32
cfn isgraph(arg_0: i32): i32
cfn islower(arg_0: i32): i32
cfn isprint(arg_0: i32): i32
cfn ispunct(arg_0: i32): i32
cfn isspace(arg_0: i32): i32
cfn isupper(arg_0: i32): i32
cfn isxdigit(arg_0: i32): i32
cfn tolower(arg_0: i32): i32
cfn toupper(arg_0: i32): i32
cfn __isspace(_c: i32): i32
cstruct struct___locale_struct
alias locale_t: cptr(struct___locale_struct!)
cfn isalnum_l(arg_0: i32, arg_1: locale_t): i32
cfn isalpha_l(arg_0: i32, arg_1: locale_t): i32
cfn isblank_l(arg_0: i32, arg_1: locale_t): i32
cfn iscntrl_l(arg_0: i32, arg_1: locale_t): i32
cfn isdigit_l(arg_0: i32, arg_1: locale_t): i32
cfn isgraph_l(arg_0: i32, arg_1: locale_t): i32
cfn islower_l(arg_0: i32, arg_1: locale_t): i32
cfn isprint_l(arg_0: i32, arg_1: locale_t): i32
cfn ispunct_l(arg_0: i32, arg_1: locale_t): i32
cfn isspace_l(arg_0: i32, arg_1: locale_t): i32
cfn isupper_l(arg_0: i32, arg_1: locale_t): i32
cfn isxdigit_l(arg_0: i32, arg_1: locale_t): i32
cfn tolower_l(arg_0: i32, arg_1: locale_t): i32
cfn toupper_l(arg_0: i32, arg_1: locale_t): i32
cfn isascii(arg_0: i32): i32
cfn toascii(arg_0: i32): i32
cfn __errno_location(): cptr(i32!)
val FE_INVALID: 1u32
val __FE_DENORM: 2u32
val FE_DIVBYZERO: 4u32
val FE_OVERFLOW: 8u32
val FE_UNDERFLOW: 16u32
val FE_INEXACT: 32u32
val FE_TONEAREST: 0u32
val FE_DOWNWARD: 1024u32
val FE_UPWARD: 2048u32
val FE_TOWARDZERO: 3072u32
alias fexcept_t: u16
cstruct struct_fenv_t {
  __control_word: u16,
  __glibc_reserved1: u16,
  __status_word: u16,
  __glibc_reserved2: u16,
  __tags: u16,
  __glibc_reserved3: u16,
  __eip: u32,
  __cs_selector: u16,
  __opcode: u32,
  __glibc_reserved4: u32,
  __data_offset: u32,
  __data_selector: u16,
  __glibc_reserved5: u16,
  __mxcsr: u32
}
alias fenv_t: struct_fenv_t
cfn feclearexcept(arg_0: i32): i32
cfn fegetexceptflag(arg_0: cptr(fexcept_t!), arg_1: i32): i32
cfn feraiseexcept(arg_0: i32): i32
cfn fesetexceptflag(arg_0: cptr(fexcept_t), arg_1: i32): i32
cfn fetestexcept(arg_0: i32): i32
cfn fegetround(): i32
cfn fesetround(arg_0: i32): i32
cfn fegetenv(arg_0: cptr(fenv_t!)): i32
cfn feholdexcept(arg_0: cptr(fenv_t!)): i32
cfn fesetenv(arg_0: cptr(fenv_t)): i32
cfn feupdateenv(arg_0: cptr(fenv_t)): i32
cfn __flt_rounds(): i32
alias __u_char: u8
alias __u_short: u16
alias __u_int: u32
alias __u_long: u64
alias __int8_t: i8
alias __uint8_t: u8
alias __int16_t: i16
alias __uint16_t: u16
alias __int32_t: i32
alias __uint32_t: u32
alias __int64_t: i64
alias __uint64_t: u64
alias __int_least8_t: __int8_t
alias __uint_least8_t: __uint8_t
alias __int_least16_t: __int16_t
alias __uint_least16_t: __uint16_t
alias __int_least32_t: __int32_t
alias __uint_least32_t: __uint32_t
alias __int_least64_t: __int64_t
alias __uint_least64_t: __uint64_t
alias __quad_t: i64
alias __u_quad_t: u64
alias __intmax_t: i64
alias __uintmax_t: u64
alias __dev_t: u64
alias __uid_t: u32
alias __gid_t: u32
alias __ino_t: u64
alias __ino64_t: u64
alias __mode_t: u32
alias __nlink_t: u64
alias __off_t: i64
alias __off64_t: i64
alias __pid_t: i32
cstruct struct___fsid_t {
  __val: i32[2]
}
alias __fsid_t: struct___fsid_t
alias __clock_t: i64
alias __rlim_t: u64
alias __rlim64_t: u64
alias __id_t: u32
alias __time_t: i64
alias __useconds_t: u32
alias __suseconds_t: i64
alias __daddr_t: i32
alias __key_t: i32
alias __clockid_t: i32
alias __timer_t: cptr(void!)
alias __blksize_t: i64
alias __blkcnt_t: i64
alias __blkcnt64_t: i64
alias __fsblkcnt_t: u64
alias __fsblkcnt64_t: u64
alias __fsfilcnt_t: u64
alias __fsfilcnt64_t: u64
alias __fsword_t: i64
alias __ssize_t: i64
alias __syscall_slong_t: i64
alias __syscall_ulong_t: u64
alias __loff_t: __off64_t
alias __caddr_t: cptr(i8!)
alias __intptr_t: i64
alias __socklen_t: u32
alias __sig_atomic_t: i32
alias int8_t: i8
alias int16_t: i16
alias int32_t: i32
alias int64_t: i64
alias uint8_t: u8
alias uint16_t: u16
alias uint32_t: u32
alias uint64_t: u64
alias int_least8_t: int8_t
alias int_least16_t: int16_t
alias int_least32_t: int32_t
alias int_least64_t: int64_t
alias uint_least8_t: uint8_t
alias uint_least16_t: uint16_t
alias uint_least32_t: uint32_t
alias uint_least64_t: uint64_t
alias int_fast8_t: int8_t
alias int_fast16_t: int32_t
alias int_fast32_t: int32_t
alias int_fast64_t: int64_t
alias uint_fast8_t: uint8_t
alias uint_fast16_t: uint32_t
alias uint_fast32_t: uint32_t
alias uint_fast64_t: uint64_t
alias intptr_t: i64
alias uintptr_t: u64
alias intmax_t: i64
alias uintmax_t: u64
alias wchar_t: i32
cstruct struct_imaxdiv_t {
  quot: intmax_t,
  rem: intmax_t
}
alias imaxdiv_t: struct_imaxdiv_t
cfn imaxabs(arg_0: intmax_t): intmax_t
cfn imaxdiv(arg_0: intmax_t, arg_1: intmax_t): imaxdiv_t
cfn strtoimax(arg_0: cptr(i8), arg_1: cptr(cptr(i8!)!), arg_2: i32): intmax_t
cfn strtoumax(arg_0: cptr(i8), arg_1: cptr(cptr(i8!)!), arg_2: i32): uintmax_t
cfn wcstoimax(arg_0: cptr(wchar_t), arg_1: cptr(cptr(wchar_t!)!), arg_2: i32): intmax_t
cfn wcstoumax(arg_0: cptr(wchar_t), arg_1: cptr(cptr(wchar_t!)!), arg_2: i32): uintmax_t
cstruct struct_lconv {
  decimal_point: cptr(i8!),
  thousands_sep: cptr(i8!),
  grouping: cptr(i8!),
  int_curr_symbol: cptr(i8!),
  currency_symbol: cptr(i8!),
  mon_decimal_point: cptr(i8!),
  mon_thousands_sep: cptr(i8!),
  mon_grouping: cptr(i8!),
  positive_sign: cptr(i8!),
  negative_sign: cptr(i8!),
  int_frac_digits: i8,
  frac_digits: i8,
  p_cs_precedes: i8,
  p_sep_by_space: i8,
  n_cs_precedes: i8,
  n_sep_by_space: i8,
  p_sign_posn: i8,
  n_sign_posn: i8,
  int_p_cs_precedes: i8,
  int_p_sep_by_space: i8,
  int_n_cs_precedes: i8,
  int_n_sep_by_space: i8,
  int_p_sign_posn: i8,
  int_n_sign_posn: i8
}
cfn setlocale(arg_0: i32, arg_1: cptr(i8)): cptr(i8!)
cfn localeconv(): cptr(struct_lconv!)
cfn duplocale(arg_0: locale_t): locale_t
cfn freelocale(arg_0: locale_t)
cfn newlocale(arg_0: i32, arg_1: cptr(i8), arg_2: locale_t): locale_t
cfn uselocale(arg_0: locale_t): locale_t
alias float_t: f32
alias double_t: f64
cfn __fpclassify(__value: f64): i32
cfn __fpclassifyf(__value: f32): i32
cfn __fpclassifyl(__value: f128): i32
cfn __FLOAT_BITS(__f: f32): u32
cfn __DOUBLE_BITS(__f: f64): u64
cfn __signbit(__value: f64): i32
cfn __signbitf(__value: f32): i32
cfn __signbitl(__value: f128): i32
cfn __islessf(__x: float_t, __y: float_t): i32
cfn __isless(__x: double_t, __y: double_t): i32
cfn __islessl(__x: f128, __y: f128): i32
cfn __islessequalf(__x: float_t, __y: float_t): i32
cfn __islessequal(__x: double_t, __y: double_t): i32
cfn __islessequall(__x: f128, __y: f128): i32
cfn __islessgreaterf(__x: float_t, __y: float_t): i32
cfn __islessgreater(__x: double_t, __y: double_t): i32
cfn __islessgreaterl(__x: f128, __y: f128): i32
cfn __isgreaterf(__x: float_t, __y: float_t): i32
cfn __isgreater(__x: double_t, __y: double_t): i32
cfn __isgreaterl(__x: f128, __y: f128): i32
cfn __isgreaterequalf(__x: float_t, __y: float_t): i32
cfn __isgreaterequal(__x: double_t, __y: double_t): i32
cfn __isgreaterequall(__x: f128, __y: f128): i32
cfn acos(__x: f64): f64
cfn acosf(__x: f32): f32
cfn acosl(__x: f128): f128
cfn acosh(__x: f64): f64
cfn acoshf(__x: f32): f32
cfn acoshl(__x: f128): f128
cfn asin(__x: f64): f64
cfn asinf(__x: f32): f32
cfn asinl(__x: f128): f128
cfn asinh(__x: f64): f64
cfn asinhf(__x: f32): f32
cfn asinhl(__x: f128): f128
cfn atan(__x: f64): f64
cfn atanf(__x: f32): f32
cfn atanl(__x: f128): f128
cfn atan2(__y: f64, __x: f64): f64
cfn atan2f(__y: f32, __x: f32): f32
cfn atan2l(__y: f128, __x: f128): f128
cfn atanh(__x: f64): f64
cfn atanhf(__x: f32): f32
cfn atanhl(__x: f128): f128
cfn cbrt(__x: f64): f64
cfn cbrtf(__x: f32): f32
cfn cbrtl(__x: f128): f128
cfn ceil(__x: f64): f64
cfn ceilf(__x: f32): f32
cfn ceill(__x: f128): f128
cfn copysign(__x: f64, __y: f64): f64
cfn copysignf(__x: f32, __y: f32): f32
cfn copysignl(__x: f128, __y: f128): f128
cfn cos(__x: f64): f64
cfn cosf(__x: f32): f32
cfn cosl(__x: f128): f128
cfn cosh(__x: f64): f64
cfn coshf(__x: f32): f32
cfn coshl(__x: f128): f128
cfn erf(arg_0: f64): f64
cfn erff(arg_0: f32): f32
cfn erfl(arg_0: f128): f128
cfn erfc(arg_0: f64): f64
cfn erfcf(arg_0: f32): f32
cfn erfcl(arg_0: f128): f128
cfn exp(__x: f64): f64
cfn expf(__x: f32): f32
cfn expl(__x: f128): f128
cfn exp2(__x: f64): f64
cfn exp2f(__x: f32): f32
cfn exp2l(__x: f128): f128
cfn expm1(__x: f64): f64
cfn expm1f(__x: f32): f32
cfn expm1l(__x: f128): f128
cfn fabs(__x: f64): f64
cfn fabsf(__x: f32): f32
cfn fabsl(__x: f128): f128
cfn fdim(__x: f64, __y: f64): f64
cfn fdimf(__x: f32, __y: f32): f32
cfn fdiml(__x: f128, __y: f128): f128
cfn floor(__x: f64): f64
cfn floorf(__x: f32): f32
cfn floorl(__x: f128): f128
cfn fma(__x: f64, __y: f64, __z: f64): f64
cfn fmaf(__x: f32, __y: f32, __z: f32): f32
cfn fmal(__x: f128, __y: f128, __z: f128): f128
cfn fmax(__x: f64, __y: f64): f64
cfn fmaxf(__x: f32, __y: f32): f32
cfn fmaxl(__x: f128, __y: f128): f128
cfn fmin(__x: f64, __y: f64): f64
cfn fminf(__x: f32, __y: f32): f32
cfn fminl(__x: f128, __y: f128): f128
cfn fmod(__x: f64, __y: f64): f64
cfn fmodf(__x: f32, __y: f32): f32
cfn fmodl(__x: f128, __y: f128): f128
cfn frexp(__x: f64, __exponent: cptr(i32!)): f64
cfn frexpf(__x: f32, __exponent: cptr(i32!)): f32
cfn frexpl(__x: f128, __exponent: cptr(i32!)): f128
cfn hypot(__x: f64, __y: f64): f64
cfn hypotf(__x: f32, __y: f32): f32
cfn hypotl(__x: f128, __y: f128): f128
cfn ilogb(__x: f64): i32
cfn ilogbf(__x: f32): i32
cfn ilogbl(__x: f128): i32
cfn ldexp(__x: f64, __exponent: i32): f64
cfn ldexpf(__x: f32, __exponent: i32): f32
cfn ldexpl(__x: f128, __exponent: i32): f128
cfn lgamma(arg_0: f64): f64
cfn lgammaf(arg_0: f32): f32
cfn lgammal(arg_0: f128): f128
cfn llrint(__x: f64): i64
cfn llrintf(__x: f32): i64
cfn llrintl(__x: f128): i64
cfn llround(__x: f64): i64
cfn llroundf(__x: f32): i64
cfn llroundl(__x: f128): i64
cfn log(__x: f64): f64
cfn logf(__x: f32): f32
cfn logl(__x: f128): f128
cfn log10(__x: f64): f64
cfn log10f(__x: f32): f32
cfn log10l(__x: f128): f128
cfn log1p(__x: f64): f64
cfn log1pf(__x: f32): f32
cfn log1pl(__x: f128): f128
cfn log2(__x: f64): f64
cfn log2f(__x: f32): f32
cfn log2l(__x: f128): f128
cfn logb(__x: f64): f64
cfn logbf(__x: f32): f32
cfn logbl(__x: f128): f128
cfn lrint(__x: f64): i64
cfn lrintf(__x: f32): i64
cfn lrintl(__x: f128): i64
cfn lround(__x: f64): i64
cfn lroundf(__x: f32): i64
cfn lroundl(__x: f128): i64
cfn modf(__x: f64, __iptr: cptr(f64!)): f64
cfn modff(__x: f32, __iptr: cptr(f32!)): f32
cfn modfl(__x: f128, __iptr: cptr(f128!)): f128
cfn nan(__tagb: cptr(i8)): f64
cfn nanf(__tagb: cptr(i8)): f32
cfn nanl(__tagb: cptr(i8)): f128
cfn nearbyint(__x: f64): f64
cfn nearbyintf(__x: f32): f32
cfn nearbyintl(__x: f128): f128
cfn nextafter(__x: f64, __y: f64): f64
cfn nextafterf(__x: f32, __y: f32): f32
cfn nextafterl(__x: f128, __y: f128): f128
cfn nexttoward(__x: f64, __y: f128): f64
cfn nexttowardf(__x: f32, __y: f128): f32
cfn nexttowardl(__x: f128, __y: f128): f128
cfn pow(__x: f64, __y: f64): f64
cfn powf(__x: f32, __y: f32): f32
cfn powl(__x: f128, __y: f128): f128
cfn remainder(__x: f64, __y: f64): f64
cfn remainderf(__x: f32, __y: f32): f32
cfn remainderl(__x: f128, __y: f128): f128
cfn remquo(__x: f64, __y: f64, __quo: cptr(i32!)): f64
cfn remquof(__x: f32, __y: f32, __quo: cptr(i32!)): f32
cfn remquol(__x: f128, __y: f128, __quo: cptr(i32!)): f128
cfn rint(__x: f64): f64
cfn rintf(__x: f32): f32
cfn rintl(__x: f128): f128
cfn round(__x: f64): f64
cfn roundf(__x: f32): f32
cfn roundl(__x: f128): f128
cfn scalbln(__x: f64, __n: i64): f64
cfn scalblnf(__x: f32, __n: i64): f32
cfn scalblnl(__x: f128, __n: i64): f128
cfn scalbn(__x: f64, __n: i32): f64
cfn scalbnf(__x: f32, __n: i32): f32
cfn scalbnl(__x: f128, __n: i32): f128
cfn sin(__x: f64): f64
cfn sinf(__x: f32): f32
cfn sinl(__x: f128): f128
cfn sinh(__x: f64): f64
cfn sinhf(__x: f32): f32
cfn sinhl(__x: f128): f128
cfn sqrt(__x: f64): f64
cfn sqrtf(__x: f32): f32
cfn sqrtl(__x: f128): f128
cfn tan(__x: f64): f64
cfn tanf(__x: f32): f32
cfn tanl(__x: f128): f128
cfn tanh(__x: f64): f64
cfn tanhf(__x: f32): f32
cfn tanhl(__x: f128): f128
cfn tgamma(arg_0: f64): f64
cfn tgammaf(arg_0: f32): f32
cfn tgammal(arg_0: f128): f128
cfn trunc(__x: f64): f64
cfn truncf(__x: f32): f32
cfn truncl(__x: f128): f128
alias __jmp_buf: i64[8]
cstruct struct___jmp_buf_tag {
  __jb: __jmp_buf,
  __fl: u64,
  __ss: u64[16]
}
alias jmp_buf: struct___jmp_buf_tag[1]
alias sigjmp_buf: jmp_buf
cfn sigsetjmp(arg_0: sigjmp_buf, arg_1: i32): i32
cfn siglongjmp(arg_0: sigjmp_buf, arg_1: i32)
cfn setjmp(arg_0: jmp_buf): i32
cfn longjmp(arg_0: jmp_buf, arg_1: i32)
alias size_t: u64
alias time_t: i64
alias clock_t: i64
cstruct struct_timespec {
  tv_sec: time_t,
  _: i32,
  tv_nsec: i64
  _: i32,
}
alias pid_t: i32
alias uid_t: u32
cstruct struct___pthread
alias pthread_t: cptr(struct___pthread!)
cstruct struct___sigset_t {
  __bits: u64[16]
}
alias sigset_t: struct___sigset_t
cstruct struct_pthread_attr_t {
  __u: cunion {
    __i: i32[14],
    __vi: i32[14],
    __s: u64[7]
  },
  __u: union_(anonymous_union_at_/usr/lib/musl/include/bits/alltypes.h:372:18)
}
alias pthread_attr_t: struct_pthread_attr_t
cstruct struct_sigaltstack {
  ss_sp: cptr(void!),
  ss_flags: i32,
  ss_size: size_t
}
alias stack_t: struct_sigaltstack
cstruct struct_mcontext_t {
  __space: u64[32]
}
alias mcontext_t: struct_mcontext_t
cstruct struct___ucontext {
  uc_flags: u64,
  uc_link: cptr(struct___ucontext!),
  uc_stack: stack_t,
  uc_mcontext: mcontext_t,
  uc_sigmask: sigset_t,
  __fpregs_mem: u64[64]
}
alias ucontext_t: struct___ucontext
cunion union_sigval {
  sival_int: i32,
  sival_ptr: cptr(void!)
}
cstruct struct_siginfo_t {
  si_signo: i32,
  si_errno: i32,
  si_code: i32,
  : cunion {
  __pad: i8[112],
  : cstruct {
  si_call_addr: cptr(void!),
  si_syscall: i32,
  si_arch: u32
},
  __si_common: struct_(anonymous_struct_at_/usr/lib/musl/include/signal.h:105:3),
  __sigfault: struct_(anonymous_struct_at_/usr/lib/musl/include/signal.h:124:3),
  __sigpoll: struct_(anonymous_struct_at_/usr/lib/musl/include/signal.h:135:3),
  __sigsys: struct_(anonymous_struct_at_/usr/lib/musl/include/signal.h:139:3)
},
  __si_fields: union_(anonymous_union_at_/usr/lib/musl/include/signal.h:103:2)
}
alias siginfo_t: struct_siginfo_t
cstruct struct_sigaction {
  : cunion {
  sa_handler: cfntype(i32!),
  sa_sigaction: cfntype(i32!, cptr(siginfo_t!)!, cptr(void!)!)
},
  __sa_handler: union_(anonymous_union_at_/usr/lib/musl/include/signal.h:168:2),
  sa_mask: sigset_t,
  sa_flags: i32,
  sa_restorer: cfntype()
}
cstruct struct_sigevent
cfn __libc_current_sigrtmin(): i32
cfn __libc_current_sigrtmax(): i32
cfn kill(arg_0: pid_t, arg_1: i32): i32
cfn sigemptyset(arg_0: cptr(sigset_t!)): i32
cfn sigfillset(arg_0: cptr(sigset_t!)): i32
cfn sigaddset(arg_0: cptr(sigset_t!), arg_1: i32): i32
cfn sigdelset(arg_0: cptr(sigset_t!), arg_1: i32): i32
cfn sigismember(arg_0: cptr(sigset_t), arg_1: i32): i32
cfn sigprocmask(arg_0: i32, arg_1: cptr(sigset_t), arg_2: cptr(sigset_t!)): i32
cfn sigsuspend(arg_0: cptr(sigset_t)): i32
cfn sigaction(arg_0: i32, arg_1: cptr(struct_sigaction), arg_2: cptr(struct_sigaction!)): i32
cfn sigpending(arg_0: cptr(sigset_t!)): i32
cfn sigwait(arg_0: cptr(sigset_t), arg_1: cptr(i32!)): i32
cfn sigwaitinfo(arg_0: cptr(sigset_t), arg_1: cptr(siginfo_t!)): i32
cfn sigtimedwait(arg_0: cptr(sigset_t), arg_1: cptr(siginfo_t!), arg_2: cptr(struct_timespec)): i32
cfn sigqueue(arg_0: pid_t, arg_1: i32, arg_2: union_sigval): i32
cfn pthread_sigmask(arg_0: i32, arg_1: cptr(sigset_t), arg_2: cptr(sigset_t!)): i32
cfn pthread_kill(arg_0: pthread_t, arg_1: i32): i32
cfn psiginfo(arg_0: cptr(siginfo_t), arg_1: cptr(i8))
cfn psignal(arg_0: i32, arg_1: cptr(i8))
alias sig_atomic_t: i32
cfn signal(arg_0: i32, arg_1: cfntype(i32!)): cfntype(i32!)
cfn raise(arg_0: i32): i32
alias va_list: __builtin_va_list
cstruct struct_max_align_t {
  __ll: i64,
  __ld: f128
}
alias max_align_t: struct_max_align_t
alias ptrdiff_t: i64
alias ssize_t: i64
alias off_t: i64
cstruct struct__IO_FILE
alias FILE: struct__IO_FILE
alias __isoc_va_list: __builtin_va_list
cunion union__G_fpos64_t {
  __opaque: i8[16],
  __lldata: i64,
  __align: f64
}
alias fpos_t: union__G_fpos64_t
cfn fopen(arg_0: cptr(i8), arg_1: cptr(i8)): cptr(FILE!)
cfn freopen(arg_0: cptr(i8), arg_1: cptr(i8), arg_2: cptr(FILE!)): cptr(FILE!)
cfn fclose(arg_0: cptr(FILE!)): i32
cfn remove(arg_0: cptr(i8)): i32
cfn rename(arg_0: cptr(i8), arg_1: cptr(i8)): i32
cfn feof(arg_0: cptr(FILE!)): i32
cfn ferror(arg_0: cptr(FILE!)): i32
cfn fflush(arg_0: cptr(FILE!)): i32
cfn clearerr(arg_0: cptr(FILE!))
cfn fseek(arg_0: cptr(FILE!), arg_1: i64, arg_2: i32): i32
cfn ftell(arg_0: cptr(FILE!)): i64
cfn rewind(arg_0: cptr(FILE!))
cfn fgetpos(arg_0: cptr(FILE!), arg_1: cptr(fpos_t!)): i32
cfn fsetpos(arg_0: cptr(FILE!), arg_1: cptr(fpos_t)): i32
cfn fread(arg_0: cptr(void!), arg_1: size_t, arg_2: size_t, arg_3: cptr(FILE!)): u64
cfn fwrite(arg_0: cptr(void), arg_1: size_t, arg_2: size_t, arg_3: cptr(FILE!)): u64
cfn fgetc(arg_0: cptr(FILE!)): i32
cfn getc(arg_0: cptr(FILE!)): i32
cfn getchar(): i32
cfn ungetc(arg_0: i32, arg_1: cptr(FILE!)): i32
cfn fputc(arg_0: i32, arg_1: cptr(FILE!)): i32
cfn putc(arg_0: i32, arg_1: cptr(FILE!)): i32
cfn putchar(arg_0: i32): i32
cfn fgets(arg_0: cptr(i8!), arg_1: i32, arg_2: cptr(FILE!)): cptr(i8!)
cfn fputs(arg_0: cptr(i8), arg_1: cptr(FILE!)): i32
cfn puts(arg_0: cptr(i8)): i32
cfn printf(arg_0: cptr(i8)): i32
cfn fprintf(arg_0: cptr(FILE!), arg_1: cptr(i8)): i32
cfn sprintf(arg_0: cptr(i8!), arg_1: cptr(i8)): i32
cfn snprintf(arg_0: cptr(i8!), arg_1: size_t, arg_2: cptr(i8)): i32
cfn vprintf(arg_0: cptr(i8), arg_1: __isoc_va_list): i32
cfn vfprintf(arg_0: cptr(FILE!), arg_1: cptr(i8), arg_2: __isoc_va_list): i32
cfn vsprintf(arg_0: cptr(i8!), arg_1: cptr(i8), arg_2: __isoc_va_list): i32
cfn vsnprintf(arg_0: cptr(i8!), arg_1: size_t, arg_2: cptr(i8), arg_3: __isoc_va_list): i32
cfn scanf(arg_0: cptr(i8)): i32
cfn fscanf(arg_0: cptr(FILE!), arg_1: cptr(i8)): i32
cfn sscanf(arg_0: cptr(i8), arg_1: cptr(i8)): i32
cfn vscanf(arg_0: cptr(i8), arg_1: __isoc_va_list): i32
cfn vfscanf(arg_0: cptr(FILE!), arg_1: cptr(i8), arg_2: __isoc_va_list): i32
cfn vsscanf(arg_0: cptr(i8), arg_1: cptr(i8), arg_2: __isoc_va_list): i32
cfn perror(arg_0: cptr(i8))
cfn setvbuf(arg_0: cptr(FILE!), arg_1: cptr(i8!), arg_2: i32, arg_3: size_t): i32
cfn setbuf(arg_0: cptr(FILE!), arg_1: cptr(i8!))
cfn tmpnam(arg_0: cptr(i8!)): cptr(i8!)
cfn tmpfile(): cptr(FILE!)
cfn fmemopen(arg_0: cptr(void!), arg_1: size_t, arg_2: cptr(i8)): cptr(FILE!)
cfn open_memstream(arg_0: cptr(cptr(i8!)!), arg_1: cptr(size_t!)): cptr(FILE!)
cfn fdopen(arg_0: i32, arg_1: cptr(i8)): cptr(FILE!)
cfn popen(arg_0: cptr(i8), arg_1: cptr(i8)): cptr(FILE!)
cfn pclose(arg_0: cptr(FILE!)): i32
cfn fileno(arg_0: cptr(FILE!)): i32
cfn fseeko(arg_0: cptr(FILE!), arg_1: off_t, arg_2: i32): i32
cfn ftello(arg_0: cptr(FILE!)): off_t
cfn dprintf(arg_0: i32, arg_1: cptr(i8)): i32
cfn vdprintf(arg_0: i32, arg_1: cptr(i8), arg_2: __isoc_va_list): i32
cfn flockfile(arg_0: cptr(FILE!))
cfn ftrylockfile(arg_0: cptr(FILE!)): i32
cfn funlockfile(arg_0: cptr(FILE!))
cfn getc_unlocked(arg_0: cptr(FILE!)): i32
cfn getchar_unlocked(): i32
cfn putc_unlocked(arg_0: i32, arg_1: cptr(FILE!)): i32
cfn putchar_unlocked(arg_0: i32): i32
cfn getdelim(arg_0: cptr(cptr(i8!)!), arg_1: cptr(size_t!), arg_2: i32, arg_3: cptr(FILE!)): ssize_t
cfn getline(arg_0: cptr(cptr(i8!)!), arg_1: cptr(size_t!), arg_2: cptr(FILE!)): ssize_t
cfn renameat(arg_0: i32, arg_1: cptr(i8), arg_2: i32, arg_3: cptr(i8)): i32
cfn ctermid(arg_0: cptr(i8!)): cptr(i8!)
cfn atoi(arg_0: cptr(i8)): i32
cfn atol(arg_0: cptr(i8)): i64
cfn atoll(arg_0: cptr(i8)): i64
cfn atof(arg_0: cptr(i8)): f64
cfn strtof(arg_0: cptr(i8), arg_1: cptr(cptr(i8!)!)): f32
cfn strtod(arg_0: cptr(i8), arg_1: cptr(cptr(i8!)!)): f64
cfn strtold(arg_0: cptr(i8), arg_1: cptr(cptr(i8!)!)): f128
cfn strtol(arg_0: cptr(i8), arg_1: cptr(cptr(i8!)!), arg_2: i32): i64
cfn strtoul(arg_0: cptr(i8), arg_1: cptr(cptr(i8!)!), arg_2: i32): u64
cfn strtoll(arg_0: cptr(i8), arg_1: cptr(cptr(i8!)!), arg_2: i32): i64
cfn strtoull(arg_0: cptr(i8), arg_1: cptr(cptr(i8!)!), arg_2: i32): u64
cfn rand(): i32
cfn srand(arg_0: u32)
cfn malloc(arg_0: size_t): cptr(void!)
cfn calloc(arg_0: size_t, arg_1: size_t): cptr(void!)
cfn realloc(arg_0: cptr(void!), arg_1: size_t): cptr(void!)
cfn free(arg_0: cptr(void!))
cfn aligned_alloc(arg_0: size_t, arg_1: size_t): cptr(void!)
cfn abort()
cfn atexit(arg_0: cfntype()): i32
cfn exit(arg_0: i32)
cfn _Exit(arg_0: i32)
cfn at_quick_exit(arg_0: cfntype()): i32
cfn quick_exit(arg_0: i32)
cfn getenv(arg_0: cptr(i8)): cptr(i8!)
cfn system(arg_0: cptr(i8)): i32
cfn bsearch(arg_0: cptr(void), arg_1: cptr(void), arg_2: size_t, arg_3: size_t, arg_4: cfntype(cptr(void)!, cptr(void)!): i32): cptr(void!)
cfn qsort(arg_0: cptr(void!), arg_1: size_t, arg_2: size_t, arg_3: cfntype(cptr(void)!, cptr(void)!): i32)
cfn abs(arg_0: i32): i32
cfn labs(arg_0: i64): i64
cfn llabs(arg_0: i64): i64
cstruct struct_div_t {
  quot: i32,
  rem: i32
}
alias div_t: struct_div_t
cstruct struct_ldiv_t {
  quot: i64,
  rem: i64
}
alias ldiv_t: struct_ldiv_t
cstruct struct_lldiv_t {
  quot: i64,
  rem: i64
}
alias lldiv_t: struct_lldiv_t
cfn div(arg_0: i32, arg_1: i32): div_t
cfn ldiv(arg_0: i64, arg_1: i64): ldiv_t
cfn lldiv(arg_0: i64, arg_1: i64): lldiv_t
cfn mblen(arg_0: cptr(i8), arg_1: size_t): i32
cfn mbtowc(arg_0: cptr(wchar_t!), arg_1: cptr(i8), arg_2: size_t): i32
cfn wctomb(arg_0: cptr(i8!), arg_1: wchar_t): i32
cfn mbstowcs(arg_0: cptr(wchar_t!), arg_1: cptr(i8), arg_2: size_t): size_t
cfn wcstombs(arg_0: cptr(i8!), arg_1: cptr(wchar_t), arg_2: size_t): size_t
cfn __ctype_get_mb_cur_max(): size_t
cfn posix_memalign(arg_0: cptr(cptr(void!)!), arg_1: size_t, arg_2: size_t): i32
cfn setenv(arg_0: cptr(i8), arg_1: cptr(i8), arg_2: i32): i32
cfn unsetenv(arg_0: cptr(i8)): i32
cfn mkstemp(arg_0: cptr(i8!)): i32
cfn mkostemp(arg_0: cptr(i8!), arg_1: i32): i32
cfn mkdtemp(arg_0: cptr(i8!)): cptr(i8!)
cfn getsubopt(arg_0: cptr(cptr(i8!)!), arg_1: cptr(cptr(i8!)), arg_2: cptr(cptr(i8!)!)): i32
cfn rand_r(arg_0: cptr(u32!)): i32
cfn memcpy(arg_0: cptr(void!), arg_1: cptr(void), arg_2: size_t): cptr(void!)
cfn memmove(arg_0: cptr(void!), arg_1: cptr(void), arg_2: size_t): cptr(void!)
cfn memset(arg_0: cptr(void!), arg_1: i32, arg_2: size_t): cptr(void!)
cfn memcmp(arg_0: cptr(void), arg_1: cptr(void), arg_2: size_t): i32
cfn memchr(arg_0: cptr(void), arg_1: i32, arg_2: size_t): cptr(void!)
cfn strcpy(arg_0: cptr(i8!), arg_1: cptr(i8)): cptr(i8!)
cfn strncpy(arg_0: cptr(i8!), arg_1: cptr(i8), arg_2: size_t): cptr(i8!)
cfn strcat(arg_0: cptr(i8!), arg_1: cptr(i8)): cptr(i8!)
cfn strncat(arg_0: cptr(i8!), arg_1: cptr(i8), arg_2: size_t): cptr(i8!)
cfn strcmp(arg_0: cptr(i8), arg_1: cptr(i8)): i32
cfn strncmp(arg_0: cptr(i8), arg_1: cptr(i8), arg_2: size_t): i32
cfn strcoll(arg_0: cptr(i8), arg_1: cptr(i8)): i32
cfn strxfrm(arg_0: cptr(i8!), arg_1: cptr(i8), arg_2: size_t): u64
cfn strchr(arg_0: cptr(i8), arg_1: i32): cptr(i8!)
cfn strrchr(arg_0: cptr(i8), arg_1: i32): cptr(i8!)
cfn strcspn(arg_0: cptr(i8), arg_1: cptr(i8)): u64
cfn strspn(arg_0: cptr(i8), arg_1: cptr(i8)): u64
cfn strpbrk(arg_0: cptr(i8), arg_1: cptr(i8)): cptr(i8!)
cfn strstr(arg_0: cptr(i8), arg_1: cptr(i8)): cptr(i8!)
cfn strtok(arg_0: cptr(i8!), arg_1: cptr(i8)): cptr(i8!)
cfn strlen(arg_0: cptr(i8)): u64
cfn strerror(arg_0: i32): cptr(i8!)
cfn strtok_r(arg_0: cptr(i8!), arg_1: cptr(i8), arg_2: cptr(cptr(i8!)!)): cptr(i8!)
cfn strerror_r(arg_0: i32, arg_1: cptr(i8!), arg_2: size_t): i32
cfn stpcpy(arg_0: cptr(i8!), arg_1: cptr(i8)): cptr(i8!)
cfn stpncpy(arg_0: cptr(i8!), arg_1: cptr(i8), arg_2: size_t): cptr(i8!)
cfn strnlen(arg_0: cptr(i8), arg_1: size_t): size_t
cfn strdup(arg_0: cptr(i8)): cptr(i8!)
cfn strndup(arg_0: cptr(i8), arg_1: size_t): cptr(i8!)
cfn strsignal(arg_0: i32): cptr(i8!)
cfn strerror_l(arg_0: i32, arg_1: locale_t): cptr(i8!)
cfn strcoll_l(arg_0: cptr(i8), arg_1: cptr(i8), arg_2: locale_t): i32
cfn strxfrm_l(arg_0: cptr(i8!), arg_1: cptr(i8), arg_2: size_t, arg_3: locale_t): size_t
alias _Float32: f32
alias _Float64: f64
alias _Float32x: f64
alias _Float64x: f128
cfn __isinf(__value: f64): i32
cfn __finite(__value: f64): i32
cfn __isnan(__value: f64): i32
cfn __iseqsig(__x: f64, __y: f64): i32
cfn __issignaling(__value: f64): i32
cfn __acos(__x: f64): f64
cfn __asin(__x: f64): f64
cfn __atan(__x: f64): f64
cfn __atan2(__y: f64, __x: f64): f64
cfn __cos(__x: f64): f64
cfn __sin(__x: f64): f64
cfn __tan(__x: f64): f64
cfn __cosh(__x: f64): f64
cfn __sinh(__x: f64): f64
cfn __tanh(__x: f64): f64
cfn __acosh(__x: f64): f64
cfn __asinh(__x: f64): f64
cfn __atanh(__x: f64): f64
cfn __exp(__x: f64): f64
cfn __frexp(__x: f64, __exponent: cptr(i32!)): f64
cfn __ldexp(__x: f64, __exponent: i32): f64
cfn __log(__x: f64): f64
cfn __log10(__x: f64): f64
cfn __modf(__x: f64, __iptr: cptr(f64!)): f64
cfn __expm1(__x: f64): f64
cfn __log1p(__x: f64): f64
cfn __logb(__x: f64): f64
cfn __exp2(__x: f64): f64
cfn __log2(__x: f64): f64
cfn __pow(__x: f64, __y: f64): f64
cfn __sqrt(__x: f64): f64
cfn __hypot(__x: f64, __y: f64): f64
cfn __cbrt(__x: f64): f64
cfn __ceil(__x: f64): f64
cfn __fabs(__x: f64): f64
cfn __floor(__x: f64): f64
cfn __fmod(__x: f64, __y: f64): f64
cfn isinf(__value: f64): i32
cfn finite(__value: f64): i32
cfn drem(__x: f64, __y: f64): f64
cfn __drem(__x: f64, __y: f64): f64
cfn significand(__x: f64): f64
cfn __significand(__x: f64): f64
cfn __copysign(__x: f64, __y: f64): f64
cfn __nan(__tagb: cptr(i8)): f64
cfn isnan(__value: f64): i32
cfn j0(arg_0: f64): f64
cfn __j0(arg_0: f64): f64
cfn j1(arg_0: f64): f64
cfn __j1(arg_0: f64): f64
cfn jn(arg_0: i32, arg_1: f64): f64
cfn __jn(arg_0: i32, arg_1: f64): f64
cfn y0(arg_0: f64): f64
cfn __y0(arg_0: f64): f64
cfn y1(arg_0: f64): f64
cfn __y1(arg_0: f64): f64
cfn yn(arg_0: i32, arg_1: f64): f64
cfn __yn(arg_0: i32, arg_1: f64): f64
cfn __erf(arg_0: f64): f64
cfn __erfc(arg_0: f64): f64
cfn __lgamma(arg_0: f64): f64
cfn __tgamma(arg_0: f64): f64
cfn gamma(arg_0: f64): f64
cfn __gamma(arg_0: f64): f64
cfn lgamma_r(arg_0: f64, __signgamp: cptr(i32!)): f64
cfn __lgamma_r(arg_0: f64, __signgamp: cptr(i32!)): f64
cfn __rint(__x: f64): f64
cfn __nextafter(__x: f64, __y: f64): f64
cfn __nexttoward(__x: f64, __y: f128): f64
cfn __remainder(__x: f64, __y: f64): f64
cfn __scalbn(__x: f64, __n: i32): f64
cfn __ilogb(__x: f64): i32
cfn __scalbln(__x: f64, __n: i64): f64
cfn __nearbyint(__x: f64): f64
cfn __round(__x: f64): f64
cfn __trunc(__x: f64): f64
cfn __remquo(__x: f64, __y: f64, __quo: cptr(i32!)): f64
cfn __lrint(__x: f64): i64
cfn __llrint(__x: f64): i64
cfn __lround(__x: f64): i64
cfn __llround(__x: f64): i64
cfn __fdim(__x: f64, __y: f64): f64
cfn __fmax(__x: f64, __y: f64): f64
cfn __fmin(__x: f64, __y: f64): f64
cfn __fma(__x: f64, __y: f64, __z: f64): f64
cfn scalb(__x: f64, __n: f64): f64
cfn __scalb(__x: f64, __n: f64): f64
cfn __isinff(__value: f32): i32
cfn __finitef(__value: f32): i32
cfn __isnanf(__value: f32): i32
cfn __iseqsigf(__x: f32, __y: f32): i32
cfn __issignalingf(__value: f32): i32
cfn __acosf(__x: f32): f32
cfn __asinf(__x: f32): f32
cfn __atanf(__x: f32): f32
cfn __atan2f(__y: f32, __x: f32): f32
cfn __cosf(__x: f32): f32
cfn __sinf(__x: f32): f32
cfn __tanf(__x: f32): f32
cfn __coshf(__x: f32): f32
cfn __sinhf(__x: f32): f32
cfn __tanhf(__x: f32): f32
cfn __acoshf(__x: f32): f32
cfn __asinhf(__x: f32): f32
cfn __atanhf(__x: f32): f32
cfn __expf(__x: f32): f32
cfn __frexpf(__x: f32, __exponent: cptr(i32!)): f32
cfn __ldexpf(__x: f32, __exponent: i32): f32
cfn __logf(__x: f32): f32
cfn __log10f(__x: f32): f32
cfn __modff(__x: f32, __iptr: cptr(f32!)): f32
cfn __expm1f(__x: f32): f32
cfn __log1pf(__x: f32): f32
cfn __logbf(__x: f32): f32
cfn __exp2f(__x: f32): f32
cfn __log2f(__x: f32): f32
cfn __powf(__x: f32, __y: f32): f32
cfn __sqrtf(__x: f32): f32
cfn __hypotf(__x: f32, __y: f32): f32
cfn __cbrtf(__x: f32): f32
cfn __ceilf(__x: f32): f32
cfn __fabsf(__x: f32): f32
cfn __floorf(__x: f32): f32
cfn __fmodf(__x: f32, __y: f32): f32
cfn isinff(__value: f32): i32
cfn finitef(__value: f32): i32
cfn dremf(__x: f32, __y: f32): f32
cfn __dremf(__x: f32, __y: f32): f32
cfn significandf(__x: f32): f32
cfn __significandf(__x: f32): f32
cfn __copysignf(__x: f32, __y: f32): f32
cfn __nanf(__tagb: cptr(i8)): f32
cfn isnanf(__value: f32): i32
cfn j0f(arg_0: f32): f32
cfn __j0f(arg_0: f32): f32
cfn j1f(arg_0: f32): f32
cfn __j1f(arg_0: f32): f32
cfn jnf(arg_0: i32, arg_1: f32): f32
cfn __jnf(arg_0: i32, arg_1: f32): f32
cfn y0f(arg_0: f32): f32
cfn __y0f(arg_0: f32): f32
cfn y1f(arg_0: f32): f32
cfn __y1f(arg_0: f32): f32
cfn ynf(arg_0: i32, arg_1: f32): f32
cfn __ynf(arg_0: i32, arg_1: f32): f32
cfn __erff(arg_0: f32): f32
cfn __erfcf(arg_0: f32): f32
cfn __lgammaf(arg_0: f32): f32
cfn __tgammaf(arg_0: f32): f32
cfn gammaf(arg_0: f32): f32
cfn __gammaf(arg_0: f32): f32
cfn lgammaf_r(arg_0: f32, __signgamp: cptr(i32!)): f32
cfn __lgammaf_r(arg_0: f32, __signgamp: cptr(i32!)): f32
cfn __rintf(__x: f32): f32
cfn __nextafterf(__x: f32, __y: f32): f32
cfn __nexttowardf(__x: f32, __y: f128): f32
cfn __remainderf(__x: f32, __y: f32): f32
cfn __scalbnf(__x: f32, __n: i32): f32
cfn __ilogbf(__x: f32): i32
cfn __scalblnf(__x: f32, __n: i64): f32
cfn __nearbyintf(__x: f32): f32
cfn __roundf(__x: f32): f32
cfn __truncf(__x: f32): f32
cfn __remquof(__x: f32, __y: f32, __quo: cptr(i32!)): f32
cfn __lrintf(__x: f32): i64
cfn __llrintf(__x: f32): i64
cfn __lroundf(__x: f32): i64
cfn __llroundf(__x: f32): i64
cfn __fdimf(__x: f32, __y: f32): f32
cfn __fmaxf(__x: f32, __y: f32): f32
cfn __fminf(__x: f32, __y: f32): f32
cfn __fmaf(__x: f32, __y: f32, __z: f32): f32
cfn scalbf(__x: f32, __n: f32): f32
cfn __scalbf(__x: f32, __n: f32): f32
cfn __isinfl(__value: f128): i32
cfn __finitel(__value: f128): i32
cfn __isnanl(__value: f128): i32
cfn __iseqsigl(__x: f128, __y: f128): i32
cfn __issignalingl(__value: f128): i32
cfn __acosl(__x: f128): f128
cfn __asinl(__x: f128): f128
cfn __atanl(__x: f128): f128
cfn __atan2l(__y: f128, __x: f128): f128
cfn __cosl(__x: f128): f128
cfn __sinl(__x: f128): f128
cfn __tanl(__x: f128): f128
cfn __coshl(__x: f128): f128
cfn __sinhl(__x: f128): f128
cfn __tanhl(__x: f128): f128
cfn __acoshl(__x: f128): f128
cfn __asinhl(__x: f128): f128
cfn __atanhl(__x: f128): f128
cfn __expl(__x: f128): f128
cfn __frexpl(__x: f128, __exponent: cptr(i32!)): f128
cfn __ldexpl(__x: f128, __exponent: i32): f128
cfn __logl(__x: f128): f128
cfn __log10l(__x: f128): f128
cfn __modfl(__x: f128, __iptr: cptr(f128!)): f128
cfn __expm1l(__x: f128): f128
cfn __log1pl(__x: f128): f128
cfn __logbl(__x: f128): f128
cfn __exp2l(__x: f128): f128
cfn __log2l(__x: f128): f128
cfn __powl(__x: f128, __y: f128): f128
cfn __sqrtl(__x: f128): f128
cfn __hypotl(__x: f128, __y: f128): f128
cfn __cbrtl(__x: f128): f128
cfn __ceill(__x: f128): f128
cfn __fabsl(__x: f128): f128
cfn __floorl(__x: f128): f128
cfn __fmodl(__x: f128, __y: f128): f128
cfn isinfl(__value: f128): i32
cfn finitel(__value: f128): i32
cfn dreml(__x: f128, __y: f128): f128
cfn __dreml(__x: f128, __y: f128): f128
cfn significandl(__x: f128): f128
cfn __significandl(__x: f128): f128
cfn __copysignl(__x: f128, __y: f128): f128
cfn __nanl(__tagb: cptr(i8)): f128
cfn isnanl(__value: f128): i32
cfn j0l(arg_0: f128): f128
cfn __j0l(arg_0: f128): f128
cfn j1l(arg_0: f128): f128
cfn __j1l(arg_0: f128): f128
cfn jnl(arg_0: i32, arg_1: f128): f128
cfn __jnl(arg_0: i32, arg_1: f128): f128
cfn y0l(arg_0: f128): f128
cfn __y0l(arg_0: f128): f128
cfn y1l(arg_0: f128): f128
cfn __y1l(arg_0: f128): f128
cfn ynl(arg_0: i32, arg_1: f128): f128
cfn __ynl(arg_0: i32, arg_1: f128): f128
cfn __erfl(arg_0: f128): f128
cfn __erfcl(arg_0: f128): f128
cfn __lgammal(arg_0: f128): f128
cfn __tgammal(arg_0: f128): f128
cfn gammal(arg_0: f128): f128
cfn __gammal(arg_0: f128): f128
cfn lgammal_r(arg_0: f128, __signgamp: cptr(i32!)): f128
cfn __lgammal_r(arg_0: f128, __signgamp: cptr(i32!)): f128
cfn __rintl(__x: f128): f128
cfn __nextafterl(__x: f128, __y: f128): f128
cfn __nexttowardl(__x: f128, __y: f128): f128
cfn __remainderl(__x: f128, __y: f128): f128
cfn __scalbnl(__x: f128, __n: i32): f128
cfn __ilogbl(__x: f128): i32
cfn __scalblnl(__x: f128, __n: i64): f128
cfn __nearbyintl(__x: f128): f128
cfn __roundl(__x: f128): f128
cfn __truncl(__x: f128): f128
cfn __remquol(__x: f128, __y: f128, __quo: cptr(i32!)): f128
cfn __lrintl(__x: f128): i64
cfn __llrintl(__x: f128): i64
cfn __lroundl(__x: f128): i64
cfn __llroundl(__x: f128): i64
cfn __fdiml(__x: f128, __y: f128): f128
cfn __fmaxl(__x: f128, __y: f128): f128
cfn __fminl(__x: f128, __y: f128): f128
cfn __fmal(__x: f128, __y: f128, __z: f128): f128
cfn scalbl(__x: f128, __n: f128): f128
cfn __scalbl(__x: f128, __n: f128): f128
val FP_NAN: 0u32
val FP_INFINITE: 1u32
val FP_ZERO: 2u32
val FP_SUBNORMAL: 3u32
val FP_NORMAL: 4u32
cfn __cacos(__z: c128): c128
cfn __casin(__z: c128): c128
cfn __catan(__z: c128): c128
cfn __ccos(__z: c128): c128
cfn __csin(__z: c128): c128
cfn __ctan(__z: c128): c128
cfn __cacosh(__z: c128): c128
cfn __casinh(__z: c128): c128
cfn __catanh(__z: c128): c128
cfn __ccosh(__z: c128): c128
cfn __csinh(__z: c128): c128
cfn __ctanh(__z: c128): c128
cfn __cexp(__z: c128): c128
cfn __clog(__z: c128): c128
cfn __cpow(__x: c128, __y: c128): c128
cfn __csqrt(__z: c128): c128
cfn __cabs(__z: c128): f64
cfn __carg(__z: c128): f64
cfn __conj(__z: c128): c128
cfn __cproj(__z: c128): c128
cfn __cimag(__z: c128): f64
cfn __creal(__z: c128): f64
cfn __cacosf(__z: c64): c64
cfn __casinf(__z: c64): c64
cfn __catanf(__z: c64): c64
cfn __ccosf(__z: c64): c64
cfn __csinf(__z: c64): c64
cfn __ctanf(__z: c64): c64
cfn __cacoshf(__z: c64): c64
cfn __casinhf(__z: c64): c64
cfn __catanhf(__z: c64): c64
cfn __ccoshf(__z: c64): c64
cfn __csinhf(__z: c64): c64
cfn __ctanhf(__z: c64): c64
cfn __cexpf(__z: c64): c64
cfn __clogf(__z: c64): c64
cfn __cpowf(__x: c64, __y: c64): c64
cfn __csqrtf(__z: c64): c64
cfn __cabsf(__z: c64): f32
cfn __cargf(__z: c64): f32
cfn __conjf(__z: c64): c64
cfn __cprojf(__z: c64): c64
cfn __cimagf(__z: c64): f32
cfn __crealf(__z: c64): f32
cfn __cacosl(__z: c256): c256
cfn __casinl(__z: c256): c256
cfn __catanl(__z: c256): c256
cfn __ccosl(__z: c256): c256
cfn __csinl(__z: c256): c256
cfn __ctanl(__z: c256): c256
cfn __cacoshl(__z: c256): c256
cfn __casinhl(__z: c256): c256
cfn __catanhl(__z: c256): c256
cfn __ccoshl(__z: c256): c256
cfn __csinhl(__z: c256): c256
cfn __ctanhl(__z: c256): c256
cfn __cexpl(__z: c256): c256
cfn __clogl(__z: c256): c256
cfn __cpowl(__x: c256, __y: c256): c256
cfn __csqrtl(__z: c256): c256
cfn __cabsl(__z: c256): f128
cfn __cargl(__z: c256): f128
cfn __conjl(__z: c256): c256
cfn __cprojl(__z: c256): c256
cfn __cimagl(__z: c256): f128
cfn __creall(__z: c256): f128
cstruct struct_tm
alias clockid_t: i32
alias timer_t: cptr(void!)
cstruct struct_itimerspec {
  it_interval: struct_timespec,
  it_value: struct_timespec
}
cstruct struct___locale_data
alias __locale_t: cptr(struct___locale_struct!)
cfn clock(): clock_t
cfn time(arg_0: cptr(time_t!)): time_t
cfn difftime(arg_0: time_t, arg_1: time_t): f64
cfn mktime(arg_0: cptr(struct_tm!)): time_t
cfn strftime(arg_0: cptr(i8!), arg_1: size_t, arg_2: cptr(i8), arg_3: cptr(struct_tm)): size_t
cfn strftime_l(arg_0: cptr(i8!), arg_1: size_t, arg_2: cptr(i8), arg_3: cptr(struct_tm), arg_4: locale_t): size_t
cfn gmtime(arg_0: cptr(time_t)): cptr(struct_tm!)
cfn localtime(arg_0: cptr(time_t)): cptr(struct_tm!)
cfn gmtime_r(arg_0: cptr(time_t), arg_1: cptr(struct_tm!)): cptr(struct_tm!)
cfn localtime_r(arg_0: cptr(time_t), arg_1: cptr(struct_tm!)): cptr(struct_tm!)
cfn asctime(arg_0: cptr(struct_tm)): cptr(i8!)
cfn ctime(arg_0: cptr(time_t)): cptr(i8!)
cfn asctime_r(arg_0: cptr(struct_tm), arg_1: cptr(i8!)): cptr(i8!)
cfn ctime_r(arg_0: cptr(time_t), arg_1: cptr(i8!)): cptr(i8!)
cfn tzset()
cfn timegm(__tp: cptr(struct_tm!)): time_t
cfn timelocal(__tp: cptr(struct_tm!)): time_t
cfn dysize(__year: i32): i32
cfn nanosleep(arg_0: cptr(struct_timespec), arg_1: cptr(struct_timespec!)): i32
cfn clock_getres(arg_0: clockid_t, arg_1: cptr(struct_timespec!)): i32
cfn clock_gettime(arg_0: clockid_t, arg_1: cptr(struct_timespec!)): i32
cfn clock_settime(arg_0: clockid_t, arg_1: cptr(struct_timespec)): i32
cfn clock_nanosleep(arg_0: clockid_t, arg_1: i32, arg_2: cptr(struct_timespec), arg_3: cptr(struct_timespec!)): i32
cfn clock_getcpuclockid(arg_0: pid_t, arg_1: cptr(clockid_t!)): i32
cfn timer_create(arg_0: clockid_t, arg_1: cptr(struct_sigevent!), arg_2: cptr(timer_t!)): i32
cfn timer_delete(arg_0: timer_t): i32
cfn timer_settime(arg_0: timer_t, arg_1: i32, arg_2: cptr(struct_itimerspec), arg_3: cptr(struct_itimerspec!)): i32
cfn timer_gettime(arg_0: timer_t, arg_1: cptr(struct_itimerspec!)): i32
cfn timer_getoverrun(arg_0: timer_t): i32
cfn timespec_get(arg_0: cptr(struct_timespec!), arg_1: i32): i32
alias thrd_t: cptr(struct___pthread!)
alias once_flag: i32
alias tss_t: u32
alias thrd_start_t: cfntype(cptr(void!)!): i32
alias tss_dtor_t: cfntype(cptr(void!)!)
cstruct struct_mtx_t {
  : cunion {
  __i: i32[10],
  __vi: i32[10],
  __p: cptr(void!)[5]
},
  __u: union_(anonymous_union_at_/usr/lib/musl/include/bits/alltypes.h:382:18)
}
alias mtx_t: struct_mtx_t
cstruct struct_cnd_t {
  : cunion {
  __i: i32[12],
  __vi: i32[12],
  __p: cptr(void!)[6]
},
  __u: union_(anonymous_union_at_/usr/lib/musl/include/bits/alltypes.h:392:18)
}
alias cnd_t: struct_cnd_t
val thrd_success: 0u32
val thrd_busy: 1u32
val thrd_error: 2u32
val thrd_nomem: 3u32
val thrd_timedout: 4u32
val mtx_plain: 0u32
val mtx_recursive: 1u32
val mtx_timed: 2u32
cfn thrd_create(arg_0: cptr(thrd_t!), arg_1: thrd_start_t, arg_2: cptr(void!)): i32
cfn thrd_exit(arg_0: i32)
cfn thrd_detach(arg_0: thrd_t): i32
cfn thrd_join(arg_0: thrd_t, arg_1: cptr(i32!)): i32
cfn thrd_sleep(arg_0: cptr(struct_timespec), arg_1: cptr(struct_timespec!)): i32
cfn thrd_yield()
cfn thrd_current(): thrd_t
cfn thrd_equal(arg_0: thrd_t, arg_1: thrd_t): i32
cfn call_once(arg_0: cptr(once_flag!), arg_1: cfntype())
cfn mtx_init(arg_0: cptr(mtx_t!), arg_1: i32): i32
cfn mtx_destroy(arg_0: cptr(mtx_t!))
cfn mtx_lock(arg_0: cptr(mtx_t!)): i32
cfn mtx_timedlock(arg_0: cptr(mtx_t!), arg_1: cptr(struct_timespec)): i32
cfn mtx_trylock(arg_0: cptr(mtx_t!)): i32
cfn mtx_unlock(arg_0: cptr(mtx_t!)): i32
cfn cnd_init(arg_0: cptr(cnd_t!)): i32
cfn cnd_destroy(arg_0: cptr(cnd_t!))
cfn cnd_broadcast(arg_0: cptr(cnd_t!)): i32
cfn cnd_signal(arg_0: cptr(cnd_t!)): i32
cfn cnd_timedwait(arg_0: cptr(cnd_t!), arg_1: cptr(mtx_t!), arg_2: cptr(struct_timespec)): i32
cfn cnd_wait(arg_0: cptr(cnd_t!), arg_1: cptr(mtx_t!)): i32
cfn tss_create(arg_0: cptr(tss_t!), arg_1: tss_dtor_t): i32
cfn tss_delete(arg_0: tss_t)
cfn tss_set(arg_0: tss_t, arg_1: cptr(void!)): i32
cfn tss_get(arg_0: tss_t): cptr(void!)
alias char16_t: u16
alias char32_t: u32
cstruct struct___mbstate_t {
  __opaque1: u32,
  __opaque2: u32
}
alias mbstate_t: struct___mbstate_t
cfn c16rtomb(arg_0: cptr(i8!), arg_1: char16_t, arg_2: cptr(mbstate_t!)): size_t
cfn mbrtoc16(arg_0: cptr(char16_t!), arg_1: cptr(i8), arg_2: size_t, arg_3: cptr(mbstate_t!)): size_t
cfn c32rtomb(arg_0: cptr(i8!), arg_1: char32_t, arg_2: cptr(mbstate_t!)): size_t
cfn mbrtoc32(arg_0: cptr(char32_t!), arg_1: cptr(i8), arg_2: size_t, arg_3: cptr(mbstate_t!)): size_t
alias wint_t: u32
cfn wcscpy(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t)): cptr(wchar_t!)
cfn wcsncpy(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t), arg_2: size_t): cptr(wchar_t!)
cfn wcscat(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t)): cptr(wchar_t!)
cfn wcsncat(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t), arg_2: size_t): cptr(wchar_t!)
cfn wcscmp(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t)): i32
cfn wcsncmp(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t), arg_2: size_t): i32
cfn wcscoll(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t)): i32
cfn wcsxfrm(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t), arg_2: size_t): size_t
cfn wcschr(arg_0: cptr(wchar_t), arg_1: wchar_t): cptr(i32!)
cfn wcsrchr(arg_0: cptr(wchar_t), arg_1: wchar_t): cptr(wchar_t!)
cfn wcscspn(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t)): size_t
cfn wcsspn(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t)): size_t
cfn wcspbrk(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t)): cptr(wchar_t!)
cfn wcstok(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t), arg_2: cptr(cptr(wchar_t!)!)): cptr(wchar_t!)
cfn wcslen(arg_0: cptr(wchar_t)): u64
cfn wcsstr(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t)): cptr(wchar_t!)
cfn wcswcs(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t)): cptr(wchar_t!)
cfn wmemchr(arg_0: cptr(wchar_t), arg_1: wchar_t, arg_2: size_t): cptr(i32!)
cfn wmemcmp(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t), arg_2: size_t): i32
cfn wmemcpy(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t), arg_2: size_t): cptr(i32!)
cfn wmemmove(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t), arg_2: size_t): cptr(i32!)
cfn wmemset(arg_0: cptr(wchar_t!), arg_1: wchar_t, arg_2: size_t): cptr(wchar_t!)
cfn btowc(arg_0: i32): wint_t
cfn wctob(arg_0: wint_t): i32
cfn mbsinit(arg_0: cptr(mbstate_t)): i32
cfn mbrtowc(arg_0: cptr(wchar_t!), arg_1: cptr(i8), arg_2: size_t, arg_3: cptr(mbstate_t!)): size_t
cfn wcrtomb(arg_0: cptr(i8!), arg_1: wchar_t, arg_2: cptr(mbstate_t!)): size_t
cfn mbrlen(arg_0: cptr(i8), arg_1: size_t, arg_2: cptr(mbstate_t!)): size_t
cfn mbsrtowcs(arg_0: cptr(wchar_t!), arg_1: cptr(cptr(i8)!), arg_2: size_t, arg_3: cptr(mbstate_t!)): size_t
cfn wcsrtombs(arg_0: cptr(i8!), arg_1: cptr(cptr(wchar_t)!), arg_2: size_t, arg_3: cptr(mbstate_t!)): size_t
cfn wcstof(arg_0: cptr(wchar_t), arg_1: cptr(cptr(wchar_t!)!)): f32
cfn wcstod(arg_0: cptr(wchar_t), arg_1: cptr(cptr(wchar_t!)!)): f64
cfn wcstold(arg_0: cptr(wchar_t), arg_1: cptr(cptr(wchar_t!)!)): f128
cfn wcstol(arg_0: cptr(wchar_t), arg_1: cptr(cptr(wchar_t!)!), arg_2: i32): i64
cfn wcstoul(arg_0: cptr(wchar_t), arg_1: cptr(cptr(wchar_t!)!), arg_2: i32): u64
cfn wcstoll(arg_0: cptr(wchar_t), arg_1: cptr(cptr(wchar_t!)!), arg_2: i32): i64
cfn wcstoull(arg_0: cptr(wchar_t), arg_1: cptr(cptr(wchar_t!)!), arg_2: i32): u64
cfn fwide(arg_0: cptr(FILE!), arg_1: i32): i32
cfn wprintf(arg_0: cptr(wchar_t)): i32
cfn fwprintf(arg_0: cptr(FILE!), arg_1: cptr(wchar_t)): i32
cfn swprintf(arg_0: cptr(wchar_t!), arg_1: size_t, arg_2: cptr(wchar_t)): i32
cfn vwprintf(arg_0: cptr(wchar_t), arg_1: __isoc_va_list): i32
cfn vfwprintf(arg_0: cptr(FILE!), arg_1: cptr(wchar_t), arg_2: __isoc_va_list): i32
cfn vswprintf(arg_0: cptr(wchar_t!), arg_1: size_t, arg_2: cptr(wchar_t), arg_3: __isoc_va_list): i32
cfn wscanf(arg_0: cptr(wchar_t)): i32
cfn fwscanf(arg_0: cptr(FILE!), arg_1: cptr(wchar_t)): i32
cfn swscanf(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t)): i32
cfn vwscanf(arg_0: cptr(wchar_t), arg_1: __isoc_va_list): i32
cfn vfwscanf(arg_0: cptr(FILE!), arg_1: cptr(wchar_t), arg_2: __isoc_va_list): i32
cfn vswscanf(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t), arg_2: __isoc_va_list): i32
cfn fgetwc(arg_0: cptr(FILE!)): wint_t
cfn getwc(arg_0: cptr(FILE!)): wint_t
cfn getwchar(): wint_t
cfn fputwc(arg_0: wchar_t, arg_1: cptr(FILE!)): wint_t
cfn putwc(arg_0: wchar_t, arg_1: cptr(FILE!)): wint_t
cfn putwchar(arg_0: wchar_t): wint_t
cfn fgetws(arg_0: cptr(wchar_t!), arg_1: i32, arg_2: cptr(FILE!)): cptr(wchar_t!)
cfn fputws(arg_0: cptr(wchar_t), arg_1: cptr(FILE!)): i32
cfn ungetwc(arg_0: wint_t, arg_1: cptr(FILE!)): wint_t
cfn wcsftime(arg_0: cptr(wchar_t!), arg_1: size_t, arg_2: cptr(wchar_t), arg_3: cptr(struct_tm)): size_t
cfn open_wmemstream(arg_0: cptr(cptr(wchar_t!)!), arg_1: cptr(size_t!)): cptr(FILE!)
cfn mbsnrtowcs(arg_0: cptr(wchar_t!), arg_1: cptr(cptr(i8)!), arg_2: size_t, arg_3: size_t, arg_4: cptr(mbstate_t!)): size_t
cfn wcsnrtombs(arg_0: cptr(i8!), arg_1: cptr(cptr(wchar_t)!), arg_2: size_t, arg_3: size_t, arg_4: cptr(mbstate_t!)): size_t
cfn wcsdup(arg_0: cptr(wchar_t)): cptr(wchar_t!)
cfn wcsnlen(arg_0: cptr(wchar_t), arg_1: size_t): size_t
cfn wcpcpy(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t)): cptr(wchar_t!)
cfn wcpncpy(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t), arg_2: size_t): cptr(wchar_t!)
cfn wcscasecmp(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t)): i32
cfn wcscasecmp_l(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t), arg_2: locale_t): i32
cfn wcsncasecmp(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t), arg_2: size_t): i32
cfn wcsncasecmp_l(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t), arg_2: size_t, arg_3: locale_t): i32
cfn wcscoll_l(arg_0: cptr(wchar_t), arg_1: cptr(wchar_t), arg_2: locale_t): i32
cfn wcsxfrm_l(arg_0: cptr(wchar_t!), arg_1: cptr(wchar_t), arg_2: size_t, arg_3: locale_t): size_t
alias wctype_t: u64
alias wctrans_t: cptr(i32)
cfn iswalnum(arg_0: wint_t): i32
cfn iswalpha(arg_0: wint_t): i32
cfn iswblank(arg_0: wint_t): i32
cfn iswcntrl(arg_0: wint_t): i32
cfn iswdigit(arg_0: wint_t): i32
cfn iswgraph(arg_0: wint_t): i32
cfn iswlower(arg_0: wint_t): i32
cfn iswprint(arg_0: wint_t): i32
cfn iswpunct(arg_0: wint_t): i32
cfn iswspace(arg_0: wint_t): i32
cfn iswupper(arg_0: wint_t): i32
cfn iswxdigit(arg_0: wint_t): i32
cfn iswctype(arg_0: wint_t, arg_1: wctype_t): i32
cfn towctrans(arg_0: wint_t, arg_1: wctrans_t): wint_t
cfn towlower(arg_0: wint_t): wint_t
cfn towupper(arg_0: wint_t): wint_t
cfn wctrans(arg_0: cptr(i8)): wctrans_t
cfn wctype(arg_0: cptr(i8)): wctype_t
cfn iswalnum_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswalpha_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswblank_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswcntrl_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswdigit_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswgraph_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswlower_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswprint_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswpunct_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswspace_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswupper_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswxdigit_l(arg_0: wint_t, arg_1: locale_t): i32
cfn iswctype_l(arg_0: wint_t, arg_1: wctype_t, arg_2: locale_t): i32
cfn towlower_l(arg_0: wint_t, arg_1: locale_t): wint_t
cfn towupper_l(arg_0: wint_t, arg_1: locale_t): wint_t
cfn towctrans_l(arg_0: wint_t, arg_1: wctrans_t, arg_2: locale_t): wint_t
cfn wctrans_l(arg_0: cptr(i8), arg_1: locale_t): wctrans_t
cfn wctype_l(arg_0: cptr(i8), arg_1: locale_t): wctype_t
