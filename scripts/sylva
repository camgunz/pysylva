#!/usr/bin/env python

import argparse
import traceback

from pathlib import Path

from antlr4 import FileStream

# pylint: disable=import-self, no-name-in-module
from sylva import errors, debug
from sylva.program import Program


def print_bar(msg):
    """Prints a message in bar form."""
    caption = msg.join((' ', ' '))
    right_bar_count = 11
    total_width = 79
    bracket_count = 2
    left_bar_count = (
        total_width - bracket_count - right_bar_count - len(caption)
    )
    print()
    print('[%s]' % ('=' * (total_width - bracket_count)))
    print('[%s%s%s]' % ('=' * left_bar_count, caption, '=' * right_bar_count))
    print('[%s]' % ('=' * (total_width - bracket_count)))
    print()


def _load_program(file_paths, stdlib=None, target_triple=None):
    s = [FileStream(str(file_path)) for file_path in file_paths]
    try:
        return Program(s, stdlib_path=stdlib, target_triple=target_triple)
    except errors.SylvaError as error:
        debug('main', traceback.format_exc())
        print(error.pformat())


def parse(file_paths, stdlib=None, target_triple=None):
    """Parses files and prints output."""
    print_bar('Parsing')
    program = _load_program(file_paths, stdlib, target_triple)

    try:
        program_errors = program.parse()
        for error in program_errors:
            print(error.pformat(), end='\n\n')
    except errors.SylvaError as error:
        debug('main', traceback.format_exc())
        print(error.pformat())


# pylint: disable=redefined-builtin
def compile(file_paths, output_folder, stdlib=None, target_triple=None):
    """Compiles files."""
    print_bar('Compiling')
    program = _load_program(file_paths, stdlib, target_triple)

    try:
        program_errors = program.compile(output_folder)
        for error in program_errors:
            print(error.pformat(), end='\n\n')
    except errors.SylvaError as error:
        debug('main', traceback.format_exc())
        print(error.pformat())


def main():
    """Main function."""
    parser = argparse.ArgumentParser(description='Sylva')
    parser.add_argument(
        '--only-parse', action='store_true', help='Only perform parsing'
    )
    parser.add_argument('--stdlib', type=str, help='Path to standard library')
    parser.add_argument('--target', type=str, help='Compilation target')
    parser.add_argument(
        '--output-folder', type=Path, required=True, help='Output folder'
    )
    parser.add_argument('files', type=Path, nargs='+', help='Files to compile')

    args = parser.parse_args()

    if args.only_parse:
        parse(args.files, args.stdlib, args.target)
    else:
        compile(args.files, args.output_folder, args.stdlib, args.target)


main()
