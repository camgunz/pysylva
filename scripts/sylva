#!/usr/bin/env python

import os
import sys
import distutils
import argparse

from sylva import errors
from sylva.data_source import DataSource
from sylva.lexer import Lexer
from sylva.program import Program


_DEBUG = distutils.util.strtobool(os.environ.get('SYLVA_DEBUG', '0'))


def print_bar(msg):
    """Prints a message in bar form."""
    caption = msg.join((' ', ' '))
    right_bar_count = 11
    total_width = 79
    bracket_count = 2
    left_bar_count = (
        total_width - bracket_count - right_bar_count - len(caption)
    )
    print()
    print('[%s]' % ('=' * (total_width - bracket_count)))
    print('[%s%s%s]' % ('=' * left_bar_count, caption, '=' * right_bar_count))
    print('[%s]' % ('=' * (total_width - bracket_count)))
    print()


def lex(file_paths):
    """Lexes files and prints output."""
    print_bar('Lexing')
    for file_path in file_paths:
        try:
            for token in Lexer(DataSource.FromFile(file_path)):
                print(token)
        except errors.SylvaError as error:
            if _DEBUG:
                import traceback
                traceback.print_exc()
            print(error.pformat())


def parse(file_paths, stdlib=None):
    """Parses files and prints output."""
    print_bar('Parsing')
    data_sources = [DataSource.FromFile(file_path) for file_path in file_paths]
    program = Program(data_sources, stdlib)
    try:
        program.parse()
    except errors.SylvaError as error:
        if _DEBUG:
            import traceback
            traceback.print_exc()
        print(error.pformat())


# pylint: disable=redefined-builtin
def compile(file_paths, stdlib=None):
    """Compiles files."""
    print_bar('Compiling')
    data_sources = [DataSource.FromFile(file_path) for file_path in file_paths]
    program = Program(data_sources, stdlib)
    try:
        program.compile()
    except errors.SylvaError as error:
        if _DEBUG:
            import traceback
            traceback.print_exc()
        print(error.pformat())


def main():
    """Main function."""
    parser = argparse.ArgumentParser(description='Sylva')
    parser.add_argument(
        '--only-lex', action='store_true',
        help='Only perform lexing'
    )
    parser.add_argument(
        '--only-parse', action='store_true',
        help='Only perform parsing'
    )
    parser.add_argument('--stdlib', type=str, help='Path to standard library')
    parser.add_argument('files', type=str, nargs='+', help='Files to compile')

    args = parser.parse_args()

    if all([args.only_lex, args.only_parse]):
        parser.print_help()
        sys.exit(2)

    if args.only_lex:
        lex(args['files'])
        sys.exit(0)

    if args.only_parse:
        parse(args['files'], args.get('stdlib'))
        sys.exit(0)

    compile(args.files, args.stdlib)


main()
