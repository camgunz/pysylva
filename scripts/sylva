#!/usr/bin/env python

import os
import sys

from sylva import errors
from sylva.data_source import DataSource
from sylva.lexer import Lexer
from sylva.program import Program


_DEBUG = True


def print_usage(error_message=None):
    exe_name = os.path.basename(sys.argv[0])
    if error_message:
        print('\nError: %s' % (error_message), file=sys.stderr)
    print('\nUsage: %s [ action ] [ file ] [ file ] ...\n' % (exe_name))
    print('Valid actions: lex, parse\n')
    sys.exit(-1)


def print_bar(msg):
    caption = msg.join((' ', ' '))
    right_bar_count = 11
    total_width = 79
    bracket_count = 2
    left_bar_count = (
        total_width - bracket_count - right_bar_count - len(caption)
    )
    print()
    print('[%s]' % ('=' * (total_width - bracket_count)))
    print('[%s%s%s]' % ('=' * left_bar_count, caption, '=' * right_bar_count))
    print('[%s]' % ('=' * (total_width - bracket_count)))
    print()


def lex(file_paths):
    print_bar('Lexing')
    for file_path in file_paths:
        try:
            for token in Lexer(DataSource.FromFile(file_path)):
                print(token)
        except errors.SylvaError as error:
            if _DEBUG:
                import traceback
                traceback.print_exc()
            print(error.pformat())


def parse(file_paths):
    print_bar('Parsing')
    data_sources = [DataSource.FromFile(file_path) for file_path in file_paths]
    program = Program(data_sources)
    try:
        program.parse()
    except errors.SylvaError as error:
        if _DEBUG:
            import traceback
            traceback.print_exc()
        print(error.pformat())


def main():
    if len(sys.argv) < 3:
        print_usage()
    action = sys.argv[1]
    file_paths = [x for x in sys.argv[2:]]
    if action == 'lex':
        lex(file_paths)
    elif action == 'parse':
        parse(file_paths)
    else:
        print_usage('Invalid action')


main()
